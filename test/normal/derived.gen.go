// Code generated by goderive DO NOT EDIT.

package test

import (
	"bytes"
	extra "github.com/awalterschulze/goderive/test/extra"
	"reflect"
	"sort"
	"strings"
	"time"
	"unsafe"
)

func deriveTakeWhile(pred func(int) bool, list []int) []int {
	out := make([]int, 0, len(list))
	for i, elem := range list {
		if !pred(elem) {
			break
		}
		out = append(out, list[i])
	}
	return out
}

func deriveIntersectSetOfInt64s(this, that map[int64]struct{}) map[int64]struct{} {
	intersect := make(map[int64]struct{}, deriveMinInt(len(this), len(that)))
	for k := range this {
		if _, ok := that[k]; ok {
			intersect[k] = struct{}{}
		}
	}
	return intersect
}

func deriveIntersectOfInt64s(this, that []int64) []int64 {
	intersect := make([]int64, 0, deriveMinInt(len(this), len(that)))
	for i, v := range this {
		if deriveContainsInt64s(that, v) {
			intersect = append(intersect, this[i])
		}
	}
	return intersect
}

func deriveContainsInt64s(list []int64, item int64) bool {
	for _, v := range list {
		if v == item {
			return true
		}
	}
	return false
}

func deriveContainsStruct(list []*BuiltInTypes, item *BuiltInTypes) bool {
	for _, v := range list {
		if deriveEqualPtrToBuiltInTypes(v, item) {
			return true
		}
	}
	return false
}

func deriveUncurryMarshal(f func(data []byte) func(v interface{}) error) func(data []byte, v interface{}) error {
	return func(data []byte, v interface{}) error {
		return f(data)(v)
	}
}

func deriveUncurry3(f func(a int) func(b string, c bool) string) func(a int, b string, c bool) string {
	return func(a int, b string, c bool) string {
		return f(a)(b, c)
	}
}

func deriveUncurryCurried(f func(b string) func(c bool) string) func(b string, c bool) string {
	return func(b string, c bool) string {
		return f(b)(c)
	}
}

func deriveComparePtrToEmpty(this, that *Empty) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return 0
}

func deriveComparePtrToBuiltInTypes(this, that *BuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareComplex64(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareComplex32(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_f(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_fl(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_i(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_in(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_int6(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_int8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := strings.Compare(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_u(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_ui(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_uin(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_uint(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_1(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPrivateBuiltInTypes(this, that *PrivateBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare(this.privateBool, that.privateBool); c != 0 {
		return c
	}
	if c := deriveCompare_(this.privateByte, that.privateByte); c != 0 {
		return c
	}
	if c := deriveCompareComplex64(this.privateComplex128, that.privateComplex128); c != 0 {
		return c
	}
	if c := deriveCompareComplex32(this.privateComplex64, that.privateComplex64); c != 0 {
		return c
	}
	if c := deriveCompare_f(this.privateFloat64, that.privateFloat64); c != 0 {
		return c
	}
	if c := deriveCompare_fl(this.privateFloat32, that.privateFloat32); c != 0 {
		return c
	}
	if c := deriveCompare_i(this.privateInt, that.privateInt); c != 0 {
		return c
	}
	if c := deriveCompare_in(this.privateInt16, that.privateInt16); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.privateInt32, that.privateInt32); c != 0 {
		return c
	}
	if c := deriveCompare_int6(this.privateInt64, that.privateInt64); c != 0 {
		return c
	}
	if c := deriveCompare_int8(this.privateInt8, that.privateInt8); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.privateRune, that.privateRune); c != 0 {
		return c
	}
	if c := strings.Compare(this.privateString, that.privateString); c != 0 {
		return c
	}
	if c := deriveCompare_u(this.privateUint, that.privateUint); c != 0 {
		return c
	}
	if c := deriveCompare_ui(this.privateUint16, that.privateUint16); c != 0 {
		return c
	}
	if c := deriveCompare_uin(this.privateUint32, that.privateUint32); c != 0 {
		return c
	}
	if c := deriveCompare_uint(this.privateUint64, that.privateUint64); c != 0 {
		return c
	}
	if c := deriveCompare_(this.privateUint8, that.privateUint8); c != 0 {
		return c
	}
	if c := deriveCompare_1(this.privateUintPtr, that.privateUintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_2(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_3(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_4(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_5(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_6(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_7(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_8(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_9(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_10(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_11(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_12(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_10(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_13(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_14(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_15(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_16(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_3(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_18(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_19(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_20(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_21(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_22(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_23(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_24(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_25(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_26(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_27(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_28(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_26(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_29(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_30(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_31(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_33(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_34(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_35(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_36(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_37(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_38(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_39(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_40(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_41(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_42(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_43(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_44(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_45(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_43(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_46(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_47(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_48(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_49(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_50(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_36(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_51(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_52(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_53(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_54(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_55(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_56(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_57(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_58(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_59(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_60(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_61(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_62(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_63(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_64(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_65(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_66(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_67(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_68(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_69(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_70(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompare_71(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_72(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_73(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_74(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_75(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_76(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_77(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_78(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_79(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_80(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_81(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_82(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_83(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_84(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_85(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_86(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_87(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_88(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_89(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_90(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompare_91(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_92(this.StringToUint32, that.StringToUint32); c != 0 {
		return c
	}
	if c := deriveCompare_93(this.Uint64ToInt64, that.Uint64ToInt64); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_94(this.BoolToString, that.BoolToString); c != 0 {
		return c
	}
	if c := deriveCompare_95(this.StringToBool, that.StringToBool); c != 0 {
		return c
	}
	if c := deriveCompare_96(this.Complex128ToComplex64, that.Complex128ToComplex64); c != 0 {
		return c
	}
	if c := deriveCompare_97(this.Float64ToUint32, that.Float64ToUint32); c != 0 {
		return c
	}
	if c := deriveCompare_98(this.Uint16ToUint8, that.Uint16ToUint8); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceToSlice(this, that *SliceToSlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_99(this.Ints, that.Ints); c != 0 {
		return c
	}
	if c := deriveCompare_100(this.Strings, that.Strings); c != 0 {
		return c
	}
	if c := deriveCompare_101(this.IntPtrs, that.IntPtrs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrTo(this, that *PtrTo) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_8(this.Basic, that.Basic); c != 0 {
		return c
	}
	if c := deriveCompare_102(this.Slice, that.Slice); c != 0 {
		return c
	}
	if c := deriveCompare_103(this.Array, that.Array); c != 0 {
		return c
	}
	if c := deriveCompare_104(this.Map, that.Map); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToName(this, that *Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := strings.Compare(this.Name, that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructs(this, that *Structs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Struct.Compare(&that.Struct); c != 0 {
		return c
	}
	if c := this.PtrToStruct.Compare(that.PtrToStruct); c != 0 {
		return c
	}
	if c := deriveCompare_105(this.SliceOfStructs, that.SliceOfStructs); c != 0 {
		return c
	}
	if c := deriveCompare_106(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapWithStructs(this, that *MapWithStructs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_107(this.NameToString, that.NameToString); c != 0 {
		return c
	}
	if c := deriveCompare_108(this.StringToName, that.StringToName); c != 0 {
		return c
	}
	if c := deriveCompare_109(this.StringToPtrToName, that.StringToPtrToName); c != 0 {
		return c
	}
	if c := deriveCompare_110(this.StringToSliceOfName, that.StringToSliceOfName); c != 0 {
		return c
	}
	if c := deriveCompare_111(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToRecursiveType(this, that *RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := bytes.Compare(this.Bytes, that.Bytes); c != 0 {
		return c
	}
	if c := deriveCompare_112(this.N, that.N); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct1(this, that *EmbeddedStruct1) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Name.Compare(&that.Name); c != 0 {
		return c
	}
	if c := this.Structs.Compare(that.Structs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct2(this, that *EmbeddedStruct2) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Structs.Compare(&that.Structs); c != 0 {
		return c
	}
	if c := this.Name.Compare(that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_113(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveCompare_113(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_114(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveCompare_114(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_115(this.A, that.A); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEnums(this, that *Enums) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_M(this.Enum, that.Enum); c != 0 {
		return c
	}
	if c := deriveCompare_116(this.PtrToEnum, that.PtrToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_117(this.SliceToEnum, that.SliceToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_118(this.SliceToPtrToEnum, that.SliceToPtrToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_119(this.MapToEnum, that.MapToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_120(this.EnumToMap, that.EnumToMap); c != 0 {
		return c
	}
	if c := deriveCompare_121(this.ArrayEnum, that.ArrayEnum); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToNamedTypes(this, that *NamedTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_27(this.Slice, that.Slice); c != 0 {
		return c
	}
	if c := deriveCompare_122(this.PtrToSlice, that.PtrToSlice); c != 0 {
		return c
	}
	if c := deriveCompare_123(this.SliceToSlice, that.SliceToSlice); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToDuration(this, that *Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_D(this.D, that.D); c != 0 {
		return c
	}
	if c := deriveCompare_124(this.P, that.P); c != 0 {
		return c
	}
	if c := deriveCompare_125(this.Ds, that.Ds); c != 0 {
		return c
	}
	if c := deriveCompare_126(this.DPs, that.DPs); c != 0 {
		return c
	}
	if c := deriveCompare_127(this.MD, that.MD); c != 0 {
		return c
	}
	return 0
}

func deriveCompareComplex32(this, that complex64) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareComplex64(this, that complex128) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareDeriveTheDerived(this, that *DeriveTheDerived) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_i(this.Field, that.Field); c != 0 {
		return c
	}
	return 0
}

func deriveUniqueInt64s(list []int64) []int64 {
	if len(list) == 0 {
		return nil
	}
	u := 1
	for i := 1; i < len(list); i++ {
		if !deriveContainsInt64s(list[:u], list[i]) {
			if i != u {
				list[u] = list[i]
			}
			u++
		}
	}
	return list[:u]
}

func deriveUniqueStructs(list []*BuiltInTypes) []*BuiltInTypes {
	if len(list) == 0 {
		return nil
	}
	u := 1
	for i := 1; i < len(list); i++ {
		if !deriveContainsStruct(list[:u], list[i]) {
			if i != u {
				list[u] = list[i]
			}
			u++
		}
	}
	return list[:u]
}

func deriveFilter(pred func(int) bool, list []int) []int {
	out := make([]int, 0, len(list))
	for i, elem := range list {
		if pred(elem) {
			out = append(out, list[i])
		}
	}
	return out
}

func deriveCopyToPtrToEmpty(this, that *Empty) {
}

func deriveCopyToPtrToBuiltInTypes(this, that *BuiltInTypes) {
	that.Bool = this.Bool
	that.Byte = this.Byte
	that.Complex128 = this.Complex128
	that.Complex64 = this.Complex64
	that.Float64 = this.Float64
	that.Float32 = this.Float32
	that.Int = this.Int
	that.Int16 = this.Int16
	that.Int32 = this.Int32
	that.Int64 = this.Int64
	that.Int8 = this.Int8
	that.Rune = this.Rune
	that.String = this.String
	that.Uint = this.Uint
	that.Uint16 = this.Uint16
	that.Uint32 = this.Uint32
	that.Uint64 = this.Uint64
	that.Uint8 = this.Uint8
	that.UintPtr = this.UintPtr
}

func deriveCopyToPtrToPrivateBuiltInTypes(this, that *PrivateBuiltInTypes) {
	that.privateBool = this.privateBool
	that.privateByte = this.privateByte
	that.privateComplex128 = this.privateComplex128
	that.privateComplex64 = this.privateComplex64
	that.privateFloat64 = this.privateFloat64
	that.privateFloat32 = this.privateFloat32
	that.privateInt = this.privateInt
	that.privateInt16 = this.privateInt16
	that.privateInt32 = this.privateInt32
	that.privateInt64 = this.privateInt64
	that.privateInt8 = this.privateInt8
	that.privateRune = this.privateRune
	that.privateString = this.privateString
	that.privateUint = this.privateUint
	that.privateUint16 = this.privateUint16
	that.privateUint32 = this.privateUint32
	that.privateUint64 = this.privateUint64
	that.privateUint8 = this.privateUint8
	that.privateUintPtr = this.privateUintPtr
}

func deriveCopyToPtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) {
	if this.Bool == nil {
		that.Bool = nil
	} else {
		that.Bool = new(bool)
		*that.Bool = *this.Bool
	}
	if this.Byte == nil {
		that.Byte = nil
	} else {
		that.Byte = new(byte)
		*that.Byte = *this.Byte
	}
	if this.Complex128 == nil {
		that.Complex128 = nil
	} else {
		that.Complex128 = new(complex128)
		*that.Complex128 = *this.Complex128
	}
	if this.Complex64 == nil {
		that.Complex64 = nil
	} else {
		that.Complex64 = new(complex64)
		*that.Complex64 = *this.Complex64
	}
	if this.Float64 == nil {
		that.Float64 = nil
	} else {
		that.Float64 = new(float64)
		*that.Float64 = *this.Float64
	}
	if this.Float32 == nil {
		that.Float32 = nil
	} else {
		that.Float32 = new(float32)
		*that.Float32 = *this.Float32
	}
	if this.Int == nil {
		that.Int = nil
	} else {
		that.Int = new(int)
		*that.Int = *this.Int
	}
	if this.Int16 == nil {
		that.Int16 = nil
	} else {
		that.Int16 = new(int16)
		*that.Int16 = *this.Int16
	}
	if this.Int32 == nil {
		that.Int32 = nil
	} else {
		that.Int32 = new(int32)
		*that.Int32 = *this.Int32
	}
	if this.Int64 == nil {
		that.Int64 = nil
	} else {
		that.Int64 = new(int64)
		*that.Int64 = *this.Int64
	}
	if this.Int8 == nil {
		that.Int8 = nil
	} else {
		that.Int8 = new(int8)
		*that.Int8 = *this.Int8
	}
	if this.Rune == nil {
		that.Rune = nil
	} else {
		that.Rune = new(rune)
		*that.Rune = *this.Rune
	}
	if this.String == nil {
		that.String = nil
	} else {
		that.String = new(string)
		*that.String = *this.String
	}
	if this.Uint == nil {
		that.Uint = nil
	} else {
		that.Uint = new(uint)
		*that.Uint = *this.Uint
	}
	if this.Uint16 == nil {
		that.Uint16 = nil
	} else {
		that.Uint16 = new(uint16)
		*that.Uint16 = *this.Uint16
	}
	if this.Uint32 == nil {
		that.Uint32 = nil
	} else {
		that.Uint32 = new(uint32)
		*that.Uint32 = *this.Uint32
	}
	if this.Uint64 == nil {
		that.Uint64 = nil
	} else {
		that.Uint64 = new(uint64)
		*that.Uint64 = *this.Uint64
	}
	if this.Uint8 == nil {
		that.Uint8 = nil
	} else {
		that.Uint8 = new(uint8)
		*that.Uint8 = *this.Uint8
	}
	if this.UintPtr == nil {
		that.UintPtr = nil
	} else {
		that.UintPtr = new(uintptr)
		*that.UintPtr = *this.UintPtr
	}
}

func deriveCopyToPtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) {
	if this.Bool == nil {
		that.Bool = nil
	} else {
		if that.Bool != nil {
			if len(this.Bool) > len(that.Bool) {
				if cap(that.Bool) >= len(this.Bool) {
					that.Bool = (that.Bool)[:len(this.Bool)]
				} else {
					that.Bool = make([]bool, len(this.Bool))
				}
			} else if len(this.Bool) < len(that.Bool) {
				that.Bool = (that.Bool)[:len(this.Bool)]
			}
		} else {
			that.Bool = make([]bool, len(this.Bool))
		}
		copy(that.Bool, this.Bool)
	}
	if this.Byte == nil {
		that.Byte = nil
	} else {
		if that.Byte != nil {
			if len(this.Byte) > len(that.Byte) {
				if cap(that.Byte) >= len(this.Byte) {
					that.Byte = (that.Byte)[:len(this.Byte)]
				} else {
					that.Byte = make([]byte, len(this.Byte))
				}
			} else if len(this.Byte) < len(that.Byte) {
				that.Byte = (that.Byte)[:len(this.Byte)]
			}
		} else {
			that.Byte = make([]byte, len(this.Byte))
		}
		copy(that.Byte, this.Byte)
	}
	if this.Complex128 == nil {
		that.Complex128 = nil
	} else {
		if that.Complex128 != nil {
			if len(this.Complex128) > len(that.Complex128) {
				if cap(that.Complex128) >= len(this.Complex128) {
					that.Complex128 = (that.Complex128)[:len(this.Complex128)]
				} else {
					that.Complex128 = make([]complex128, len(this.Complex128))
				}
			} else if len(this.Complex128) < len(that.Complex128) {
				that.Complex128 = (that.Complex128)[:len(this.Complex128)]
			}
		} else {
			that.Complex128 = make([]complex128, len(this.Complex128))
		}
		copy(that.Complex128, this.Complex128)
	}
	if this.Complex64 == nil {
		that.Complex64 = nil
	} else {
		if that.Complex64 != nil {
			if len(this.Complex64) > len(that.Complex64) {
				if cap(that.Complex64) >= len(this.Complex64) {
					that.Complex64 = (that.Complex64)[:len(this.Complex64)]
				} else {
					that.Complex64 = make([]complex64, len(this.Complex64))
				}
			} else if len(this.Complex64) < len(that.Complex64) {
				that.Complex64 = (that.Complex64)[:len(this.Complex64)]
			}
		} else {
			that.Complex64 = make([]complex64, len(this.Complex64))
		}
		copy(that.Complex64, this.Complex64)
	}
	if this.Float64 == nil {
		that.Float64 = nil
	} else {
		if that.Float64 != nil {
			if len(this.Float64) > len(that.Float64) {
				if cap(that.Float64) >= len(this.Float64) {
					that.Float64 = (that.Float64)[:len(this.Float64)]
				} else {
					that.Float64 = make([]float64, len(this.Float64))
				}
			} else if len(this.Float64) < len(that.Float64) {
				that.Float64 = (that.Float64)[:len(this.Float64)]
			}
		} else {
			that.Float64 = make([]float64, len(this.Float64))
		}
		copy(that.Float64, this.Float64)
	}
	if this.Float32 == nil {
		that.Float32 = nil
	} else {
		if that.Float32 != nil {
			if len(this.Float32) > len(that.Float32) {
				if cap(that.Float32) >= len(this.Float32) {
					that.Float32 = (that.Float32)[:len(this.Float32)]
				} else {
					that.Float32 = make([]float32, len(this.Float32))
				}
			} else if len(this.Float32) < len(that.Float32) {
				that.Float32 = (that.Float32)[:len(this.Float32)]
			}
		} else {
			that.Float32 = make([]float32, len(this.Float32))
		}
		copy(that.Float32, this.Float32)
	}
	if this.Int == nil {
		that.Int = nil
	} else {
		if that.Int != nil {
			if len(this.Int) > len(that.Int) {
				if cap(that.Int) >= len(this.Int) {
					that.Int = (that.Int)[:len(this.Int)]
				} else {
					that.Int = make([]int, len(this.Int))
				}
			} else if len(this.Int) < len(that.Int) {
				that.Int = (that.Int)[:len(this.Int)]
			}
		} else {
			that.Int = make([]int, len(this.Int))
		}
		copy(that.Int, this.Int)
	}
	if this.Int16 == nil {
		that.Int16 = nil
	} else {
		if that.Int16 != nil {
			if len(this.Int16) > len(that.Int16) {
				if cap(that.Int16) >= len(this.Int16) {
					that.Int16 = (that.Int16)[:len(this.Int16)]
				} else {
					that.Int16 = make([]int16, len(this.Int16))
				}
			} else if len(this.Int16) < len(that.Int16) {
				that.Int16 = (that.Int16)[:len(this.Int16)]
			}
		} else {
			that.Int16 = make([]int16, len(this.Int16))
		}
		copy(that.Int16, this.Int16)
	}
	if this.Int32 == nil {
		that.Int32 = nil
	} else {
		if that.Int32 != nil {
			if len(this.Int32) > len(that.Int32) {
				if cap(that.Int32) >= len(this.Int32) {
					that.Int32 = (that.Int32)[:len(this.Int32)]
				} else {
					that.Int32 = make([]int32, len(this.Int32))
				}
			} else if len(this.Int32) < len(that.Int32) {
				that.Int32 = (that.Int32)[:len(this.Int32)]
			}
		} else {
			that.Int32 = make([]int32, len(this.Int32))
		}
		copy(that.Int32, this.Int32)
	}
	if this.Int64 == nil {
		that.Int64 = nil
	} else {
		if that.Int64 != nil {
			if len(this.Int64) > len(that.Int64) {
				if cap(that.Int64) >= len(this.Int64) {
					that.Int64 = (that.Int64)[:len(this.Int64)]
				} else {
					that.Int64 = make([]int64, len(this.Int64))
				}
			} else if len(this.Int64) < len(that.Int64) {
				that.Int64 = (that.Int64)[:len(this.Int64)]
			}
		} else {
			that.Int64 = make([]int64, len(this.Int64))
		}
		copy(that.Int64, this.Int64)
	}
	if this.Int8 == nil {
		that.Int8 = nil
	} else {
		if that.Int8 != nil {
			if len(this.Int8) > len(that.Int8) {
				if cap(that.Int8) >= len(this.Int8) {
					that.Int8 = (that.Int8)[:len(this.Int8)]
				} else {
					that.Int8 = make([]int8, len(this.Int8))
				}
			} else if len(this.Int8) < len(that.Int8) {
				that.Int8 = (that.Int8)[:len(this.Int8)]
			}
		} else {
			that.Int8 = make([]int8, len(this.Int8))
		}
		copy(that.Int8, this.Int8)
	}
	if this.Rune == nil {
		that.Rune = nil
	} else {
		if that.Rune != nil {
			if len(this.Rune) > len(that.Rune) {
				if cap(that.Rune) >= len(this.Rune) {
					that.Rune = (that.Rune)[:len(this.Rune)]
				} else {
					that.Rune = make([]rune, len(this.Rune))
				}
			} else if len(this.Rune) < len(that.Rune) {
				that.Rune = (that.Rune)[:len(this.Rune)]
			}
		} else {
			that.Rune = make([]rune, len(this.Rune))
		}
		copy(that.Rune, this.Rune)
	}
	if this.String == nil {
		that.String = nil
	} else {
		if that.String != nil {
			if len(this.String) > len(that.String) {
				if cap(that.String) >= len(this.String) {
					that.String = (that.String)[:len(this.String)]
				} else {
					that.String = make([]string, len(this.String))
				}
			} else if len(this.String) < len(that.String) {
				that.String = (that.String)[:len(this.String)]
			}
		} else {
			that.String = make([]string, len(this.String))
		}
		copy(that.String, this.String)
	}
	if this.Uint == nil {
		that.Uint = nil
	} else {
		if that.Uint != nil {
			if len(this.Uint) > len(that.Uint) {
				if cap(that.Uint) >= len(this.Uint) {
					that.Uint = (that.Uint)[:len(this.Uint)]
				} else {
					that.Uint = make([]uint, len(this.Uint))
				}
			} else if len(this.Uint) < len(that.Uint) {
				that.Uint = (that.Uint)[:len(this.Uint)]
			}
		} else {
			that.Uint = make([]uint, len(this.Uint))
		}
		copy(that.Uint, this.Uint)
	}
	if this.Uint16 == nil {
		that.Uint16 = nil
	} else {
		if that.Uint16 != nil {
			if len(this.Uint16) > len(that.Uint16) {
				if cap(that.Uint16) >= len(this.Uint16) {
					that.Uint16 = (that.Uint16)[:len(this.Uint16)]
				} else {
					that.Uint16 = make([]uint16, len(this.Uint16))
				}
			} else if len(this.Uint16) < len(that.Uint16) {
				that.Uint16 = (that.Uint16)[:len(this.Uint16)]
			}
		} else {
			that.Uint16 = make([]uint16, len(this.Uint16))
		}
		copy(that.Uint16, this.Uint16)
	}
	if this.Uint32 == nil {
		that.Uint32 = nil
	} else {
		if that.Uint32 != nil {
			if len(this.Uint32) > len(that.Uint32) {
				if cap(that.Uint32) >= len(this.Uint32) {
					that.Uint32 = (that.Uint32)[:len(this.Uint32)]
				} else {
					that.Uint32 = make([]uint32, len(this.Uint32))
				}
			} else if len(this.Uint32) < len(that.Uint32) {
				that.Uint32 = (that.Uint32)[:len(this.Uint32)]
			}
		} else {
			that.Uint32 = make([]uint32, len(this.Uint32))
		}
		copy(that.Uint32, this.Uint32)
	}
	if this.Uint64 == nil {
		that.Uint64 = nil
	} else {
		if that.Uint64 != nil {
			if len(this.Uint64) > len(that.Uint64) {
				if cap(that.Uint64) >= len(this.Uint64) {
					that.Uint64 = (that.Uint64)[:len(this.Uint64)]
				} else {
					that.Uint64 = make([]uint64, len(this.Uint64))
				}
			} else if len(this.Uint64) < len(that.Uint64) {
				that.Uint64 = (that.Uint64)[:len(this.Uint64)]
			}
		} else {
			that.Uint64 = make([]uint64, len(this.Uint64))
		}
		copy(that.Uint64, this.Uint64)
	}
	if this.Uint8 == nil {
		that.Uint8 = nil
	} else {
		if that.Uint8 != nil {
			if len(this.Uint8) > len(that.Uint8) {
				if cap(that.Uint8) >= len(this.Uint8) {
					that.Uint8 = (that.Uint8)[:len(this.Uint8)]
				} else {
					that.Uint8 = make([]uint8, len(this.Uint8))
				}
			} else if len(this.Uint8) < len(that.Uint8) {
				that.Uint8 = (that.Uint8)[:len(this.Uint8)]
			}
		} else {
			that.Uint8 = make([]uint8, len(this.Uint8))
		}
		copy(that.Uint8, this.Uint8)
	}
	if this.UintPtr == nil {
		that.UintPtr = nil
	} else {
		if that.UintPtr != nil {
			if len(this.UintPtr) > len(that.UintPtr) {
				if cap(that.UintPtr) >= len(this.UintPtr) {
					that.UintPtr = (that.UintPtr)[:len(this.UintPtr)]
				} else {
					that.UintPtr = make([]uintptr, len(this.UintPtr))
				}
			} else if len(this.UintPtr) < len(that.UintPtr) {
				that.UintPtr = (that.UintPtr)[:len(this.UintPtr)]
			}
		} else {
			that.UintPtr = make([]uintptr, len(this.UintPtr))
		}
		copy(that.UintPtr, this.UintPtr)
	}
}

func deriveCopyToPtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) {
	if this.Bool == nil {
		that.Bool = nil
	} else {
		if that.Bool != nil {
			if len(this.Bool) > len(that.Bool) {
				if cap(that.Bool) >= len(this.Bool) {
					that.Bool = (that.Bool)[:len(this.Bool)]
				} else {
					that.Bool = make([]*bool, len(this.Bool))
				}
			} else if len(this.Bool) < len(that.Bool) {
				that.Bool = (that.Bool)[:len(this.Bool)]
			}
		} else {
			that.Bool = make([]*bool, len(this.Bool))
		}
		deriveCopyTo(this.Bool, that.Bool)
	}
	if this.Byte == nil {
		that.Byte = nil
	} else {
		if that.Byte != nil {
			if len(this.Byte) > len(that.Byte) {
				if cap(that.Byte) >= len(this.Byte) {
					that.Byte = (that.Byte)[:len(this.Byte)]
				} else {
					that.Byte = make([]*byte, len(this.Byte))
				}
			} else if len(this.Byte) < len(that.Byte) {
				that.Byte = (that.Byte)[:len(this.Byte)]
			}
		} else {
			that.Byte = make([]*byte, len(this.Byte))
		}
		deriveCopyTo_(this.Byte, that.Byte)
	}
	if this.Complex128 == nil {
		that.Complex128 = nil
	} else {
		if that.Complex128 != nil {
			if len(this.Complex128) > len(that.Complex128) {
				if cap(that.Complex128) >= len(this.Complex128) {
					that.Complex128 = (that.Complex128)[:len(this.Complex128)]
				} else {
					that.Complex128 = make([]*complex128, len(this.Complex128))
				}
			} else if len(this.Complex128) < len(that.Complex128) {
				that.Complex128 = (that.Complex128)[:len(this.Complex128)]
			}
		} else {
			that.Complex128 = make([]*complex128, len(this.Complex128))
		}
		deriveCopyTo_1(this.Complex128, that.Complex128)
	}
	if this.Complex64 == nil {
		that.Complex64 = nil
	} else {
		if that.Complex64 != nil {
			if len(this.Complex64) > len(that.Complex64) {
				if cap(that.Complex64) >= len(this.Complex64) {
					that.Complex64 = (that.Complex64)[:len(this.Complex64)]
				} else {
					that.Complex64 = make([]*complex64, len(this.Complex64))
				}
			} else if len(this.Complex64) < len(that.Complex64) {
				that.Complex64 = (that.Complex64)[:len(this.Complex64)]
			}
		} else {
			that.Complex64 = make([]*complex64, len(this.Complex64))
		}
		deriveCopyTo_2(this.Complex64, that.Complex64)
	}
	if this.Float64 == nil {
		that.Float64 = nil
	} else {
		if that.Float64 != nil {
			if len(this.Float64) > len(that.Float64) {
				if cap(that.Float64) >= len(this.Float64) {
					that.Float64 = (that.Float64)[:len(this.Float64)]
				} else {
					that.Float64 = make([]*float64, len(this.Float64))
				}
			} else if len(this.Float64) < len(that.Float64) {
				that.Float64 = (that.Float64)[:len(this.Float64)]
			}
		} else {
			that.Float64 = make([]*float64, len(this.Float64))
		}
		deriveCopyTo_3(this.Float64, that.Float64)
	}
	if this.Float32 == nil {
		that.Float32 = nil
	} else {
		if that.Float32 != nil {
			if len(this.Float32) > len(that.Float32) {
				if cap(that.Float32) >= len(this.Float32) {
					that.Float32 = (that.Float32)[:len(this.Float32)]
				} else {
					that.Float32 = make([]*float32, len(this.Float32))
				}
			} else if len(this.Float32) < len(that.Float32) {
				that.Float32 = (that.Float32)[:len(this.Float32)]
			}
		} else {
			that.Float32 = make([]*float32, len(this.Float32))
		}
		deriveCopyTo_4(this.Float32, that.Float32)
	}
	if this.Int == nil {
		that.Int = nil
	} else {
		if that.Int != nil {
			if len(this.Int) > len(that.Int) {
				if cap(that.Int) >= len(this.Int) {
					that.Int = (that.Int)[:len(this.Int)]
				} else {
					that.Int = make([]*int, len(this.Int))
				}
			} else if len(this.Int) < len(that.Int) {
				that.Int = (that.Int)[:len(this.Int)]
			}
		} else {
			that.Int = make([]*int, len(this.Int))
		}
		deriveCopyTo_5(this.Int, that.Int)
	}
	if this.Int16 == nil {
		that.Int16 = nil
	} else {
		if that.Int16 != nil {
			if len(this.Int16) > len(that.Int16) {
				if cap(that.Int16) >= len(this.Int16) {
					that.Int16 = (that.Int16)[:len(this.Int16)]
				} else {
					that.Int16 = make([]*int16, len(this.Int16))
				}
			} else if len(this.Int16) < len(that.Int16) {
				that.Int16 = (that.Int16)[:len(this.Int16)]
			}
		} else {
			that.Int16 = make([]*int16, len(this.Int16))
		}
		deriveCopyTo_6(this.Int16, that.Int16)
	}
	if this.Int32 == nil {
		that.Int32 = nil
	} else {
		if that.Int32 != nil {
			if len(this.Int32) > len(that.Int32) {
				if cap(that.Int32) >= len(this.Int32) {
					that.Int32 = (that.Int32)[:len(this.Int32)]
				} else {
					that.Int32 = make([]*int32, len(this.Int32))
				}
			} else if len(this.Int32) < len(that.Int32) {
				that.Int32 = (that.Int32)[:len(this.Int32)]
			}
		} else {
			that.Int32 = make([]*int32, len(this.Int32))
		}
		deriveCopyTo_7(this.Int32, that.Int32)
	}
	if this.Int64 == nil {
		that.Int64 = nil
	} else {
		if that.Int64 != nil {
			if len(this.Int64) > len(that.Int64) {
				if cap(that.Int64) >= len(this.Int64) {
					that.Int64 = (that.Int64)[:len(this.Int64)]
				} else {
					that.Int64 = make([]*int64, len(this.Int64))
				}
			} else if len(this.Int64) < len(that.Int64) {
				that.Int64 = (that.Int64)[:len(this.Int64)]
			}
		} else {
			that.Int64 = make([]*int64, len(this.Int64))
		}
		deriveCopyTo_8(this.Int64, that.Int64)
	}
	if this.Int8 == nil {
		that.Int8 = nil
	} else {
		if that.Int8 != nil {
			if len(this.Int8) > len(that.Int8) {
				if cap(that.Int8) >= len(this.Int8) {
					that.Int8 = (that.Int8)[:len(this.Int8)]
				} else {
					that.Int8 = make([]*int8, len(this.Int8))
				}
			} else if len(this.Int8) < len(that.Int8) {
				that.Int8 = (that.Int8)[:len(this.Int8)]
			}
		} else {
			that.Int8 = make([]*int8, len(this.Int8))
		}
		deriveCopyTo_9(this.Int8, that.Int8)
	}
	if this.Rune == nil {
		that.Rune = nil
	} else {
		if that.Rune != nil {
			if len(this.Rune) > len(that.Rune) {
				if cap(that.Rune) >= len(this.Rune) {
					that.Rune = (that.Rune)[:len(this.Rune)]
				} else {
					that.Rune = make([]*rune, len(this.Rune))
				}
			} else if len(this.Rune) < len(that.Rune) {
				that.Rune = (that.Rune)[:len(this.Rune)]
			}
		} else {
			that.Rune = make([]*rune, len(this.Rune))
		}
		deriveCopyTo_7(this.Rune, that.Rune)
	}
	if this.String == nil {
		that.String = nil
	} else {
		if that.String != nil {
			if len(this.String) > len(that.String) {
				if cap(that.String) >= len(this.String) {
					that.String = (that.String)[:len(this.String)]
				} else {
					that.String = make([]*string, len(this.String))
				}
			} else if len(this.String) < len(that.String) {
				that.String = (that.String)[:len(this.String)]
			}
		} else {
			that.String = make([]*string, len(this.String))
		}
		deriveCopyTo_10(this.String, that.String)
	}
	if this.Uint == nil {
		that.Uint = nil
	} else {
		if that.Uint != nil {
			if len(this.Uint) > len(that.Uint) {
				if cap(that.Uint) >= len(this.Uint) {
					that.Uint = (that.Uint)[:len(this.Uint)]
				} else {
					that.Uint = make([]*uint, len(this.Uint))
				}
			} else if len(this.Uint) < len(that.Uint) {
				that.Uint = (that.Uint)[:len(this.Uint)]
			}
		} else {
			that.Uint = make([]*uint, len(this.Uint))
		}
		deriveCopyTo_11(this.Uint, that.Uint)
	}
	if this.Uint16 == nil {
		that.Uint16 = nil
	} else {
		if that.Uint16 != nil {
			if len(this.Uint16) > len(that.Uint16) {
				if cap(that.Uint16) >= len(this.Uint16) {
					that.Uint16 = (that.Uint16)[:len(this.Uint16)]
				} else {
					that.Uint16 = make([]*uint16, len(this.Uint16))
				}
			} else if len(this.Uint16) < len(that.Uint16) {
				that.Uint16 = (that.Uint16)[:len(this.Uint16)]
			}
		} else {
			that.Uint16 = make([]*uint16, len(this.Uint16))
		}
		deriveCopyTo_12(this.Uint16, that.Uint16)
	}
	if this.Uint32 == nil {
		that.Uint32 = nil
	} else {
		if that.Uint32 != nil {
			if len(this.Uint32) > len(that.Uint32) {
				if cap(that.Uint32) >= len(this.Uint32) {
					that.Uint32 = (that.Uint32)[:len(this.Uint32)]
				} else {
					that.Uint32 = make([]*uint32, len(this.Uint32))
				}
			} else if len(this.Uint32) < len(that.Uint32) {
				that.Uint32 = (that.Uint32)[:len(this.Uint32)]
			}
		} else {
			that.Uint32 = make([]*uint32, len(this.Uint32))
		}
		deriveCopyTo_13(this.Uint32, that.Uint32)
	}
	if this.Uint64 == nil {
		that.Uint64 = nil
	} else {
		if that.Uint64 != nil {
			if len(this.Uint64) > len(that.Uint64) {
				if cap(that.Uint64) >= len(this.Uint64) {
					that.Uint64 = (that.Uint64)[:len(this.Uint64)]
				} else {
					that.Uint64 = make([]*uint64, len(this.Uint64))
				}
			} else if len(this.Uint64) < len(that.Uint64) {
				that.Uint64 = (that.Uint64)[:len(this.Uint64)]
			}
		} else {
			that.Uint64 = make([]*uint64, len(this.Uint64))
		}
		deriveCopyTo_14(this.Uint64, that.Uint64)
	}
	if this.Uint8 == nil {
		that.Uint8 = nil
	} else {
		if that.Uint8 != nil {
			if len(this.Uint8) > len(that.Uint8) {
				if cap(that.Uint8) >= len(this.Uint8) {
					that.Uint8 = (that.Uint8)[:len(this.Uint8)]
				} else {
					that.Uint8 = make([]*uint8, len(this.Uint8))
				}
			} else if len(this.Uint8) < len(that.Uint8) {
				that.Uint8 = (that.Uint8)[:len(this.Uint8)]
			}
		} else {
			that.Uint8 = make([]*uint8, len(this.Uint8))
		}
		deriveCopyTo_(this.Uint8, that.Uint8)
	}
	if this.UintPtr == nil {
		that.UintPtr = nil
	} else {
		if that.UintPtr != nil {
			if len(this.UintPtr) > len(that.UintPtr) {
				if cap(that.UintPtr) >= len(this.UintPtr) {
					that.UintPtr = (that.UintPtr)[:len(this.UintPtr)]
				} else {
					that.UintPtr = make([]*uintptr, len(this.UintPtr))
				}
			} else if len(this.UintPtr) < len(that.UintPtr) {
				that.UintPtr = (that.UintPtr)[:len(this.UintPtr)]
			}
		} else {
			that.UintPtr = make([]*uintptr, len(this.UintPtr))
		}
		deriveCopyTo_15(this.UintPtr, that.UintPtr)
	}
}

func deriveCopyToPtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) {
	that.Bool = this.Bool
	that.Byte = this.Byte
	that.Complex128 = this.Complex128
	that.Complex64 = this.Complex64
	that.Float64 = this.Float64
	that.Float32 = this.Float32
	that.Int = this.Int
	that.Int16 = this.Int16
	that.Int32 = this.Int32
	that.Int64 = this.Int64
	that.Int8 = this.Int8
	that.Rune = this.Rune
	that.String = this.String
	that.Uint = this.Uint
	that.Uint16 = this.Uint16
	that.Uint32 = this.Uint32
	that.Uint64 = this.Uint64
	that.Uint8 = this.Uint8
	that.UintPtr = this.UintPtr
	that.AnotherBoolOfDifferentSize = this.AnotherBoolOfDifferentSize
}

func deriveCopyToPtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) {
	for this_i, this_value := range this.Bool {
		if this_value == nil {
			that.Bool[this_i] = nil
		} else {
			that.Bool[this_i] = new(bool)
			*that.Bool[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Byte {
		if this_value == nil {
			that.Byte[this_i] = nil
		} else {
			that.Byte[this_i] = new(byte)
			*that.Byte[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Complex128 {
		if this_value == nil {
			that.Complex128[this_i] = nil
		} else {
			that.Complex128[this_i] = new(complex128)
			*that.Complex128[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Complex64 {
		if this_value == nil {
			that.Complex64[this_i] = nil
		} else {
			that.Complex64[this_i] = new(complex64)
			*that.Complex64[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Float64 {
		if this_value == nil {
			that.Float64[this_i] = nil
		} else {
			that.Float64[this_i] = new(float64)
			*that.Float64[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Float32 {
		if this_value == nil {
			that.Float32[this_i] = nil
		} else {
			that.Float32[this_i] = new(float32)
			*that.Float32[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Int {
		if this_value == nil {
			that.Int[this_i] = nil
		} else {
			that.Int[this_i] = new(int)
			*that.Int[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Int16 {
		if this_value == nil {
			that.Int16[this_i] = nil
		} else {
			that.Int16[this_i] = new(int16)
			*that.Int16[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Int32 {
		if this_value == nil {
			that.Int32[this_i] = nil
		} else {
			that.Int32[this_i] = new(int32)
			*that.Int32[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Int64 {
		if this_value == nil {
			that.Int64[this_i] = nil
		} else {
			that.Int64[this_i] = new(int64)
			*that.Int64[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Int8 {
		if this_value == nil {
			that.Int8[this_i] = nil
		} else {
			that.Int8[this_i] = new(int8)
			*that.Int8[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Rune {
		if this_value == nil {
			that.Rune[this_i] = nil
		} else {
			that.Rune[this_i] = new(rune)
			*that.Rune[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.String {
		if this_value == nil {
			that.String[this_i] = nil
		} else {
			that.String[this_i] = new(string)
			*that.String[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Uint {
		if this_value == nil {
			that.Uint[this_i] = nil
		} else {
			that.Uint[this_i] = new(uint)
			*that.Uint[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Uint16 {
		if this_value == nil {
			that.Uint16[this_i] = nil
		} else {
			that.Uint16[this_i] = new(uint16)
			*that.Uint16[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Uint32 {
		if this_value == nil {
			that.Uint32[this_i] = nil
		} else {
			that.Uint32[this_i] = new(uint32)
			*that.Uint32[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Uint64 {
		if this_value == nil {
			that.Uint64[this_i] = nil
		} else {
			that.Uint64[this_i] = new(uint64)
			*that.Uint64[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.Uint8 {
		if this_value == nil {
			that.Uint8[this_i] = nil
		} else {
			that.Uint8[this_i] = new(uint8)
			*that.Uint8[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.UintPtr {
		if this_value == nil {
			that.UintPtr[this_i] = nil
		} else {
			that.UintPtr[this_i] = new(uintptr)
			*that.UintPtr[this_i] = *this_value
		}
	}
	for this_i, this_value := range this.AnotherBoolOfDifferentSize {
		if this_value == nil {
			that.AnotherBoolOfDifferentSize[this_i] = nil
		} else {
			that.AnotherBoolOfDifferentSize[this_i] = new(bool)
			*that.AnotherBoolOfDifferentSize[this_i] = *this_value
		}
	}
}

func deriveCopyToPtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) {
	if this.StringToUint32 != nil {
		that.StringToUint32 = make(map[string]uint32, len(this.StringToUint32))
		deriveCopyTo_16(this.StringToUint32, that.StringToUint32)
	} else {
		that.StringToUint32 = nil
	}
	if this.Uint64ToInt64 != nil {
		that.Uint64ToInt64 = make(map[uint8]int64, len(this.Uint64ToInt64))
		deriveCopyTo_17(this.Uint64ToInt64, that.Uint64ToInt64)
	} else {
		that.Uint64ToInt64 = nil
	}
}

func deriveCopyToPtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) {
	if this.BoolToString != nil {
		that.BoolToString = make(map[bool]string, len(this.BoolToString))
		deriveCopyTo_18(this.BoolToString, that.BoolToString)
	} else {
		that.BoolToString = nil
	}
	if this.StringToBool != nil {
		that.StringToBool = make(map[string]bool, len(this.StringToBool))
		deriveCopyTo_19(this.StringToBool, that.StringToBool)
	} else {
		that.StringToBool = nil
	}
	if this.Complex128ToComplex64 != nil {
		that.Complex128ToComplex64 = make(map[complex128]complex64, len(this.Complex128ToComplex64))
		deriveCopyTo_20(this.Complex128ToComplex64, that.Complex128ToComplex64)
	} else {
		that.Complex128ToComplex64 = nil
	}
	if this.Float64ToUint32 != nil {
		that.Float64ToUint32 = make(map[float64]uint32, len(this.Float64ToUint32))
		deriveCopyTo_21(this.Float64ToUint32, that.Float64ToUint32)
	} else {
		that.Float64ToUint32 = nil
	}
	if this.Uint16ToUint8 != nil {
		that.Uint16ToUint8 = make(map[uint16]uint8, len(this.Uint16ToUint8))
		deriveCopyTo_22(this.Uint16ToUint8, that.Uint16ToUint8)
	} else {
		that.Uint16ToUint8 = nil
	}
}

func deriveCopyToPtrToSliceToSlice(this, that *SliceToSlice) {
	if this.Ints == nil {
		that.Ints = nil
	} else {
		if that.Ints != nil {
			if len(this.Ints) > len(that.Ints) {
				if cap(that.Ints) >= len(this.Ints) {
					that.Ints = (that.Ints)[:len(this.Ints)]
				} else {
					that.Ints = make([][]int, len(this.Ints))
				}
			} else if len(this.Ints) < len(that.Ints) {
				that.Ints = (that.Ints)[:len(this.Ints)]
			}
		} else {
			that.Ints = make([][]int, len(this.Ints))
		}
		deriveCopyTo_23(this.Ints, that.Ints)
	}
	if this.Strings == nil {
		that.Strings = nil
	} else {
		if that.Strings != nil {
			if len(this.Strings) > len(that.Strings) {
				if cap(that.Strings) >= len(this.Strings) {
					that.Strings = (that.Strings)[:len(this.Strings)]
				} else {
					that.Strings = make([][]string, len(this.Strings))
				}
			} else if len(this.Strings) < len(that.Strings) {
				that.Strings = (that.Strings)[:len(this.Strings)]
			}
		} else {
			that.Strings = make([][]string, len(this.Strings))
		}
		deriveCopyTo_24(this.Strings, that.Strings)
	}
	if this.IntPtrs == nil {
		that.IntPtrs = nil
	} else {
		if that.IntPtrs != nil {
			if len(this.IntPtrs) > len(that.IntPtrs) {
				if cap(that.IntPtrs) >= len(this.IntPtrs) {
					that.IntPtrs = (that.IntPtrs)[:len(this.IntPtrs)]
				} else {
					that.IntPtrs = make([][]*int, len(this.IntPtrs))
				}
			} else if len(this.IntPtrs) < len(that.IntPtrs) {
				that.IntPtrs = (that.IntPtrs)[:len(this.IntPtrs)]
			}
		} else {
			that.IntPtrs = make([][]*int, len(this.IntPtrs))
		}
		deriveCopyTo_25(this.IntPtrs, that.IntPtrs)
	}
}

func deriveCopyToPtrToPtrTo(this, that *PtrTo) {
	if this.Basic == nil {
		that.Basic = nil
	} else {
		that.Basic = new(int)
		*that.Basic = *this.Basic
	}
	if this.Slice == nil {
		that.Slice = nil
	} else {
		that.Slice = new([]int)
		deriveCopyTo_26(this.Slice, that.Slice)
	}
	if this.Array == nil {
		that.Array = nil
	} else {
		that.Array = new([4]int)
		*that.Array = *this.Array
	}
	if this.Map == nil {
		that.Map = nil
	} else {
		that.Map = new(map[int]int)
		deriveCopyTo_27(this.Map, that.Map)
	}
}

func deriveCopyToPtrToName(this, that *Name) {
	that.Name = this.Name
}

func deriveCopyToPtrToStructs(this, that *Structs) {
	that.Struct = this.Struct
	if this.PtrToStruct == nil {
		that.PtrToStruct = nil
	} else {
		that.PtrToStruct = new(Name)
		this.PtrToStruct.CopyTo(that.PtrToStruct)
	}
	if this.SliceOfStructs == nil {
		that.SliceOfStructs = nil
	} else {
		if that.SliceOfStructs != nil {
			if len(this.SliceOfStructs) > len(that.SliceOfStructs) {
				if cap(that.SliceOfStructs) >= len(this.SliceOfStructs) {
					that.SliceOfStructs = (that.SliceOfStructs)[:len(this.SliceOfStructs)]
				} else {
					that.SliceOfStructs = make([]Name, len(this.SliceOfStructs))
				}
			} else if len(this.SliceOfStructs) < len(that.SliceOfStructs) {
				that.SliceOfStructs = (that.SliceOfStructs)[:len(this.SliceOfStructs)]
			}
		} else {
			that.SliceOfStructs = make([]Name, len(this.SliceOfStructs))
		}
		copy(that.SliceOfStructs, this.SliceOfStructs)
	}
	if this.SliceToPtrOfStruct == nil {
		that.SliceToPtrOfStruct = nil
	} else {
		if that.SliceToPtrOfStruct != nil {
			if len(this.SliceToPtrOfStruct) > len(that.SliceToPtrOfStruct) {
				if cap(that.SliceToPtrOfStruct) >= len(this.SliceToPtrOfStruct) {
					that.SliceToPtrOfStruct = (that.SliceToPtrOfStruct)[:len(this.SliceToPtrOfStruct)]
				} else {
					that.SliceToPtrOfStruct = make([]*Name, len(this.SliceToPtrOfStruct))
				}
			} else if len(this.SliceToPtrOfStruct) < len(that.SliceToPtrOfStruct) {
				that.SliceToPtrOfStruct = (that.SliceToPtrOfStruct)[:len(this.SliceToPtrOfStruct)]
			}
		} else {
			that.SliceToPtrOfStruct = make([]*Name, len(this.SliceToPtrOfStruct))
		}
		deriveCopyTo_28(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct)
	}
}

func deriveCopyToPtrToMapWithStructs(this, that *MapWithStructs) {
	if this.NameToString != nil {
		that.NameToString = make(map[Name]string, len(this.NameToString))
		deriveCopyTo_29(this.NameToString, that.NameToString)
	} else {
		that.NameToString = nil
	}
	if this.StringToName != nil {
		that.StringToName = make(map[string]Name, len(this.StringToName))
		deriveCopyTo_30(this.StringToName, that.StringToName)
	} else {
		that.StringToName = nil
	}
	if this.StringToPtrToName != nil {
		that.StringToPtrToName = make(map[string]*Name, len(this.StringToPtrToName))
		deriveCopyTo_31(this.StringToPtrToName, that.StringToPtrToName)
	} else {
		that.StringToPtrToName = nil
	}
	if this.StringToSliceOfName != nil {
		that.StringToSliceOfName = make(map[string][]Name, len(this.StringToSliceOfName))
		deriveCopyTo_32(this.StringToSliceOfName, that.StringToSliceOfName)
	} else {
		that.StringToSliceOfName = nil
	}
	if this.StringToSliceOfPtrToName != nil {
		that.StringToSliceOfPtrToName = make(map[string][]*Name, len(this.StringToSliceOfPtrToName))
		deriveCopyTo_33(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName)
	} else {
		that.StringToSliceOfPtrToName = nil
	}
}

func deriveCopyToPtrToRecursiveType(this, that *RecursiveType) {
	if this.Bytes == nil {
		that.Bytes = nil
	} else {
		if that.Bytes != nil {
			if len(this.Bytes) > len(that.Bytes) {
				if cap(that.Bytes) >= len(this.Bytes) {
					that.Bytes = (that.Bytes)[:len(this.Bytes)]
				} else {
					that.Bytes = make([]byte, len(this.Bytes))
				}
			} else if len(this.Bytes) < len(that.Bytes) {
				that.Bytes = (that.Bytes)[:len(this.Bytes)]
			}
		} else {
			that.Bytes = make([]byte, len(this.Bytes))
		}
		copy(that.Bytes, this.Bytes)
	}
	if this.N != nil {
		that.N = make(map[int]RecursiveType, len(this.N))
		deriveCopyTo_34(this.N, that.N)
	} else {
		that.N = nil
	}
}

func deriveCopyToPtrToEmbeddedStruct1(this, that *EmbeddedStruct1) {
	that.Name = this.Name
	if this.Structs == nil {
		that.Structs = nil
	} else {
		that.Structs = new(Structs)
		this.Structs.CopyTo(that.Structs)
	}
}

func deriveCopyToPtrToEmbeddedStruct2(this, that *EmbeddedStruct2) {
	field := new(Structs)
	this.Structs.CopyTo(field)
	that.Structs = *field
	if this.Name == nil {
		that.Name = nil
	} else {
		that.Name = new(Name)
		this.Name.CopyTo(that.Name)
	}
}

func deriveCopyToPtrToUnnamedStruct(this, that *UnnamedStruct) {
	that.Unnamed = this.Unnamed
}

func deriveCopyToPtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) {
	if this.A == nil {
		that.A = nil
	} else {
		that.A = new(StructWithoutEqualMethod)
		*that.A = *this.A
	}
	that.B = this.B
}

func deriveCopyToPtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) {
	if this.A == nil {
		that.A = nil
	} else {
		that.A = new(extra.StructWithoutEqualMethod)
		*that.A = *this.A
	}
	that.B = this.B
}

func deriveCopyToPtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) {
	if this.A == nil {
		that.A = nil
	} else {
		that.A = new(extra.PrivateFieldAndNoEqualMethod)
		deriveCopyTo_35(this.A, that.A)
	}
}

func deriveCopyToPtrToEnums(this, that *Enums) {
	that.Enum = this.Enum
	if this.PtrToEnum == nil {
		that.PtrToEnum = nil
	} else {
		that.PtrToEnum = new(MyEnum)
		*that.PtrToEnum = *this.PtrToEnum
	}
	if this.SliceToEnum == nil {
		that.SliceToEnum = nil
	} else {
		if that.SliceToEnum != nil {
			if len(this.SliceToEnum) > len(that.SliceToEnum) {
				if cap(that.SliceToEnum) >= len(this.SliceToEnum) {
					that.SliceToEnum = (that.SliceToEnum)[:len(this.SliceToEnum)]
				} else {
					that.SliceToEnum = make([]MyEnum, len(this.SliceToEnum))
				}
			} else if len(this.SliceToEnum) < len(that.SliceToEnum) {
				that.SliceToEnum = (that.SliceToEnum)[:len(this.SliceToEnum)]
			}
		} else {
			that.SliceToEnum = make([]MyEnum, len(this.SliceToEnum))
		}
		copy(that.SliceToEnum, this.SliceToEnum)
	}
	if this.SliceToPtrToEnum == nil {
		that.SliceToPtrToEnum = nil
	} else {
		if that.SliceToPtrToEnum != nil {
			if len(this.SliceToPtrToEnum) > len(that.SliceToPtrToEnum) {
				if cap(that.SliceToPtrToEnum) >= len(this.SliceToPtrToEnum) {
					that.SliceToPtrToEnum = (that.SliceToPtrToEnum)[:len(this.SliceToPtrToEnum)]
				} else {
					that.SliceToPtrToEnum = make([]*MyEnum, len(this.SliceToPtrToEnum))
				}
			} else if len(this.SliceToPtrToEnum) < len(that.SliceToPtrToEnum) {
				that.SliceToPtrToEnum = (that.SliceToPtrToEnum)[:len(this.SliceToPtrToEnum)]
			}
		} else {
			that.SliceToPtrToEnum = make([]*MyEnum, len(this.SliceToPtrToEnum))
		}
		deriveCopyTo_36(this.SliceToPtrToEnum, that.SliceToPtrToEnum)
	}
	if this.MapToEnum != nil {
		that.MapToEnum = make(map[int32]MyEnum, len(this.MapToEnum))
		deriveCopyTo_37(this.MapToEnum, that.MapToEnum)
	} else {
		that.MapToEnum = nil
	}
	if this.EnumToMap != nil {
		that.EnumToMap = make(map[MyEnum]int32, len(this.EnumToMap))
		deriveCopyTo_38(this.EnumToMap, that.EnumToMap)
	} else {
		that.EnumToMap = nil
	}
	that.ArrayEnum = this.ArrayEnum
}

func deriveCopyToPtrToNamedTypes(this, that *NamedTypes) {
	if this.Slice == nil {
		that.Slice = nil
	} else {
		if that.Slice != nil {
			if len(this.Slice) > len(that.Slice) {
				if cap(that.Slice) >= len(this.Slice) {
					that.Slice = (that.Slice)[:len(this.Slice)]
				} else {
					that.Slice = make([]int64, len(this.Slice))
				}
			} else if len(this.Slice) < len(that.Slice) {
				that.Slice = (that.Slice)[:len(this.Slice)]
			}
		} else {
			that.Slice = make([]int64, len(this.Slice))
		}
		copy(that.Slice, this.Slice)
	}
	if this.PtrToSlice == nil {
		that.PtrToSlice = nil
	} else {
		that.PtrToSlice = new(MySlice)
		deriveCopyTo_39(this.PtrToSlice, that.PtrToSlice)
	}
	if this.SliceToSlice == nil {
		that.SliceToSlice = nil
	} else {
		if that.SliceToSlice != nil {
			if len(this.SliceToSlice) > len(that.SliceToSlice) {
				if cap(that.SliceToSlice) >= len(this.SliceToSlice) {
					that.SliceToSlice = (that.SliceToSlice)[:len(this.SliceToSlice)]
				} else {
					that.SliceToSlice = make([]MySlice, len(this.SliceToSlice))
				}
			} else if len(this.SliceToSlice) < len(that.SliceToSlice) {
				that.SliceToSlice = (that.SliceToSlice)[:len(this.SliceToSlice)]
			}
		} else {
			that.SliceToSlice = make([]MySlice, len(this.SliceToSlice))
		}
		deriveCopyTo_40(this.SliceToSlice, that.SliceToSlice)
	}
}

func deriveCopyToPtrToDuration(this, that *Duration) {
	that.D = this.D
	if this.P == nil {
		that.P = nil
	} else {
		that.P = new(time.Duration)
		*that.P = *this.P
	}
	if this.Ds == nil {
		that.Ds = nil
	} else {
		if that.Ds != nil {
			if len(this.Ds) > len(that.Ds) {
				if cap(that.Ds) >= len(this.Ds) {
					that.Ds = (that.Ds)[:len(this.Ds)]
				} else {
					that.Ds = make([]time.Duration, len(this.Ds))
				}
			} else if len(this.Ds) < len(that.Ds) {
				that.Ds = (that.Ds)[:len(this.Ds)]
			}
		} else {
			that.Ds = make([]time.Duration, len(this.Ds))
		}
		copy(that.Ds, this.Ds)
	}
	if this.DPs == nil {
		that.DPs = nil
	} else {
		if that.DPs != nil {
			if len(this.DPs) > len(that.DPs) {
				if cap(that.DPs) >= len(this.DPs) {
					that.DPs = (that.DPs)[:len(this.DPs)]
				} else {
					that.DPs = make([]*time.Duration, len(this.DPs))
				}
			} else if len(this.DPs) < len(that.DPs) {
				that.DPs = (that.DPs)[:len(this.DPs)]
			}
		} else {
			that.DPs = make([]*time.Duration, len(this.DPs))
		}
		deriveCopyTo_41(this.DPs, that.DPs)
	}
	if this.MD != nil {
		that.MD = make(map[int]time.Duration, len(this.MD))
		deriveCopyTo_42(this.MD, that.MD)
	} else {
		that.MD = nil
	}
}

func deriveUnionSetOfInt64s(union, that map[int64]struct{}) map[int64]struct{} {
	for k, _ := range that {
		union[k] = struct{}{}
	}
	return union
}

func deriveUnionOfInt64s(union, that []int64) []int64 {
	for i, v := range that {
		if !deriveContainsInt64s(union, v) {
			union = append(union, that[i])
		}
	}
	return union
}

func deriveEqualPtrToEmpty(this, that *Empty) bool {
	return (this == nil && that == nil) || (this != nil) && (that != nil)
}

func deriveEqualPtrToBuiltInTypes(this, that *BuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr
}

func deriveEqualPtrToPrivateBuiltInTypes(this, that *PrivateBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.privateBool == that.privateBool &&
			this.privateByte == that.privateByte &&
			this.privateComplex128 == that.privateComplex128 &&
			this.privateComplex64 == that.privateComplex64 &&
			this.privateFloat64 == that.privateFloat64 &&
			this.privateFloat32 == that.privateFloat32 &&
			this.privateInt == that.privateInt &&
			this.privateInt16 == that.privateInt16 &&
			this.privateInt32 == that.privateInt32 &&
			this.privateInt64 == that.privateInt64 &&
			this.privateInt8 == that.privateInt8 &&
			this.privateRune == that.privateRune &&
			this.privateString == that.privateString &&
			this.privateUint == that.privateUint &&
			this.privateUint16 == that.privateUint16 &&
			this.privateUint32 == that.privateUint32 &&
			this.privateUint64 == that.privateUint64 &&
			this.privateUint8 == that.privateUint8 &&
			this.privateUintPtr == that.privateUintPtr
}

func deriveEqualPtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Bool == nil && that.Bool == nil) || (this.Bool != nil && that.Bool != nil && *(this.Bool) == *(that.Bool))) &&
			((this.Byte == nil && that.Byte == nil) || (this.Byte != nil && that.Byte != nil && *(this.Byte) == *(that.Byte))) &&
			((this.Complex128 == nil && that.Complex128 == nil) || (this.Complex128 != nil && that.Complex128 != nil && *(this.Complex128) == *(that.Complex128))) &&
			((this.Complex64 == nil && that.Complex64 == nil) || (this.Complex64 != nil && that.Complex64 != nil && *(this.Complex64) == *(that.Complex64))) &&
			((this.Float64 == nil && that.Float64 == nil) || (this.Float64 != nil && that.Float64 != nil && *(this.Float64) == *(that.Float64))) &&
			((this.Float32 == nil && that.Float32 == nil) || (this.Float32 != nil && that.Float32 != nil && *(this.Float32) == *(that.Float32))) &&
			((this.Int == nil && that.Int == nil) || (this.Int != nil && that.Int != nil && *(this.Int) == *(that.Int))) &&
			((this.Int16 == nil && that.Int16 == nil) || (this.Int16 != nil && that.Int16 != nil && *(this.Int16) == *(that.Int16))) &&
			((this.Int32 == nil && that.Int32 == nil) || (this.Int32 != nil && that.Int32 != nil && *(this.Int32) == *(that.Int32))) &&
			((this.Int64 == nil && that.Int64 == nil) || (this.Int64 != nil && that.Int64 != nil && *(this.Int64) == *(that.Int64))) &&
			((this.Int8 == nil && that.Int8 == nil) || (this.Int8 != nil && that.Int8 != nil && *(this.Int8) == *(that.Int8))) &&
			((this.Rune == nil && that.Rune == nil) || (this.Rune != nil && that.Rune != nil && *(this.Rune) == *(that.Rune))) &&
			((this.String == nil && that.String == nil) || (this.String != nil && that.String != nil && *(this.String) == *(that.String))) &&
			((this.Uint == nil && that.Uint == nil) || (this.Uint != nil && that.Uint != nil && *(this.Uint) == *(that.Uint))) &&
			((this.Uint16 == nil && that.Uint16 == nil) || (this.Uint16 != nil && that.Uint16 != nil && *(this.Uint16) == *(that.Uint16))) &&
			((this.Uint32 == nil && that.Uint32 == nil) || (this.Uint32 != nil && that.Uint32 != nil && *(this.Uint32) == *(that.Uint32))) &&
			((this.Uint64 == nil && that.Uint64 == nil) || (this.Uint64 != nil && that.Uint64 != nil && *(this.Uint64) == *(that.Uint64))) &&
			((this.Uint8 == nil && that.Uint8 == nil) || (this.Uint8 != nil && that.Uint8 != nil && *(this.Uint8) == *(that.Uint8))) &&
			((this.UintPtr == nil && that.UintPtr == nil) || (this.UintPtr != nil && that.UintPtr != nil && *(this.UintPtr) == *(that.UintPtr)))
}

func deriveEqualPtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual(this.Bool, that.Bool) &&
			bytes.Equal(this.Byte, that.Byte) &&
			deriveEqual_(this.Complex128, that.Complex128) &&
			deriveEqual_1(this.Complex64, that.Complex64) &&
			deriveEqual_2(this.Float64, that.Float64) &&
			deriveEqual_3(this.Float32, that.Float32) &&
			deriveEqualSliceOfint(this.Int, that.Int) &&
			deriveEqual_4(this.Int16, that.Int16) &&
			deriveEqual_5(this.Int32, that.Int32) &&
			deriveEqual_6(this.Int64, that.Int64) &&
			deriveEqual_7(this.Int8, that.Int8) &&
			deriveEqual_5(this.Rune, that.Rune) &&
			deriveEqual_8(this.String, that.String) &&
			deriveEqual_9(this.Uint, that.Uint) &&
			deriveEqual_10(this.Uint16, that.Uint16) &&
			deriveEqual_11(this.Uint32, that.Uint32) &&
			deriveEqual_12(this.Uint64, that.Uint64) &&
			bytes.Equal(this.Uint8, that.Uint8) &&
			deriveEqual_13(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_14(this.Bool, that.Bool) &&
			deriveEqual_15(this.Byte, that.Byte) &&
			deriveEqual_16(this.Complex128, that.Complex128) &&
			deriveEqual_17(this.Complex64, that.Complex64) &&
			deriveEqual_18(this.Float64, that.Float64) &&
			deriveEqual_19(this.Float32, that.Float32) &&
			deriveEqual_20(this.Int, that.Int) &&
			deriveEqual_21(this.Int16, that.Int16) &&
			deriveEqual_22(this.Int32, that.Int32) &&
			deriveEqual_23(this.Int64, that.Int64) &&
			deriveEqual_24(this.Int8, that.Int8) &&
			deriveEqual_22(this.Rune, that.Rune) &&
			deriveEqual_25(this.String, that.String) &&
			deriveEqual_26(this.Uint, that.Uint) &&
			deriveEqual_27(this.Uint16, that.Uint16) &&
			deriveEqual_28(this.Uint32, that.Uint32) &&
			deriveEqual_29(this.Uint64, that.Uint64) &&
			deriveEqual_15(this.Uint8, that.Uint8) &&
			deriveEqual_30(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr &&
			this.AnotherBoolOfDifferentSize == that.AnotherBoolOfDifferentSize
}

func deriveEqualPtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_31(this.Bool, that.Bool) &&
			deriveEqual_32(this.Byte, that.Byte) &&
			deriveEqual_33(this.Complex128, that.Complex128) &&
			deriveEqual_34(this.Complex64, that.Complex64) &&
			deriveEqual_35(this.Float64, that.Float64) &&
			deriveEqual_36(this.Float32, that.Float32) &&
			deriveEqual_37(this.Int, that.Int) &&
			deriveEqual_38(this.Int16, that.Int16) &&
			deriveEqual_39(this.Int32, that.Int32) &&
			deriveEqual_40(this.Int64, that.Int64) &&
			deriveEqual_41(this.Int8, that.Int8) &&
			deriveEqual_42(this.Rune, that.Rune) &&
			deriveEqual_43(this.String, that.String) &&
			deriveEqual_44(this.Uint, that.Uint) &&
			deriveEqual_45(this.Uint16, that.Uint16) &&
			deriveEqual_46(this.Uint32, that.Uint32) &&
			deriveEqual_47(this.Uint64, that.Uint64) &&
			deriveEqual_48(this.Uint8, that.Uint8) &&
			deriveEqual_49(this.UintPtr, that.UintPtr) &&
			deriveEqual_50(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize)
}

func deriveEqualPtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_51(this.StringToUint32, that.StringToUint32) &&
			deriveEqual_52(this.Uint64ToInt64, that.Uint64ToInt64)
}

func deriveEqualPtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_53(this.BoolToString, that.BoolToString) &&
			deriveEqual_54(this.StringToBool, that.StringToBool) &&
			deriveEqual_55(this.Complex128ToComplex64, that.Complex128ToComplex64) &&
			deriveEqual_56(this.Float64ToUint32, that.Float64ToUint32) &&
			deriveEqual_57(this.Uint16ToUint8, that.Uint16ToUint8)
}

func deriveEqualPtrToSliceToSlice(this, that *SliceToSlice) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_58(this.Ints, that.Ints) &&
			deriveEqual_59(this.Strings, that.Strings) &&
			deriveEqual_60(this.IntPtrs, that.IntPtrs)
}

func deriveEqualPtrToPtrTo(this, that *PtrTo) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Basic == nil && that.Basic == nil) || (this.Basic != nil && that.Basic != nil && *(this.Basic) == *(that.Basic))) &&
			((this.Slice == nil && that.Slice == nil) || (this.Slice != nil && that.Slice != nil && deriveEqualSliceOfint(*(this.Slice), *(that.Slice)))) &&
			((this.Array == nil && that.Array == nil) || (this.Array != nil && that.Array != nil && *(this.Array) == *(that.Array))) &&
			((this.Map == nil && that.Map == nil) || (this.Map != nil && that.Map != nil && deriveEqualMapOfintToint(*(this.Map), *(that.Map))))
}

func deriveEqualPtrToName(this, that *Name) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name
}

func deriveEqualPtrToStructs(this, that *Structs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Struct == that.Struct &&
			this.PtrToStruct.Equal(that.PtrToStruct) &&
			deriveEqual_61(this.SliceOfStructs, that.SliceOfStructs) &&
			deriveEqual_62(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct)
}

func deriveEqualPtrToMapWithStructs(this, that *MapWithStructs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_63(this.NameToString, that.NameToString) &&
			deriveEqual_64(this.StringToName, that.StringToName) &&
			deriveEqual_65(this.StringToPtrToName, that.StringToPtrToName) &&
			deriveEqual_66(this.StringToSliceOfName, that.StringToSliceOfName) &&
			deriveEqual_67(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName)
}

func deriveEqualPtrToRecursiveType(this, that *RecursiveType) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			bytes.Equal(this.Bytes, that.Bytes) &&
			deriveEqual_68(this.N, that.N)
}

func deriveEqualPtrToEmbeddedStruct1(this, that *EmbeddedStruct1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Structs.Equal(that.Structs)
}

func deriveEqualPtrToEmbeddedStruct2(this, that *EmbeddedStruct2) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Structs.Equal(&that.Structs) &&
			this.Name.Equal(that.Name)
}

func deriveEqualPtrToUnnamedStruct(this, that *UnnamedStruct) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Unnamed == that.Unnamed
}

func deriveEqualPtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_69(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_70(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_71(this.A, that.A)
}

func deriveEqualPtrToEnums(this, that *Enums) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Enum == that.Enum &&
			deriveEqual_72(this.PtrToEnum, that.PtrToEnum) &&
			deriveEqual_73(this.SliceToEnum, that.SliceToEnum) &&
			deriveEqual_74(this.SliceToPtrToEnum, that.SliceToPtrToEnum) &&
			deriveEqual_75(this.MapToEnum, that.MapToEnum) &&
			deriveEqual_76(this.EnumToMap, that.EnumToMap) &&
			this.ArrayEnum == that.ArrayEnum
}

func deriveEqualPtrToNamedTypes(this, that *NamedTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_6(this.Slice, that.Slice) &&
			deriveEqual_77(this.PtrToSlice, that.PtrToSlice) &&
			deriveEqual_78(this.SliceToSlice, that.SliceToSlice)
}

func deriveEqualPtrToTime(this, that *Time) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.T.Equal(that.T) &&
			((this.P == nil && that.P == nil) || (this.P != nil && that.P != nil && (*(this.P)).Equal(*(that.P))))
}

func deriveEqualPtrToDuration(this, that *Duration) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.D == that.D &&
			deriveEqual_79(this.P, that.P) &&
			deriveEqual_80(this.Ds, that.Ds) &&
			deriveEqual_81(this.DPs, that.DPs) &&
			deriveEqual_82(this.MD, that.MD)
}

func deriveEqualInefficientDeriveTheDerived(this, that int) bool {
	return this == that
}

func deriveEqualSliceOfint(this, that []int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfintToint(this, that map[int]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualPtrToint(this, that *int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqualPtrToSliceOfint(this, that *[]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToArray10Ofint(this, that *[10]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToMapOfintToint(this, that *map[int]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for k, v := range *this {
			thatv, ok := (*that)[k]
			if !ok {
				return false
			}
			if !(v == thatv) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqual1(this, that BuiltInTypes) bool {
	return this == that
}

func deriveCurryMarshal(f func(data []byte, v interface{}) error) func(data []byte) func(v interface{}) error {
	return func(data []byte) func(v interface{}) error {
		return func(v interface{}) error {
			return f(data, v)
		}
	}
}

func deriveCurry3(f func(a int, b string, c bool) string) func(a int) func(b string, c bool) string {
	return func(a int) func(b string, c bool) string {
		return func(b string, c bool) string {
			return f(a, b, c)
		}
	}
}

func deriveCurryCurried(f func(b string, c bool) string) func(b string) func(c bool) string {
	return func(b string) func(c bool) string {
		return func(c bool) string {
			return f(b, c)
		}
	}
}

func deriveSortedInts(list []int) []int {
	sort.Ints(list)
	return list
}

func deriveSortInt64s(list []int64) []int64 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSortStructs(list []*BuiltInTypes) []*BuiltInTypes {
	sort.Slice(list, func(i, j int) bool { return deriveComparePtrToBuiltInTypes(list[i], list[j]) < 0 })
	return list
}

func deriveSortedStrings(list []string) []string {
	sort.Strings(list)
	return list
}

func deriveKeysForInt64s(m map[int64]struct{}) []int64 {
	keys := make([]int64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForFmap(m map[int]string) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapStringToString(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapIntToInt64(m map[int]int64) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapInt64ToInt64(m map[int64]int64) []int64 {
	keys := make([]int64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveJoin(list [][]int) []int {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]int, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveJoinSS(list [][]string) []string {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]string, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveFmapForKeys(f func(int) string, list []int) []string {
	out := make([]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmap(f func(int) int, list []int) []int {
	out := make([]int, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmapSS(f func(string) []string, list []string) [][]string {
	out := make([][]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFlipMarshal(f func(data []byte, v interface{}) error) func(v interface{}, data []byte) error {
	return func(v interface{}, data []byte) error {
		return f(data, v)
	}
}

func deriveFlip3(f func(a int, b string, c bool) string) func(b string, a int, c bool) string {
	return func(b string, a int, c bool) string {
		return f(a, b, c)
	}
}

func deriveSetInt64s(list []int64) map[int64]struct{} {
	set := make(map[int64]struct{}, len(list))
	for _, v := range list {
		set[v] = struct{}{}
	}
	return set
}

func deriveMinInt64s(list []int64, def int64) int64 {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if v < m {
			m = list[i]
		}
	}
	return m
}

func deriveMinInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func deriveMinStructs(list []*BuiltInTypes, def *BuiltInTypes) *BuiltInTypes {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if deriveComparePtrToBuiltInTypes(v, m) < 0 {
			m = list[i]
		}
	}
	return m
}

func deriveMaxInt64s(list []int64, def int64) int64 {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if v > m {
			m = list[i]
		}
	}
	return m
}

func deriveMaxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func deriveMaxStructs(list []*BuiltInTypes, def *BuiltInTypes) *BuiltInTypes {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if deriveComparePtrToBuiltInTypes(v, m) > 0 {
			m = list[i]
		}
	}
	return m
}

func deriveAny(pred func(int) bool, list []int) bool {
	for _, elem := range list {
		if pred(elem) {
			return true
		}
	}
	return false
}

func deriveAll(pred func(int) bool, list []int) bool {
	for _, elem := range list {
		if !pred(elem) {
			return false
		}
	}
	return true
}

func deriveCompare(this, that bool) int {
	if this == that {
		return 0
	}
	if that {
		return -1
	}
	return 1
}

func deriveCompare_(this, that byte) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_f(this, that float64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_fl(this, that float32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_i(this, that int) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_in(this, that int16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int(this, that int32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int6(this, that int64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int8(this, that int8) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_u(this, that uint) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_ui(this, that uint16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_uin(this, that uint32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_uint(this, that uint64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_1(this, that uintptr) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_2(this, that *bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare(*this, *that)
}

func deriveCompare_3(this, that *byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_(*this, *that)
}

func deriveCompare_4(this, that *complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex64(*this, *that)
}

func deriveCompare_5(this, that *complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex32(*this, *that)
}

func deriveCompare_6(this, that *float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_f(*this, *that)
}

func deriveCompare_7(this, that *float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_fl(*this, *that)
}

func deriveCompare_8(this, that *int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_i(*this, *that)
}

func deriveCompare_9(this, that *int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_in(*this, *that)
}

func deriveCompare_10(this, that *int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int(*this, *that)
}

func deriveCompare_11(this, that *int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int6(*this, *that)
}

func deriveCompare_12(this, that *int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int8(*this, *that)
}

func deriveCompare_13(this, that *string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_s(*this, *that)
}

func deriveCompare_14(this, that *uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_u(*this, *that)
}

func deriveCompare_15(this, that *uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_ui(*this, *that)
}

func deriveCompare_16(this, that *uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_uin(*this, *that)
}

func deriveCompare_17(this, that *uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_uint(*this, *that)
}

func deriveCompare_18(this, that *uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_1(*this, *that)
}

func deriveCompare_19(this, that []bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_20(this, that []complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_21(this, that []complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_22(this, that []float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_f(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_23(this, that []float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_fl(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_24(this, that []int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_25(this, that []int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_in(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_26(this, that []int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_27(this, that []int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_28(this, that []int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_29(this, that []string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_30(this, that []uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_u(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_31(this, that []uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_ui(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_32(this, that []uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uin(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_33(this, that []uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_34(this, that []uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_1(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_35(this, that []*bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_36(this, that []*byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_37(this, that []*complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_4(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_38(this, that []*complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_5(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_39(this, that []*float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_40(this, that []*float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_7(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_41(this, that []*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_42(this, that []*int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_9(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_43(this, that []*int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_44(this, that []*int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_11(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_45(this, that []*int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_12(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_46(this, that []*string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_13(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_47(this, that []*uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_14(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_48(this, that []*uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_15(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_49(this, that []*uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_50(this, that []*uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_17(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_51(this, that []*uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_18(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_52(this, that [1]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_53(this, that [2]byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_54(this, that [3]complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_55(this, that [4]complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_56(this, that [5]float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_f(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_57(this, that [6]float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_fl(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_58(this, that [7]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_59(this, that [8]int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_in(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_60(this, that [9]int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_61(this, that [10]int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_62(this, that [11]int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_63(this, that [12]rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_64(this, that [13]string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_65(this, that [14]uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_u(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_66(this, that [15]uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_ui(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_67(this, that [16]uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uin(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_68(this, that [17]uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_69(this, that [18]uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_70(this, that [19]uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_1(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_71(this, that [10]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_72(this, that [1]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_73(this, that [2]*byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_74(this, that [3]*complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_4(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_75(this, that [4]*complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_5(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_76(this, that [5]*float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_77(this, that [6]*float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_7(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_78(this, that [7]*int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_79(this, that [8]*int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_9(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_80(this, that [9]*int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_81(this, that [10]*int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_11(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_82(this, that [11]*int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_12(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_83(this, that [12]*rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_84(this, that [13]*string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_13(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_85(this, that [14]*uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_14(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_86(this, that [15]*uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_15(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_87(this, that [16]*uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_88(this, that [17]*uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_17(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_89(this, that [18]*uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_90(this, that [19]*uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_18(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_91(this, that [10]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_92(this, that map[string]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys(this))
	thatkeys := deriveSortedStrings(deriveKeys(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_uin(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_93(this, that map[uint8]int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort(deriveKeys_(this))
	thatkeys := deriveSort(deriveKeys_(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_int6(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_94(this, that map[bool]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_(deriveKeys_1(this))
	thatkeys := deriveSort_(deriveKeys_1(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_95(this, that map[string]bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_2(this))
	thatkeys := deriveSortedStrings(deriveKeys_2(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_96(this, that map[complex128]complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_1(deriveKeys_3(this))
	thatkeys := deriveSort_1(deriveKeys_3(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareComplex32(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareComplex64(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_97(this, that map[float64]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_2(deriveKeys_4(this))
	thatkeys := deriveSort_2(deriveKeys_4(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_uin(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_f(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_98(this, that map[uint16]uint8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_3(deriveKeys_5(this))
	thatkeys := deriveSort_3(deriveKeys_5(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_ui(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_99(this, that [][]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_24(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_100(this, that [][]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_29(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_101(this, that [][]*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_41(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_102(this, that *[]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_24(*this, *that)
}

func deriveCompare_103(this, that *[4]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_128(*this, *that)
}

func deriveCompare_104(this, that *map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_129(*this, *that)
}

func deriveCompare_105(this, that []Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(&that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_106(this, that []*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_107(this, that map[Name]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_4(deriveKeys_6(this))
	thatkeys := deriveSort_4(deriveKeys_6(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := thiskey.Compare(&thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_108(this, that map[string]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_7(this))
	thatkeys := deriveSortedStrings(deriveKeys_7(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_109(this, that map[string]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_8(this))
	thatkeys := deriveSortedStrings(deriveKeys_8(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_110(this, that map[string][]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_9(this))
	thatkeys := deriveSortedStrings(deriveKeys_9(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_105(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_111(this, that map[string][]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_10(this))
	thatkeys := deriveSortedStrings(deriveKeys_10(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_106(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_112(this, that map[int]RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_11(this))
	thatkeys := deriveSortedInts(deriveKeys_11(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_113(this, that *StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_int6(this.Num, that.Num); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_114(this, that *extra.StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_int6(this.Number, that.Number); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_115(this, that *extra.PrivateFieldAndNoEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	if c := deriveCompare_int6(*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())), *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_27(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_11(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())), *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_44(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_114(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr()))); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_M(this, that MyEnum) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_116(this, that *MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_M(*this, *that)
}

func deriveCompare_117(this, that []MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_M(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_118(this, that []*MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_116(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_119(this, that map[int32]MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_5(deriveKeys_12(this))
	thatkeys := deriveSort_5(deriveKeys_12(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_M(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_int(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_120(this, that map[MyEnum]int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_6(deriveKeys_13(this))
	thatkeys := deriveSort_6(deriveKeys_13(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_int(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_M(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_121(this, that [2]MyEnum) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_M(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_122(this, that *MySlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_27(*this, *that)
}

func deriveCompare_123(this, that []MySlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_27(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_D(this, that time.Duration) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_124(this, that *time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_D(*this, *that)
}

func deriveCompare_125(this, that []time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_D(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_126(this, that []*time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_124(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_127(this, that map[int]time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_14(this))
	thatkeys := deriveSortedInts(deriveKeys_14(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_D(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCopyTo(this, that []*bool) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(bool)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_(this, that []*byte) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(byte)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_1(this, that []*complex128) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(complex128)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_2(this, that []*complex64) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(complex64)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_3(this, that []*float64) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(float64)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_4(this, that []*float32) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(float32)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_5(this, that []*int) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(int)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_6(this, that []*int16) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(int16)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_7(this, that []*int32) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(int32)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_8(this, that []*int64) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(int64)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_9(this, that []*int8) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(int8)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_10(this, that []*string) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(string)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_11(this, that []*uint) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(uint)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_12(this, that []*uint16) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(uint16)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_13(this, that []*uint32) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(uint32)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_14(this, that []*uint64) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(uint64)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_15(this, that []*uintptr) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(uintptr)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_16(this, that map[string]uint32) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_17(this, that map[uint8]int64) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_18(this, that map[bool]string) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_19(this, that map[string]bool) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_20(this, that map[complex128]complex64) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_21(this, that map[float64]uint32) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_22(this, that map[uint16]uint8) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_23(this, that [][]int) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			if that[this_i] != nil {
				if len(this_value) > len(that[this_i]) {
					if cap(that[this_i]) >= len(this_value) {
						that[this_i] = (that[this_i])[:len(this_value)]
					} else {
						that[this_i] = make([]int, len(this_value))
					}
				} else if len(this_value) < len(that[this_i]) {
					that[this_i] = (that[this_i])[:len(this_value)]
				}
			} else {
				that[this_i] = make([]int, len(this_value))
			}
			copy(that[this_i], this_value)
		}
	}
}

func deriveCopyTo_24(this, that [][]string) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			if that[this_i] != nil {
				if len(this_value) > len(that[this_i]) {
					if cap(that[this_i]) >= len(this_value) {
						that[this_i] = (that[this_i])[:len(this_value)]
					} else {
						that[this_i] = make([]string, len(this_value))
					}
				} else if len(this_value) < len(that[this_i]) {
					that[this_i] = (that[this_i])[:len(this_value)]
				}
			} else {
				that[this_i] = make([]string, len(this_value))
			}
			copy(that[this_i], this_value)
		}
	}
}

func deriveCopyTo_25(this, that [][]*int) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			if that[this_i] != nil {
				if len(this_value) > len(that[this_i]) {
					if cap(that[this_i]) >= len(this_value) {
						that[this_i] = (that[this_i])[:len(this_value)]
					} else {
						that[this_i] = make([]*int, len(this_value))
					}
				} else if len(this_value) < len(that[this_i]) {
					that[this_i] = (that[this_i])[:len(this_value)]
				}
			} else {
				that[this_i] = make([]*int, len(this_value))
			}
			deriveCopyTo_5(this_value, that[this_i])
		}
	}
}

func deriveCopyTo_26(this, that *[]int) {
	if *this == nil {
		*that = nil
	} else {
		if *that != nil {
			if len(*this) > len(*that) {
				if cap(*that) >= len(*this) {
					*that = (*that)[:len(*this)]
				} else {
					*that = make([]int, len(*this))
				}
			} else if len(*this) < len(*that) {
				*that = (*that)[:len(*this)]
			}
		} else {
			*that = make([]int, len(*this))
		}
		copy(*that, *this)
	}
}

func deriveCopyTo_27(this, that *map[int]int) {
	if *this != nil {
		*that = make(map[int]int, len(*this))
		deriveCopyTo_43(*this, *that)
	} else {
		*that = nil
	}
}

func deriveCopyTo_28(this, that []*Name) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(Name)
			this_value.CopyTo(that[this_i])
		}
	}
}

func deriveCopyTo_29(this, that map[Name]string) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_30(this, that map[string]Name) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_31(this, that map[string]*Name) {
	for this_key, this_value := range this {
		if this_value == nil {
			that[this_key] = nil
		}
		if this_value == nil {
			that[this_key] = nil
		} else {
			that[this_key] = new(Name)
			this_value.CopyTo(that[this_key])
		}
	}
}

func deriveCopyTo_32(this, that map[string][]Name) {
	for this_key, this_value := range this {
		if this_value == nil {
			that[this_key] = nil
		}
		if this_value == nil {
			that[this_key] = nil
		} else {
			if that[this_key] != nil {
				if len(this_value) > len(that[this_key]) {
					if cap(that[this_key]) >= len(this_value) {
						that[this_key] = (that[this_key])[:len(this_value)]
					} else {
						that[this_key] = make([]Name, len(this_value))
					}
				} else if len(this_value) < len(that[this_key]) {
					that[this_key] = (that[this_key])[:len(this_value)]
				}
			} else {
				that[this_key] = make([]Name, len(this_value))
			}
			copy(that[this_key], this_value)
		}
	}
}

func deriveCopyTo_33(this, that map[string][]*Name) {
	for this_key, this_value := range this {
		if this_value == nil {
			that[this_key] = nil
		}
		if this_value == nil {
			that[this_key] = nil
		} else {
			if that[this_key] != nil {
				if len(this_value) > len(that[this_key]) {
					if cap(that[this_key]) >= len(this_value) {
						that[this_key] = (that[this_key])[:len(this_value)]
					} else {
						that[this_key] = make([]*Name, len(this_value))
					}
				} else if len(this_value) < len(that[this_key]) {
					that[this_key] = (that[this_key])[:len(this_value)]
				}
			} else {
				that[this_key] = make([]*Name, len(this_value))
			}
			deriveCopyTo_28(this_value, that[this_key])
		}
	}
}

func deriveCopyTo_34(this, that map[int]RecursiveType) {
	for this_key, this_value := range this {
		field := new(RecursiveType)
		this_value.CopyTo(field)
		that[this_key] = *field
	}
}

func deriveCopyTo_35(this, that *extra.PrivateFieldAndNoEqualMethod) {
	this_v := reflect.Indirect(reflect.ValueOf(this))
	that_v := reflect.Indirect(reflect.ValueOf(that))
	*(*int64)(unsafe.Pointer(that_v.FieldByName("number").UnsafeAddr())) = *(*int64)(unsafe.Pointer(this_v.FieldByName("number").UnsafeAddr()))
	if *(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr())) == nil {
		*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) = nil
	} else {
		if *(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) != nil {
			if len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr()))) > len(*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr()))) {
				if cap(*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr()))) >= len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr()))) {
					*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) = (*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())))[:len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr())))]
				} else {
					*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) = make([]int64, len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr()))))
				}
			} else if len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr()))) < len(*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr()))) {
				*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) = (*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())))[:len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr())))]
			}
		} else {
			*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())) = make([]int64, len(*(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr()))))
		}
		copy(*(*[]int64)(unsafe.Pointer(that_v.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(this_v.FieldByName("numbers").UnsafeAddr())))
	}
	if *(**int64)(unsafe.Pointer(this_v.FieldByName("ptr").UnsafeAddr())) == nil {
		*(**int64)(unsafe.Pointer(that_v.FieldByName("ptr").UnsafeAddr())) = nil
	} else {
		*(**int64)(unsafe.Pointer(that_v.FieldByName("ptr").UnsafeAddr())) = new(int64)
		**(**int64)(unsafe.Pointer(that_v.FieldByName("ptr").UnsafeAddr())) = **(**int64)(unsafe.Pointer(this_v.FieldByName("ptr").UnsafeAddr()))
	}
	if *(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr())) == nil {
		*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) = nil
	} else {
		if *(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) != nil {
			if len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr()))) > len(*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr()))) {
				if cap(*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr()))) >= len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr()))) {
					*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) = (*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())))[:len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr())))]
				} else {
					*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) = make([]*int64, len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr()))))
				}
			} else if len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr()))) < len(*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr()))) {
				*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) = (*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())))[:len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr())))]
			}
		} else {
			*(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())) = make([]*int64, len(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr()))))
		}
		deriveCopyTo_8(*(*[]*int64)(unsafe.Pointer(this_v.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(that_v.FieldByName("numberpts").UnsafeAddr())))
	}
	if *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(this_v.FieldByName("strct").UnsafeAddr())) == nil {
		*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(that_v.FieldByName("strct").UnsafeAddr())) = nil
	} else {
		*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(that_v.FieldByName("strct").UnsafeAddr())) = new(extra.StructWithoutEqualMethod)
		**(**extra.StructWithoutEqualMethod)(unsafe.Pointer(that_v.FieldByName("strct").UnsafeAddr())) = **(**extra.StructWithoutEqualMethod)(unsafe.Pointer(this_v.FieldByName("strct").UnsafeAddr()))
	}
}

func deriveCopyTo_36(this, that []*MyEnum) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(MyEnum)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_37(this, that map[int32]MyEnum) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_38(this, that map[MyEnum]int32) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveCopyTo_39(this, that *MySlice) {
	if *this == nil {
		*that = nil
	} else {
		if *that != nil {
			if len(*this) > len(*that) {
				if cap(*that) >= len(*this) {
					*that = (*that)[:len(*this)]
				} else {
					*that = make([]int64, len(*this))
				}
			} else if len(*this) < len(*that) {
				*that = (*that)[:len(*this)]
			}
		} else {
			*that = make([]int64, len(*this))
		}
		copy(*that, *this)
	}
}

func deriveCopyTo_40(this, that []MySlice) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			if that[this_i] != nil {
				if len(this_value) > len(that[this_i]) {
					if cap(that[this_i]) >= len(this_value) {
						that[this_i] = (that[this_i])[:len(this_value)]
					} else {
						that[this_i] = make([]int64, len(this_value))
					}
				} else if len(this_value) < len(that[this_i]) {
					that[this_i] = (that[this_i])[:len(this_value)]
				}
			} else {
				that[this_i] = make([]int64, len(this_value))
			}
			copy(that[this_i], this_value)
		}
	}
}

func deriveCopyTo_41(this, that []*time.Duration) {
	for this_i, this_value := range this {
		if this_value == nil {
			that[this_i] = nil
		} else {
			that[this_i] = new(time.Duration)
			*that[this_i] = *this_value
		}
	}
}

func deriveCopyTo_42(this, that map[int]time.Duration) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveEqual(this, that []bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_(this, that []complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_1(this, that []complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_2(this, that []float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_3(this, that []float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_4(this, that []int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_5(this, that []int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_6(this, that []int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_7(this, that []int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_8(this, that []string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_9(this, that []uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_10(this, that []uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_11(this, that []uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_12(this, that []uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_13(this, that []uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_14(this, that []*bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_15(this, that []*byte) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_16(this, that []*complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_17(this, that []*complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_18(this, that []*float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_19(this, that []*float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_20(this, that []*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_21(this, that []*int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_22(this, that []*int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_23(this, that []*int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_24(this, that []*int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_25(this, that []*string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_26(this, that []*uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_27(this, that []*uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_28(this, that []*uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_29(this, that []*uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_30(this, that []*uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_31(this, that [1]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_32(this, that [2]*byte) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_33(this, that [3]*complex128) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_34(this, that [4]*complex64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_35(this, that [5]*float64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_36(this, that [6]*float32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_37(this, that [7]*int) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_38(this, that [8]*int16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_39(this, that [9]*int32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_40(this, that [10]*int64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_41(this, that [11]*int8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_42(this, that [12]*rune) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_43(this, that [13]*string) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_44(this, that [14]*uint) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_45(this, that [15]*uint16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_46(this, that [16]*uint32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_47(this, that [17]*uint64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_48(this, that [18]*uint8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_49(this, that [19]*uintptr) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_50(this, that [10]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_51(this, that map[string]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_52(this, that map[uint8]int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_53(this, that map[bool]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_54(this, that map[string]bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_55(this, that map[complex128]complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_56(this, that map[float64]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_57(this, that map[uint16]uint8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_58(this, that [][]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqualSliceOfint(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_59(this, that [][]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_8(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_60(this, that [][]*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_20(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_61(this, that []Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_62(this, that []*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i].Equal(that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_63(this, that map[Name]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_64(this, that map[string]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_65(this, that map[string]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_66(this, that map[string][]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqual_61(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_67(this, that map[string][]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqual_62(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_68(this, that map[int]RecursiveType) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(&thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_69(this, that *StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Num == that.Num
}

func deriveEqual_70(this, that *extra.StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Number == that.Number
}

func deriveEqual_71(this, that *extra.PrivateFieldAndNoEqualMethod) bool {
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())) == *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr())) &&
			deriveEqual_6(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))) &&
			((*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) == nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) == nil) || (*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) != nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) != nil && *(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr()))) == *(*(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))))) &&
			deriveEqual_23(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))) &&
			deriveEqual_70(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr())))
}

func deriveEqual_72(this, that *MyEnum) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqual_73(this, that []MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_74(this, that []*MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_72(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_75(this, that map[int32]MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_76(this, that map[MyEnum]int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_77(this, that *MySlice) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqual_78(this, that []MySlice) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_6(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_79(this, that *time.Duration) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqual_80(this, that []time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_81(this, that []*time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_79(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_82(this, that map[int]time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveSort(list []uint8) []uint8 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_(list []bool) []bool {
	sort.Slice(list, func(i, j int) bool { return deriveCompare(list[i], list[j]) < 0 })
	return list
}

func deriveSort_1(list []complex128) []complex128 {
	sort.Slice(list, func(i, j int) bool { return deriveCompareComplex64(list[i], list[j]) < 0 })
	return list
}

func deriveSort_2(list []float64) []float64 {
	sort.Float64s(list)
	return list
}

func deriveSort_3(list []uint16) []uint16 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_4(list []Name) []Name {
	sort.Slice(list, func(i, j int) bool { return deriveCompare_N(list[i], list[j]) < 0 })
	return list
}

func deriveSort_5(list []int32) []int32 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_6(list []MyEnum) []MyEnum {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveKeys(m map[string]uint32) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_(m map[uint8]int64) []uint8 {
	keys := make([]uint8, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_1(m map[bool]string) []bool {
	keys := make([]bool, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_2(m map[string]bool) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_3(m map[complex128]complex64) []complex128 {
	keys := make([]complex128, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_4(m map[float64]uint32) []float64 {
	keys := make([]float64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_5(m map[uint16]uint8) []uint16 {
	keys := make([]uint16, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_6(m map[Name]string) []Name {
	keys := make([]Name, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_7(m map[string]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_8(m map[string]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_9(m map[string][]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_10(m map[string][]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_11(m map[int]RecursiveType) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_12(m map[int32]MyEnum) []int32 {
	keys := make([]int32, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_13(m map[MyEnum]int32) []MyEnum {
	keys := make([]MyEnum, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_14(m map[int]time.Duration) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveCompare_s(this, that string) int {
	return strings.Compare(this, that)
}

func deriveCompare_128(this, that [4]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_129(this, that map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_15(this))
	thatkeys := deriveSortedInts(deriveKeys_15(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_i(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_N(this, that Name) int {
	return (&this).Compare(&that)
}

func deriveCopyTo_43(this, that map[int]int) {
	for this_key, this_value := range this {
		that[this_key] = this_value
	}
}

func deriveKeys_15(m map[int]int) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}
