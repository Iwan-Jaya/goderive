// Code generated by goderive DO NOT EDIT.

package test

import (
	"bytes"
	"fmt"
	extra "github.com/awalterschulze/goderive/test/extra"
	"reflect"
	"sort"
	"strings"
	"sync"
	"time"
	"unsafe"
	"vendortest"
)

func deriveTakeWhile(pred func(int) bool, list []int) []int {
	out := make([]int, 0, len(list))
	for i, elem := range list {
		if !pred(elem) {
			break
		}
		out = append(out, list[i])
	}
	return out
}

func deriveIntersectSetOfInt64s(this, that map[int64]struct{}) map[int64]struct{} {
	intersect := make(map[int64]struct{}, deriveMinInt(len(this), len(that)))
	for k := range this {
		if _, ok := that[k]; ok {
			intersect[k] = struct{}{}
		}
	}
	return intersect
}

func deriveIntersectOfInt64s(this, that []int64) []int64 {
	intersect := make([]int64, 0, deriveMinInt(len(this), len(that)))
	for i, v := range this {
		if deriveContainsInt64s(that, v) {
			intersect = append(intersect, this[i])
		}
	}
	return intersect
}

func deriveGoStringEmpty(this *Empty) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.Empty {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return &test.Empty{}\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringBuiltInTypes(this *BuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.BuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.BuiltInTypes{}\n")
		fmt.Fprintf(buf, "this.Bool = %#v\n", this.Bool)
		fmt.Fprintf(buf, "this.Byte = %#v\n", this.Byte)
		fmt.Fprintf(buf, "this.Complex128 = %#v\n", this.Complex128)
		fmt.Fprintf(buf, "this.Complex64 = %#v\n", this.Complex64)
		fmt.Fprintf(buf, "this.Float64 = %#v\n", this.Float64)
		fmt.Fprintf(buf, "this.Float32 = %#v\n", this.Float32)
		fmt.Fprintf(buf, "this.Int = %#v\n", this.Int)
		fmt.Fprintf(buf, "this.Int16 = %#v\n", this.Int16)
		fmt.Fprintf(buf, "this.Int32 = %#v\n", this.Int32)
		fmt.Fprintf(buf, "this.Int64 = %#v\n", this.Int64)
		fmt.Fprintf(buf, "this.Int8 = %#v\n", this.Int8)
		fmt.Fprintf(buf, "this.Rune = %#v\n", this.Rune)
		fmt.Fprintf(buf, "this.String = %#v\n", this.String)
		fmt.Fprintf(buf, "this.Uint = %#v\n", this.Uint)
		fmt.Fprintf(buf, "this.Uint16 = %#v\n", this.Uint16)
		fmt.Fprintf(buf, "this.Uint32 = %#v\n", this.Uint32)
		fmt.Fprintf(buf, "this.Uint64 = %#v\n", this.Uint64)
		fmt.Fprintf(buf, "this.Uint8 = %#v\n", this.Uint8)
		fmt.Fprintf(buf, "this.UintPtr = %#v\n", this.UintPtr)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringPtrToBuiltInTypes(this *PtrToBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.PtrToBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.PtrToBuiltInTypes{}\n")
		if this.Bool != nil {
			fmt.Fprintf(buf, "this.Bool = func (v bool) *bool { return &v }(%#v)\n", *this.Bool)
		}
		if this.Byte != nil {
			fmt.Fprintf(buf, "this.Byte = func (v byte) *byte { return &v }(%#v)\n", *this.Byte)
		}
		if this.Complex128 != nil {
			fmt.Fprintf(buf, "this.Complex128 = func (v complex128) *complex128 { return &v }(%#v)\n", *this.Complex128)
		}
		if this.Complex64 != nil {
			fmt.Fprintf(buf, "this.Complex64 = func (v complex64) *complex64 { return &v }(%#v)\n", *this.Complex64)
		}
		if this.Float64 != nil {
			fmt.Fprintf(buf, "this.Float64 = func (v float64) *float64 { return &v }(%#v)\n", *this.Float64)
		}
		if this.Float32 != nil {
			fmt.Fprintf(buf, "this.Float32 = func (v float32) *float32 { return &v }(%#v)\n", *this.Float32)
		}
		if this.Int != nil {
			fmt.Fprintf(buf, "this.Int = func (v int) *int { return &v }(%#v)\n", *this.Int)
		}
		if this.Int16 != nil {
			fmt.Fprintf(buf, "this.Int16 = func (v int16) *int16 { return &v }(%#v)\n", *this.Int16)
		}
		if this.Int32 != nil {
			fmt.Fprintf(buf, "this.Int32 = func (v int32) *int32 { return &v }(%#v)\n", *this.Int32)
		}
		if this.Int64 != nil {
			fmt.Fprintf(buf, "this.Int64 = func (v int64) *int64 { return &v }(%#v)\n", *this.Int64)
		}
		if this.Int8 != nil {
			fmt.Fprintf(buf, "this.Int8 = func (v int8) *int8 { return &v }(%#v)\n", *this.Int8)
		}
		if this.Rune != nil {
			fmt.Fprintf(buf, "this.Rune = func (v rune) *rune { return &v }(%#v)\n", *this.Rune)
		}
		if this.String != nil {
			fmt.Fprintf(buf, "this.String = func (v string) *string { return &v }(%#v)\n", *this.String)
		}
		if this.Uint != nil {
			fmt.Fprintf(buf, "this.Uint = func (v uint) *uint { return &v }(%#v)\n", *this.Uint)
		}
		if this.Uint16 != nil {
			fmt.Fprintf(buf, "this.Uint16 = func (v uint16) *uint16 { return &v }(%#v)\n", *this.Uint16)
		}
		if this.Uint32 != nil {
			fmt.Fprintf(buf, "this.Uint32 = func (v uint32) *uint32 { return &v }(%#v)\n", *this.Uint32)
		}
		if this.Uint64 != nil {
			fmt.Fprintf(buf, "this.Uint64 = func (v uint64) *uint64 { return &v }(%#v)\n", *this.Uint64)
		}
		if this.Uint8 != nil {
			fmt.Fprintf(buf, "this.Uint8 = func (v uint8) *uint8 { return &v }(%#v)\n", *this.Uint8)
		}
		if this.UintPtr != nil {
			fmt.Fprintf(buf, "this.UintPtr = func (v uintptr) *uintptr { return &v }(%#v)\n", *this.UintPtr)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringSliceOfBuiltInTypes(this *SliceOfBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.SliceOfBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.SliceOfBuiltInTypes{}\n")
		if this.Bool != nil {
			fmt.Fprintf(buf, "this.Bool = %#v\n", this.Bool)
		}
		if this.Byte != nil {
			fmt.Fprintf(buf, "this.Byte = %#v\n", this.Byte)
		}
		if this.Complex128 != nil {
			fmt.Fprintf(buf, "this.Complex128 = %#v\n", this.Complex128)
		}
		if this.Complex64 != nil {
			fmt.Fprintf(buf, "this.Complex64 = %#v\n", this.Complex64)
		}
		if this.Float64 != nil {
			fmt.Fprintf(buf, "this.Float64 = %#v\n", this.Float64)
		}
		if this.Float32 != nil {
			fmt.Fprintf(buf, "this.Float32 = %#v\n", this.Float32)
		}
		if this.Int != nil {
			fmt.Fprintf(buf, "this.Int = %#v\n", this.Int)
		}
		if this.Int16 != nil {
			fmt.Fprintf(buf, "this.Int16 = %#v\n", this.Int16)
		}
		if this.Int32 != nil {
			fmt.Fprintf(buf, "this.Int32 = %#v\n", this.Int32)
		}
		if this.Int64 != nil {
			fmt.Fprintf(buf, "this.Int64 = %#v\n", this.Int64)
		}
		if this.Int8 != nil {
			fmt.Fprintf(buf, "this.Int8 = %#v\n", this.Int8)
		}
		if this.Rune != nil {
			fmt.Fprintf(buf, "this.Rune = %#v\n", this.Rune)
		}
		if this.String != nil {
			fmt.Fprintf(buf, "this.String = %#v\n", this.String)
		}
		if this.Uint != nil {
			fmt.Fprintf(buf, "this.Uint = %#v\n", this.Uint)
		}
		if this.Uint16 != nil {
			fmt.Fprintf(buf, "this.Uint16 = %#v\n", this.Uint16)
		}
		if this.Uint32 != nil {
			fmt.Fprintf(buf, "this.Uint32 = %#v\n", this.Uint32)
		}
		if this.Uint64 != nil {
			fmt.Fprintf(buf, "this.Uint64 = %#v\n", this.Uint64)
		}
		if this.Uint8 != nil {
			fmt.Fprintf(buf, "this.Uint8 = %#v\n", this.Uint8)
		}
		if this.UintPtr != nil {
			fmt.Fprintf(buf, "this.UintPtr = %#v\n", this.UintPtr)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringSliceOfPtrToBuiltInTypes(this *SliceOfPtrToBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.SliceOfPtrToBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.SliceOfPtrToBuiltInTypes{}\n")
		if this.Bool != nil {
			fmt.Fprintf(buf, "this.Bool = %s\n", deriveGoString(this.Bool))
		}
		if this.Byte != nil {
			fmt.Fprintf(buf, "this.Byte = %s\n", deriveGoString_(this.Byte))
		}
		if this.Complex128 != nil {
			fmt.Fprintf(buf, "this.Complex128 = %s\n", deriveGoString_1(this.Complex128))
		}
		if this.Complex64 != nil {
			fmt.Fprintf(buf, "this.Complex64 = %s\n", deriveGoString_2(this.Complex64))
		}
		if this.Float64 != nil {
			fmt.Fprintf(buf, "this.Float64 = %s\n", deriveGoString_3(this.Float64))
		}
		if this.Float32 != nil {
			fmt.Fprintf(buf, "this.Float32 = %s\n", deriveGoString_4(this.Float32))
		}
		if this.Int != nil {
			fmt.Fprintf(buf, "this.Int = %s\n", deriveGoString_5(this.Int))
		}
		if this.Int16 != nil {
			fmt.Fprintf(buf, "this.Int16 = %s\n", deriveGoString_6(this.Int16))
		}
		if this.Int32 != nil {
			fmt.Fprintf(buf, "this.Int32 = %s\n", deriveGoString_7(this.Int32))
		}
		if this.Int64 != nil {
			fmt.Fprintf(buf, "this.Int64 = %s\n", deriveGoString_8(this.Int64))
		}
		if this.Int8 != nil {
			fmt.Fprintf(buf, "this.Int8 = %s\n", deriveGoString_9(this.Int8))
		}
		if this.Rune != nil {
			fmt.Fprintf(buf, "this.Rune = %s\n", deriveGoString_7(this.Rune))
		}
		if this.String != nil {
			fmt.Fprintf(buf, "this.String = %s\n", deriveGoString_10(this.String))
		}
		if this.Uint != nil {
			fmt.Fprintf(buf, "this.Uint = %s\n", deriveGoString_11(this.Uint))
		}
		if this.Uint16 != nil {
			fmt.Fprintf(buf, "this.Uint16 = %s\n", deriveGoString_12(this.Uint16))
		}
		if this.Uint32 != nil {
			fmt.Fprintf(buf, "this.Uint32 = %s\n", deriveGoString_13(this.Uint32))
		}
		if this.Uint64 != nil {
			fmt.Fprintf(buf, "this.Uint64 = %s\n", deriveGoString_14(this.Uint64))
		}
		if this.Uint8 != nil {
			fmt.Fprintf(buf, "this.Uint8 = %s\n", deriveGoString_(this.Uint8))
		}
		if this.UintPtr != nil {
			fmt.Fprintf(buf, "this.UintPtr = %s\n", deriveGoString_15(this.UintPtr))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringArrayOfBuiltInTypes(this *ArrayOfBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.ArrayOfBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.ArrayOfBuiltInTypes{}\n")
		fmt.Fprintf(buf, "this.Bool = %#v\n", this.Bool)
		fmt.Fprintf(buf, "this.Byte = %#v\n", this.Byte)
		fmt.Fprintf(buf, "this.Complex128 = %#v\n", this.Complex128)
		fmt.Fprintf(buf, "this.Complex64 = %#v\n", this.Complex64)
		fmt.Fprintf(buf, "this.Float64 = %#v\n", this.Float64)
		fmt.Fprintf(buf, "this.Float32 = %#v\n", this.Float32)
		fmt.Fprintf(buf, "this.Int = %#v\n", this.Int)
		fmt.Fprintf(buf, "this.Int16 = %#v\n", this.Int16)
		fmt.Fprintf(buf, "this.Int32 = %#v\n", this.Int32)
		fmt.Fprintf(buf, "this.Int64 = %#v\n", this.Int64)
		fmt.Fprintf(buf, "this.Int8 = %#v\n", this.Int8)
		fmt.Fprintf(buf, "this.Rune = %#v\n", this.Rune)
		fmt.Fprintf(buf, "this.String = %#v\n", this.String)
		fmt.Fprintf(buf, "this.Uint = %#v\n", this.Uint)
		fmt.Fprintf(buf, "this.Uint16 = %#v\n", this.Uint16)
		fmt.Fprintf(buf, "this.Uint32 = %#v\n", this.Uint32)
		fmt.Fprintf(buf, "this.Uint64 = %#v\n", this.Uint64)
		fmt.Fprintf(buf, "this.Uint8 = %#v\n", this.Uint8)
		fmt.Fprintf(buf, "this.UintPtr = %#v\n", this.UintPtr)
		fmt.Fprintf(buf, "this.AnotherBoolOfDifferentSize = %#v\n", this.AnotherBoolOfDifferentSize)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringArrayOfPtrToBuiltInTypes(this *ArrayOfPtrToBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.ArrayOfPtrToBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.ArrayOfPtrToBuiltInTypes{}\n")
		fmt.Fprintf(buf, "this.Bool = %s\n", deriveGoString_16(this.Bool))
		fmt.Fprintf(buf, "this.Byte = %s\n", deriveGoString_17(this.Byte))
		fmt.Fprintf(buf, "this.Complex128 = %s\n", deriveGoString_18(this.Complex128))
		fmt.Fprintf(buf, "this.Complex64 = %s\n", deriveGoString_19(this.Complex64))
		fmt.Fprintf(buf, "this.Float64 = %s\n", deriveGoString_20(this.Float64))
		fmt.Fprintf(buf, "this.Float32 = %s\n", deriveGoString_21(this.Float32))
		fmt.Fprintf(buf, "this.Int = %s\n", deriveGoString_22(this.Int))
		fmt.Fprintf(buf, "this.Int16 = %s\n", deriveGoString_23(this.Int16))
		fmt.Fprintf(buf, "this.Int32 = %s\n", deriveGoString_24(this.Int32))
		fmt.Fprintf(buf, "this.Int64 = %s\n", deriveGoString_25(this.Int64))
		fmt.Fprintf(buf, "this.Int8 = %s\n", deriveGoString_26(this.Int8))
		fmt.Fprintf(buf, "this.Rune = %s\n", deriveGoString_27(this.Rune))
		fmt.Fprintf(buf, "this.String = %s\n", deriveGoString_28(this.String))
		fmt.Fprintf(buf, "this.Uint = %s\n", deriveGoString_29(this.Uint))
		fmt.Fprintf(buf, "this.Uint16 = %s\n", deriveGoString_30(this.Uint16))
		fmt.Fprintf(buf, "this.Uint32 = %s\n", deriveGoString_31(this.Uint32))
		fmt.Fprintf(buf, "this.Uint64 = %s\n", deriveGoString_32(this.Uint64))
		fmt.Fprintf(buf, "this.Uint8 = %s\n", deriveGoString_33(this.Uint8))
		fmt.Fprintf(buf, "this.UintPtr = %s\n", deriveGoString_34(this.UintPtr))
		fmt.Fprintf(buf, "this.AnotherBoolOfDifferentSize = %s\n", deriveGoString_35(this.AnotherBoolOfDifferentSize))
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringMapsOfSimplerBuiltInTypes(this *MapsOfSimplerBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.MapsOfSimplerBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.MapsOfSimplerBuiltInTypes{}\n")
		if this.StringToUint32 != nil {
			fmt.Fprintf(buf, "this.StringToUint32 = %#v\n", this.StringToUint32)
		}
		if this.Uint64ToInt64 != nil {
			fmt.Fprintf(buf, "this.Uint64ToInt64 = %#v\n", this.Uint64ToInt64)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringMapsOfBuiltInTypes(this *MapsOfBuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.MapsOfBuiltInTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.MapsOfBuiltInTypes{}\n")
		if this.BoolToString != nil {
			fmt.Fprintf(buf, "this.BoolToString = %#v\n", this.BoolToString)
		}
		if this.StringToBool != nil {
			fmt.Fprintf(buf, "this.StringToBool = %#v\n", this.StringToBool)
		}
		if this.Complex128ToComplex64 != nil {
			fmt.Fprintf(buf, "this.Complex128ToComplex64 = %#v\n", this.Complex128ToComplex64)
		}
		if this.Float64ToUint32 != nil {
			fmt.Fprintf(buf, "this.Float64ToUint32 = %#v\n", this.Float64ToUint32)
		}
		if this.Uint16ToUint8 != nil {
			fmt.Fprintf(buf, "this.Uint16ToUint8 = %#v\n", this.Uint16ToUint8)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringSliceToSlice(this *SliceToSlice) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.SliceToSlice {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.SliceToSlice{}\n")
		if this.Ints != nil {
			fmt.Fprintf(buf, "this.Ints = %s\n", deriveGoString_36(this.Ints))
		}
		if this.Strings != nil {
			fmt.Fprintf(buf, "this.Strings = %s\n", deriveGoString_37(this.Strings))
		}
		if this.IntPtrs != nil {
			fmt.Fprintf(buf, "this.IntPtrs = %s\n", deriveGoString_38(this.IntPtrs))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringPtrTo(this *PtrTo) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.PtrTo {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.PtrTo{}\n")
		if this.Basic != nil {
			fmt.Fprintf(buf, "this.Basic = func (v int) *int { return &v }(%#v)\n", *this.Basic)
		}
		if this.Slice != nil {
			fmt.Fprintf(buf, "this.Slice = %s\n", deriveGoStringIntPtrSlice(this.Slice))
		}
		if this.Array != nil {
			fmt.Fprintf(buf, "this.Array = %s\n", deriveGoString_39(this.Array))
		}
		if this.Map != nil {
			fmt.Fprintf(buf, "this.Map = %s\n", deriveGoStringIntPtrMap(this.Map))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringName(this *Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.Name{}\n")
		fmt.Fprintf(buf, "this.Name = %#v\n", this.Name)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringStructs(this *Structs) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.Structs {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.Structs{}\n")
		fmt.Fprintf(buf, "this.Struct = %s\n", deriveGoString_N(this.Struct))
		if this.PtrToStruct != nil {
			fmt.Fprintf(buf, "this.PtrToStruct = %s\n", deriveGoStringName(this.PtrToStruct))
		}
		if this.SliceOfStructs != nil {
			fmt.Fprintf(buf, "this.SliceOfStructs = %s\n", deriveGoString_40(this.SliceOfStructs))
		}
		if this.SliceToPtrOfStruct != nil {
			fmt.Fprintf(buf, "this.SliceToPtrOfStruct = %s\n", deriveGoString_41(this.SliceToPtrOfStruct))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringMapWithStructs(this *MapWithStructs) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.MapWithStructs {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.MapWithStructs{}\n")
		if this.NameToString != nil {
			fmt.Fprintf(buf, "this.NameToString = %s\n", deriveGoString_42(this.NameToString))
		}
		if this.StringToName != nil {
			fmt.Fprintf(buf, "this.StringToName = %s\n", deriveGoString_43(this.StringToName))
		}
		if this.StringToPtrToName != nil {
			fmt.Fprintf(buf, "this.StringToPtrToName = %s\n", deriveGoString_44(this.StringToPtrToName))
		}
		if this.StringToSliceOfName != nil {
			fmt.Fprintf(buf, "this.StringToSliceOfName = %s\n", deriveGoString_45(this.StringToSliceOfName))
		}
		if this.StringToSliceOfPtrToName != nil {
			fmt.Fprintf(buf, "this.StringToSliceOfPtrToName = %s\n", deriveGoString_46(this.StringToSliceOfPtrToName))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringRecursiveType(this *RecursiveType) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.RecursiveType {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.RecursiveType{}\n")
		if this.Bytes != nil {
			fmt.Fprintf(buf, "this.Bytes = %#v\n", this.Bytes)
		}
		if this.N != nil {
			fmt.Fprintf(buf, "this.N = %s\n", deriveGoString_47(this.N))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringEmbeddedStruct1(this *EmbeddedStruct1) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.EmbeddedStruct1 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.EmbeddedStruct1{}\n")
		fmt.Fprintf(buf, "this.Name = %s\n", deriveGoString_N(this.Name))
		if this.Structs != nil {
			fmt.Fprintf(buf, "this.Structs = %s\n", deriveGoStringStructs(this.Structs))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringEmbeddedStruct2(this *EmbeddedStruct2) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.EmbeddedStruct2 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.EmbeddedStruct2{}\n")
		fmt.Fprintf(buf, "this.Structs = %s\n", deriveGoString_S(this.Structs))
		if this.Name != nil {
			fmt.Fprintf(buf, "this.Name = %s\n", deriveGoStringName(this.Name))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringStructWithStructFieldWithoutEqualMethod(this *StructWithStructFieldWithoutEqualMethod) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.StructWithStructFieldWithoutEqualMethod {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.StructWithStructFieldWithoutEqualMethod{}\n")
		if this.A != nil {
			fmt.Fprintf(buf, "this.A = %s\n", deriveGoString_48(this.A))
		}
		fmt.Fprintf(buf, "this.B = %s\n", deriveGoString_St(this.B))
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringStructWithStructWithFromAnotherPackage(this *StructWithStructWithFromAnotherPackage) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.StructWithStructWithFromAnotherPackage {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.StructWithStructWithFromAnotherPackage{}\n")
		if this.A != nil {
			fmt.Fprintf(buf, "this.A = %s\n", deriveGoString_49(this.A))
		}
		fmt.Fprintf(buf, "this.B = %s\n", deriveGoString_Str(this.B))
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringEnums(this *Enums) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.Enums {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.Enums{}\n")
		fmt.Fprintf(buf, "this.Enum = %#v\n", this.Enum)
		if this.PtrToEnum != nil {
			fmt.Fprintf(buf, "this.PtrToEnum = %s\n", deriveGoString_50(this.PtrToEnum))
		}
		if this.SliceToEnum != nil {
			fmt.Fprintf(buf, "this.SliceToEnum = %s\n", deriveGoString_51(this.SliceToEnum))
		}
		if this.SliceToPtrToEnum != nil {
			fmt.Fprintf(buf, "this.SliceToPtrToEnum = %s\n", deriveGoString_52(this.SliceToPtrToEnum))
		}
		if this.MapToEnum != nil {
			fmt.Fprintf(buf, "this.MapToEnum = %s\n", deriveGoString_53(this.MapToEnum))
		}
		if this.EnumToMap != nil {
			fmt.Fprintf(buf, "this.EnumToMap = %s\n", deriveGoString_54(this.EnumToMap))
		}
		fmt.Fprintf(buf, "this.ArrayEnum = %s\n", deriveGoString_55(this.ArrayEnum))
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringNamedTypes(this *NamedTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.NamedTypes {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.NamedTypes{}\n")
		if this.Slice != nil {
			fmt.Fprintf(buf, "this.Slice = %#v\n", this.Slice)
		}
		if this.PtrToSlice != nil {
			fmt.Fprintf(buf, "this.PtrToSlice = %s\n", deriveGoString_56(this.PtrToSlice))
		}
		if this.SliceToSlice != nil {
			fmt.Fprintf(buf, "this.SliceToSlice = %s\n", deriveGoString_57(this.SliceToSlice))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringDuration(this *Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.Duration {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.Duration{}\n")
		fmt.Fprintf(buf, "this.D = %#v\n", this.D)
		if this.P != nil {
			fmt.Fprintf(buf, "this.P = %s\n", deriveGoString_58(this.P))
		}
		if this.Ds != nil {
			fmt.Fprintf(buf, "this.Ds = %s\n", deriveGoString_59(this.Ds))
		}
		if this.DPs != nil {
			fmt.Fprintf(buf, "this.DPs = %s\n", deriveGoString_60(this.DPs))
		}
		if this.MD != nil {
			fmt.Fprintf(buf, "this.MD = %s\n", deriveGoString_61(this.MD))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntSlices(this []int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return %#v\n", this)
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntArray(this [10]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [10]int {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringMapOfIntToInt(this map[int]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[int]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return %#v\n", this)
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntPtr(this *int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(int)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntPtrSlice(this *[]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *[]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new([]int)\n")
		if *this != nil {
			fmt.Fprintf(buf, "*this = %#v\n", *this)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntPtrArray(this *[10]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *[10]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new([10]int)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringIntPtrMap(this *map[int]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *map[int]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(map[int]int)\n")
		if *this != nil {
			fmt.Fprintf(buf, "*this = %#v\n", *this)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoStringNoPointerStruct(this BuiltInTypes) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.BuiltInTypes {\n")
	fmt.Fprintf(buf, "this := &test.BuiltInTypes{}\n")
	fmt.Fprintf(buf, "this.Bool = %#v\n", this.Bool)
	fmt.Fprintf(buf, "this.Byte = %#v\n", this.Byte)
	fmt.Fprintf(buf, "this.Complex128 = %#v\n", this.Complex128)
	fmt.Fprintf(buf, "this.Complex64 = %#v\n", this.Complex64)
	fmt.Fprintf(buf, "this.Float64 = %#v\n", this.Float64)
	fmt.Fprintf(buf, "this.Float32 = %#v\n", this.Float32)
	fmt.Fprintf(buf, "this.Int = %#v\n", this.Int)
	fmt.Fprintf(buf, "this.Int16 = %#v\n", this.Int16)
	fmt.Fprintf(buf, "this.Int32 = %#v\n", this.Int32)
	fmt.Fprintf(buf, "this.Int64 = %#v\n", this.Int64)
	fmt.Fprintf(buf, "this.Int8 = %#v\n", this.Int8)
	fmt.Fprintf(buf, "this.Rune = %#v\n", this.Rune)
	fmt.Fprintf(buf, "this.String = %#v\n", this.String)
	fmt.Fprintf(buf, "this.Uint = %#v\n", this.Uint)
	fmt.Fprintf(buf, "this.Uint16 = %#v\n", this.Uint16)
	fmt.Fprintf(buf, "this.Uint32 = %#v\n", this.Uint32)
	fmt.Fprintf(buf, "this.Uint64 = %#v\n", this.Uint64)
	fmt.Fprintf(buf, "this.Uint8 = %#v\n", this.Uint8)
	fmt.Fprintf(buf, "this.UintPtr = %#v\n", this.UintPtr)
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveContainsInt64s(list []int64, item int64) bool {
	for _, v := range list {
		if v == item {
			return true
		}
	}
	return false
}

func deriveContainsStruct(list []*BuiltInTypes, item *BuiltInTypes) bool {
	for _, v := range list {
		if deriveEqualPtrToBuiltInTypes(v, item) {
			return true
		}
	}
	return false
}

func deriveUncurryMarshal(f func(data []byte) func(v interface{}) error) func(data []byte, v interface{}) error {
	return func(data []byte, v interface{}) error {
		return f(data)(v)
	}
}

func deriveUncurry3(f func(a int) func(b string, c bool) string) func(a int, b string, c bool) string {
	return func(a int, b string, c bool) string {
		return f(a)(b, c)
	}
}

func deriveUncurryCurried(f func(b string) func(c bool) string) func(b string, c bool) string {
	return func(b string, c bool) string {
		return f(b)(c)
	}
}

func deriveCompose(f func() (string, error), g func(string) (float64, error)) (float64, error) {
	b0, err := f()
	if err != nil {
		return 0, err
	}
	return g(b0)
}

func deriveComposeA(f func(string) (string, error), g func(string) (float64, error)) func(string) (float64, error) {
	return func(a0 string) (float64, error) {
		b0, err := f(a0)
		if err != nil {
			return 0, err
		}
		return g(b0)
	}
}

func deriveCompose2(f func(string, string) ([]string, string, error), g func([]string, string) (float64, error)) func(string, string) (float64, error) {
	return func(a0 string, a1 string) (float64, error) {
		b0, b1, err := f(a0, a1)
		if err != nil {
			return 0, err
		}
		return g(b0, b1)
	}
}

func deriveComparePtrToEmpty(this, that *Empty) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return 0
}

func deriveComparePtrToBuiltInTypes(this, that *BuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareComplex64(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareComplex32(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_f(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_fl(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_i(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_in(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_int6(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_int8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := strings.Compare(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_u(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_ui(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_uin(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_uint(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_1(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPrivateBuiltInTypes(this, that *PrivateBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare(this.privateBool, that.privateBool); c != 0 {
		return c
	}
	if c := deriveCompare_(this.privateByte, that.privateByte); c != 0 {
		return c
	}
	if c := deriveCompareComplex64(this.privateComplex128, that.privateComplex128); c != 0 {
		return c
	}
	if c := deriveCompareComplex32(this.privateComplex64, that.privateComplex64); c != 0 {
		return c
	}
	if c := deriveCompare_f(this.privateFloat64, that.privateFloat64); c != 0 {
		return c
	}
	if c := deriveCompare_fl(this.privateFloat32, that.privateFloat32); c != 0 {
		return c
	}
	if c := deriveCompare_i(this.privateInt, that.privateInt); c != 0 {
		return c
	}
	if c := deriveCompare_in(this.privateInt16, that.privateInt16); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.privateInt32, that.privateInt32); c != 0 {
		return c
	}
	if c := deriveCompare_int6(this.privateInt64, that.privateInt64); c != 0 {
		return c
	}
	if c := deriveCompare_int8(this.privateInt8, that.privateInt8); c != 0 {
		return c
	}
	if c := deriveCompare_int(this.privateRune, that.privateRune); c != 0 {
		return c
	}
	if c := strings.Compare(this.privateString, that.privateString); c != 0 {
		return c
	}
	if c := deriveCompare_u(this.privateUint, that.privateUint); c != 0 {
		return c
	}
	if c := deriveCompare_ui(this.privateUint16, that.privateUint16); c != 0 {
		return c
	}
	if c := deriveCompare_uin(this.privateUint32, that.privateUint32); c != 0 {
		return c
	}
	if c := deriveCompare_uint(this.privateUint64, that.privateUint64); c != 0 {
		return c
	}
	if c := deriveCompare_(this.privateUint8, that.privateUint8); c != 0 {
		return c
	}
	if c := deriveCompare_1(this.privateUintPtr, that.privateUintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_2(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_3(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_4(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_5(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_6(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_7(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_8(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_9(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_10(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_11(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_12(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_10(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_13(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_14(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_15(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_16(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_17(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_3(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_18(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_19(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_20(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_21(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_22(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_23(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_24(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_25(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_26(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_27(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_28(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_26(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_29(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_30(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_31(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_33(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_34(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_35(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_36(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_37(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_38(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_39(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_40(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_41(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_42(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_43(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_44(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_45(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_43(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_46(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_47(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_48(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_49(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_50(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_36(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_51(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_52(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_53(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_54(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_55(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_56(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_57(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_58(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_59(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_60(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_61(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_62(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_63(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_64(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_65(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_66(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_67(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_68(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_69(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_70(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompare_71(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_72(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompare_73(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompare_74(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompare_75(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompare_76(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompare_77(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompare_78(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompare_79(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompare_80(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompare_81(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompare_82(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompare_83(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompare_84(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompare_85(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompare_86(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompare_87(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompare_88(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompare_89(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompare_90(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompare_91(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_92(this.StringToUint32, that.StringToUint32); c != 0 {
		return c
	}
	if c := deriveCompare_93(this.Uint64ToInt64, that.Uint64ToInt64); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_94(this.BoolToString, that.BoolToString); c != 0 {
		return c
	}
	if c := deriveCompare_95(this.StringToBool, that.StringToBool); c != 0 {
		return c
	}
	if c := deriveCompare_96(this.Complex128ToComplex64, that.Complex128ToComplex64); c != 0 {
		return c
	}
	if c := deriveCompare_97(this.Float64ToUint32, that.Float64ToUint32); c != 0 {
		return c
	}
	if c := deriveCompare_98(this.Uint16ToUint8, that.Uint16ToUint8); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceToSlice(this, that *SliceToSlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_99(this.Ints, that.Ints); c != 0 {
		return c
	}
	if c := deriveCompare_100(this.Strings, that.Strings); c != 0 {
		return c
	}
	if c := deriveCompare_101(this.IntPtrs, that.IntPtrs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrTo(this, that *PtrTo) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_8(this.Basic, that.Basic); c != 0 {
		return c
	}
	if c := deriveCompare_102(this.Slice, that.Slice); c != 0 {
		return c
	}
	if c := deriveCompare_103(this.Array, that.Array); c != 0 {
		return c
	}
	if c := deriveCompare_104(this.Map, that.Map); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToName(this, that *Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := strings.Compare(this.Name, that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructs(this, that *Structs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Struct.Compare(&that.Struct); c != 0 {
		return c
	}
	if c := this.PtrToStruct.Compare(that.PtrToStruct); c != 0 {
		return c
	}
	if c := deriveCompare_105(this.SliceOfStructs, that.SliceOfStructs); c != 0 {
		return c
	}
	if c := deriveCompare_106(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapWithStructs(this, that *MapWithStructs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_107(this.NameToString, that.NameToString); c != 0 {
		return c
	}
	if c := deriveCompare_108(this.StringToName, that.StringToName); c != 0 {
		return c
	}
	if c := deriveCompare_109(this.StringToPtrToName, that.StringToPtrToName); c != 0 {
		return c
	}
	if c := deriveCompare_110(this.StringToSliceOfName, that.StringToSliceOfName); c != 0 {
		return c
	}
	if c := deriveCompare_111(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToRecursiveType(this, that *RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := bytes.Compare(this.Bytes, that.Bytes); c != 0 {
		return c
	}
	if c := deriveCompare_112(this.N, that.N); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct1(this, that *EmbeddedStruct1) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Name.Compare(&that.Name); c != 0 {
		return c
	}
	if c := this.Structs.Compare(that.Structs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct2(this, that *EmbeddedStruct2) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Structs.Compare(&that.Structs); c != 0 {
		return c
	}
	if c := this.Name.Compare(that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_113(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveCompare_113(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_114(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveCompare_114(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_115(this.A, that.A); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEnums(this, that *Enums) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_M(this.Enum, that.Enum); c != 0 {
		return c
	}
	if c := deriveCompare_116(this.PtrToEnum, that.PtrToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_117(this.SliceToEnum, that.SliceToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_118(this.SliceToPtrToEnum, that.SliceToPtrToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_119(this.MapToEnum, that.MapToEnum); c != 0 {
		return c
	}
	if c := deriveCompare_120(this.EnumToMap, that.EnumToMap); c != 0 {
		return c
	}
	if c := deriveCompare_121(this.ArrayEnum, that.ArrayEnum); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToNamedTypes(this, that *NamedTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_27(this.Slice, that.Slice); c != 0 {
		return c
	}
	if c := deriveCompare_122(this.PtrToSlice, that.PtrToSlice); c != 0 {
		return c
	}
	if c := deriveCompare_123(this.SliceToSlice, that.SliceToSlice); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToDuration(this, that *Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_D(this.D, that.D); c != 0 {
		return c
	}
	if c := deriveCompare_124(this.P, that.P); c != 0 {
		return c
	}
	if c := deriveCompare_125(this.Ds, that.Ds); c != 0 {
		return c
	}
	if c := deriveCompare_126(this.DPs, that.DPs); c != 0 {
		return c
	}
	if c := deriveCompare_127(this.MD, that.MD); c != 0 {
		return c
	}
	return 0
}

func deriveCompareComplex32(this, that complex64) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareComplex64(this, that complex128) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareDeriveTheDerived(this, that *DeriveTheDerived) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_i(this.Field, that.Field); c != 0 {
		return c
	}
	return 0
}

func deriveUniqueInt64s(list []int64) []int64 {
	if len(list) == 0 {
		return nil
	}
	u := 1
	for i := 1; i < len(list); i++ {
		if !deriveContainsInt64s(list[:u], list[i]) {
			if i != u {
				list[u] = list[i]
			}
			u++
		}
	}
	return list[:u]
}

func deriveUniqueStructs(list []*BuiltInTypes) []*BuiltInTypes {
	if len(list) == 0 {
		return nil
	}
	u := 1
	for i := 1; i < len(list); i++ {
		if !deriveContainsStruct(list[:u], list[i]) {
			if i != u {
				list[u] = list[i]
			}
			u++
		}
	}
	return list[:u]
}

func deriveFilter(pred func(int) bool, list []int) []int {
	out := make([]int, 0, len(list))
	for i, elem := range list {
		if pred(elem) {
			out = append(out, list[i])
		}
	}
	return out
}

func deriveFilterJudy(pred func(string) bool, list []string) []string {
	out := make([]string, 0, len(list))
	for i, elem := range list {
		if pred(elem) {
			out = append(out, list[i])
		}
	}
	return out
}

// deriveCopyToPtrToEmpty recursively copies the contents of src into dst.
func deriveCopyToPtrToEmpty(src, dst *Empty) {
}

// deriveCopyToPtrToBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToBuiltInTypes(src, dst *BuiltInTypes) {
	dst.Bool = src.Bool
	dst.Byte = src.Byte
	dst.Complex128 = src.Complex128
	dst.Complex64 = src.Complex64
	dst.Float64 = src.Float64
	dst.Float32 = src.Float32
	dst.Int = src.Int
	dst.Int16 = src.Int16
	dst.Int32 = src.Int32
	dst.Int64 = src.Int64
	dst.Int8 = src.Int8
	dst.Rune = src.Rune
	dst.String = src.String
	dst.Uint = src.Uint
	dst.Uint16 = src.Uint16
	dst.Uint32 = src.Uint32
	dst.Uint64 = src.Uint64
	dst.Uint8 = src.Uint8
	dst.UintPtr = src.UintPtr
}

// deriveCopyToPtrToPrivateBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToPrivateBuiltInTypes(src, dst *PrivateBuiltInTypes) {
	dst.privateBool = src.privateBool
	dst.privateByte = src.privateByte
	dst.privateComplex128 = src.privateComplex128
	dst.privateComplex64 = src.privateComplex64
	dst.privateFloat64 = src.privateFloat64
	dst.privateFloat32 = src.privateFloat32
	dst.privateInt = src.privateInt
	dst.privateInt16 = src.privateInt16
	dst.privateInt32 = src.privateInt32
	dst.privateInt64 = src.privateInt64
	dst.privateInt8 = src.privateInt8
	dst.privateRune = src.privateRune
	dst.privateString = src.privateString
	dst.privateUint = src.privateUint
	dst.privateUint16 = src.privateUint16
	dst.privateUint32 = src.privateUint32
	dst.privateUint64 = src.privateUint64
	dst.privateUint8 = src.privateUint8
	dst.privateUintPtr = src.privateUintPtr
}

// deriveCopyToPtrToPtrToBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToPtrToBuiltInTypes(src, dst *PtrToBuiltInTypes) {
	if src.Bool == nil {
		dst.Bool = nil
	} else {
		dst.Bool = new(bool)
		*dst.Bool = *src.Bool
	}
	if src.Byte == nil {
		dst.Byte = nil
	} else {
		dst.Byte = new(byte)
		*dst.Byte = *src.Byte
	}
	if src.Complex128 == nil {
		dst.Complex128 = nil
	} else {
		dst.Complex128 = new(complex128)
		*dst.Complex128 = *src.Complex128
	}
	if src.Complex64 == nil {
		dst.Complex64 = nil
	} else {
		dst.Complex64 = new(complex64)
		*dst.Complex64 = *src.Complex64
	}
	if src.Float64 == nil {
		dst.Float64 = nil
	} else {
		dst.Float64 = new(float64)
		*dst.Float64 = *src.Float64
	}
	if src.Float32 == nil {
		dst.Float32 = nil
	} else {
		dst.Float32 = new(float32)
		*dst.Float32 = *src.Float32
	}
	if src.Int == nil {
		dst.Int = nil
	} else {
		dst.Int = new(int)
		*dst.Int = *src.Int
	}
	if src.Int16 == nil {
		dst.Int16 = nil
	} else {
		dst.Int16 = new(int16)
		*dst.Int16 = *src.Int16
	}
	if src.Int32 == nil {
		dst.Int32 = nil
	} else {
		dst.Int32 = new(int32)
		*dst.Int32 = *src.Int32
	}
	if src.Int64 == nil {
		dst.Int64 = nil
	} else {
		dst.Int64 = new(int64)
		*dst.Int64 = *src.Int64
	}
	if src.Int8 == nil {
		dst.Int8 = nil
	} else {
		dst.Int8 = new(int8)
		*dst.Int8 = *src.Int8
	}
	if src.Rune == nil {
		dst.Rune = nil
	} else {
		dst.Rune = new(rune)
		*dst.Rune = *src.Rune
	}
	if src.String == nil {
		dst.String = nil
	} else {
		dst.String = new(string)
		*dst.String = *src.String
	}
	if src.Uint == nil {
		dst.Uint = nil
	} else {
		dst.Uint = new(uint)
		*dst.Uint = *src.Uint
	}
	if src.Uint16 == nil {
		dst.Uint16 = nil
	} else {
		dst.Uint16 = new(uint16)
		*dst.Uint16 = *src.Uint16
	}
	if src.Uint32 == nil {
		dst.Uint32 = nil
	} else {
		dst.Uint32 = new(uint32)
		*dst.Uint32 = *src.Uint32
	}
	if src.Uint64 == nil {
		dst.Uint64 = nil
	} else {
		dst.Uint64 = new(uint64)
		*dst.Uint64 = *src.Uint64
	}
	if src.Uint8 == nil {
		dst.Uint8 = nil
	} else {
		dst.Uint8 = new(uint8)
		*dst.Uint8 = *src.Uint8
	}
	if src.UintPtr == nil {
		dst.UintPtr = nil
	} else {
		dst.UintPtr = new(uintptr)
		*dst.UintPtr = *src.UintPtr
	}
}

// deriveCopyToPtrToSliceOfBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToSliceOfBuiltInTypes(src, dst *SliceOfBuiltInTypes) {
	if src.Bool == nil {
		dst.Bool = nil
	} else {
		if dst.Bool != nil {
			if len(src.Bool) > len(dst.Bool) {
				if cap(dst.Bool) >= len(src.Bool) {
					dst.Bool = (dst.Bool)[:len(src.Bool)]
				} else {
					dst.Bool = make([]bool, len(src.Bool))
				}
			} else if len(src.Bool) < len(dst.Bool) {
				dst.Bool = (dst.Bool)[:len(src.Bool)]
			}
		} else {
			dst.Bool = make([]bool, len(src.Bool))
		}
		copy(dst.Bool, src.Bool)
	}
	if src.Byte == nil {
		dst.Byte = nil
	} else {
		if dst.Byte != nil {
			if len(src.Byte) > len(dst.Byte) {
				if cap(dst.Byte) >= len(src.Byte) {
					dst.Byte = (dst.Byte)[:len(src.Byte)]
				} else {
					dst.Byte = make([]byte, len(src.Byte))
				}
			} else if len(src.Byte) < len(dst.Byte) {
				dst.Byte = (dst.Byte)[:len(src.Byte)]
			}
		} else {
			dst.Byte = make([]byte, len(src.Byte))
		}
		copy(dst.Byte, src.Byte)
	}
	if src.Complex128 == nil {
		dst.Complex128 = nil
	} else {
		if dst.Complex128 != nil {
			if len(src.Complex128) > len(dst.Complex128) {
				if cap(dst.Complex128) >= len(src.Complex128) {
					dst.Complex128 = (dst.Complex128)[:len(src.Complex128)]
				} else {
					dst.Complex128 = make([]complex128, len(src.Complex128))
				}
			} else if len(src.Complex128) < len(dst.Complex128) {
				dst.Complex128 = (dst.Complex128)[:len(src.Complex128)]
			}
		} else {
			dst.Complex128 = make([]complex128, len(src.Complex128))
		}
		copy(dst.Complex128, src.Complex128)
	}
	if src.Complex64 == nil {
		dst.Complex64 = nil
	} else {
		if dst.Complex64 != nil {
			if len(src.Complex64) > len(dst.Complex64) {
				if cap(dst.Complex64) >= len(src.Complex64) {
					dst.Complex64 = (dst.Complex64)[:len(src.Complex64)]
				} else {
					dst.Complex64 = make([]complex64, len(src.Complex64))
				}
			} else if len(src.Complex64) < len(dst.Complex64) {
				dst.Complex64 = (dst.Complex64)[:len(src.Complex64)]
			}
		} else {
			dst.Complex64 = make([]complex64, len(src.Complex64))
		}
		copy(dst.Complex64, src.Complex64)
	}
	if src.Float64 == nil {
		dst.Float64 = nil
	} else {
		if dst.Float64 != nil {
			if len(src.Float64) > len(dst.Float64) {
				if cap(dst.Float64) >= len(src.Float64) {
					dst.Float64 = (dst.Float64)[:len(src.Float64)]
				} else {
					dst.Float64 = make([]float64, len(src.Float64))
				}
			} else if len(src.Float64) < len(dst.Float64) {
				dst.Float64 = (dst.Float64)[:len(src.Float64)]
			}
		} else {
			dst.Float64 = make([]float64, len(src.Float64))
		}
		copy(dst.Float64, src.Float64)
	}
	if src.Float32 == nil {
		dst.Float32 = nil
	} else {
		if dst.Float32 != nil {
			if len(src.Float32) > len(dst.Float32) {
				if cap(dst.Float32) >= len(src.Float32) {
					dst.Float32 = (dst.Float32)[:len(src.Float32)]
				} else {
					dst.Float32 = make([]float32, len(src.Float32))
				}
			} else if len(src.Float32) < len(dst.Float32) {
				dst.Float32 = (dst.Float32)[:len(src.Float32)]
			}
		} else {
			dst.Float32 = make([]float32, len(src.Float32))
		}
		copy(dst.Float32, src.Float32)
	}
	if src.Int == nil {
		dst.Int = nil
	} else {
		if dst.Int != nil {
			if len(src.Int) > len(dst.Int) {
				if cap(dst.Int) >= len(src.Int) {
					dst.Int = (dst.Int)[:len(src.Int)]
				} else {
					dst.Int = make([]int, len(src.Int))
				}
			} else if len(src.Int) < len(dst.Int) {
				dst.Int = (dst.Int)[:len(src.Int)]
			}
		} else {
			dst.Int = make([]int, len(src.Int))
		}
		copy(dst.Int, src.Int)
	}
	if src.Int16 == nil {
		dst.Int16 = nil
	} else {
		if dst.Int16 != nil {
			if len(src.Int16) > len(dst.Int16) {
				if cap(dst.Int16) >= len(src.Int16) {
					dst.Int16 = (dst.Int16)[:len(src.Int16)]
				} else {
					dst.Int16 = make([]int16, len(src.Int16))
				}
			} else if len(src.Int16) < len(dst.Int16) {
				dst.Int16 = (dst.Int16)[:len(src.Int16)]
			}
		} else {
			dst.Int16 = make([]int16, len(src.Int16))
		}
		copy(dst.Int16, src.Int16)
	}
	if src.Int32 == nil {
		dst.Int32 = nil
	} else {
		if dst.Int32 != nil {
			if len(src.Int32) > len(dst.Int32) {
				if cap(dst.Int32) >= len(src.Int32) {
					dst.Int32 = (dst.Int32)[:len(src.Int32)]
				} else {
					dst.Int32 = make([]int32, len(src.Int32))
				}
			} else if len(src.Int32) < len(dst.Int32) {
				dst.Int32 = (dst.Int32)[:len(src.Int32)]
			}
		} else {
			dst.Int32 = make([]int32, len(src.Int32))
		}
		copy(dst.Int32, src.Int32)
	}
	if src.Int64 == nil {
		dst.Int64 = nil
	} else {
		if dst.Int64 != nil {
			if len(src.Int64) > len(dst.Int64) {
				if cap(dst.Int64) >= len(src.Int64) {
					dst.Int64 = (dst.Int64)[:len(src.Int64)]
				} else {
					dst.Int64 = make([]int64, len(src.Int64))
				}
			} else if len(src.Int64) < len(dst.Int64) {
				dst.Int64 = (dst.Int64)[:len(src.Int64)]
			}
		} else {
			dst.Int64 = make([]int64, len(src.Int64))
		}
		copy(dst.Int64, src.Int64)
	}
	if src.Int8 == nil {
		dst.Int8 = nil
	} else {
		if dst.Int8 != nil {
			if len(src.Int8) > len(dst.Int8) {
				if cap(dst.Int8) >= len(src.Int8) {
					dst.Int8 = (dst.Int8)[:len(src.Int8)]
				} else {
					dst.Int8 = make([]int8, len(src.Int8))
				}
			} else if len(src.Int8) < len(dst.Int8) {
				dst.Int8 = (dst.Int8)[:len(src.Int8)]
			}
		} else {
			dst.Int8 = make([]int8, len(src.Int8))
		}
		copy(dst.Int8, src.Int8)
	}
	if src.Rune == nil {
		dst.Rune = nil
	} else {
		if dst.Rune != nil {
			if len(src.Rune) > len(dst.Rune) {
				if cap(dst.Rune) >= len(src.Rune) {
					dst.Rune = (dst.Rune)[:len(src.Rune)]
				} else {
					dst.Rune = make([]rune, len(src.Rune))
				}
			} else if len(src.Rune) < len(dst.Rune) {
				dst.Rune = (dst.Rune)[:len(src.Rune)]
			}
		} else {
			dst.Rune = make([]rune, len(src.Rune))
		}
		copy(dst.Rune, src.Rune)
	}
	if src.String == nil {
		dst.String = nil
	} else {
		if dst.String != nil {
			if len(src.String) > len(dst.String) {
				if cap(dst.String) >= len(src.String) {
					dst.String = (dst.String)[:len(src.String)]
				} else {
					dst.String = make([]string, len(src.String))
				}
			} else if len(src.String) < len(dst.String) {
				dst.String = (dst.String)[:len(src.String)]
			}
		} else {
			dst.String = make([]string, len(src.String))
		}
		copy(dst.String, src.String)
	}
	if src.Uint == nil {
		dst.Uint = nil
	} else {
		if dst.Uint != nil {
			if len(src.Uint) > len(dst.Uint) {
				if cap(dst.Uint) >= len(src.Uint) {
					dst.Uint = (dst.Uint)[:len(src.Uint)]
				} else {
					dst.Uint = make([]uint, len(src.Uint))
				}
			} else if len(src.Uint) < len(dst.Uint) {
				dst.Uint = (dst.Uint)[:len(src.Uint)]
			}
		} else {
			dst.Uint = make([]uint, len(src.Uint))
		}
		copy(dst.Uint, src.Uint)
	}
	if src.Uint16 == nil {
		dst.Uint16 = nil
	} else {
		if dst.Uint16 != nil {
			if len(src.Uint16) > len(dst.Uint16) {
				if cap(dst.Uint16) >= len(src.Uint16) {
					dst.Uint16 = (dst.Uint16)[:len(src.Uint16)]
				} else {
					dst.Uint16 = make([]uint16, len(src.Uint16))
				}
			} else if len(src.Uint16) < len(dst.Uint16) {
				dst.Uint16 = (dst.Uint16)[:len(src.Uint16)]
			}
		} else {
			dst.Uint16 = make([]uint16, len(src.Uint16))
		}
		copy(dst.Uint16, src.Uint16)
	}
	if src.Uint32 == nil {
		dst.Uint32 = nil
	} else {
		if dst.Uint32 != nil {
			if len(src.Uint32) > len(dst.Uint32) {
				if cap(dst.Uint32) >= len(src.Uint32) {
					dst.Uint32 = (dst.Uint32)[:len(src.Uint32)]
				} else {
					dst.Uint32 = make([]uint32, len(src.Uint32))
				}
			} else if len(src.Uint32) < len(dst.Uint32) {
				dst.Uint32 = (dst.Uint32)[:len(src.Uint32)]
			}
		} else {
			dst.Uint32 = make([]uint32, len(src.Uint32))
		}
		copy(dst.Uint32, src.Uint32)
	}
	if src.Uint64 == nil {
		dst.Uint64 = nil
	} else {
		if dst.Uint64 != nil {
			if len(src.Uint64) > len(dst.Uint64) {
				if cap(dst.Uint64) >= len(src.Uint64) {
					dst.Uint64 = (dst.Uint64)[:len(src.Uint64)]
				} else {
					dst.Uint64 = make([]uint64, len(src.Uint64))
				}
			} else if len(src.Uint64) < len(dst.Uint64) {
				dst.Uint64 = (dst.Uint64)[:len(src.Uint64)]
			}
		} else {
			dst.Uint64 = make([]uint64, len(src.Uint64))
		}
		copy(dst.Uint64, src.Uint64)
	}
	if src.Uint8 == nil {
		dst.Uint8 = nil
	} else {
		if dst.Uint8 != nil {
			if len(src.Uint8) > len(dst.Uint8) {
				if cap(dst.Uint8) >= len(src.Uint8) {
					dst.Uint8 = (dst.Uint8)[:len(src.Uint8)]
				} else {
					dst.Uint8 = make([]uint8, len(src.Uint8))
				}
			} else if len(src.Uint8) < len(dst.Uint8) {
				dst.Uint8 = (dst.Uint8)[:len(src.Uint8)]
			}
		} else {
			dst.Uint8 = make([]uint8, len(src.Uint8))
		}
		copy(dst.Uint8, src.Uint8)
	}
	if src.UintPtr == nil {
		dst.UintPtr = nil
	} else {
		if dst.UintPtr != nil {
			if len(src.UintPtr) > len(dst.UintPtr) {
				if cap(dst.UintPtr) >= len(src.UintPtr) {
					dst.UintPtr = (dst.UintPtr)[:len(src.UintPtr)]
				} else {
					dst.UintPtr = make([]uintptr, len(src.UintPtr))
				}
			} else if len(src.UintPtr) < len(dst.UintPtr) {
				dst.UintPtr = (dst.UintPtr)[:len(src.UintPtr)]
			}
		} else {
			dst.UintPtr = make([]uintptr, len(src.UintPtr))
		}
		copy(dst.UintPtr, src.UintPtr)
	}
}

// deriveCopyToPtrToSliceOfPtrToBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToSliceOfPtrToBuiltInTypes(src, dst *SliceOfPtrToBuiltInTypes) {
	if src.Bool == nil {
		dst.Bool = nil
	} else {
		if dst.Bool != nil {
			if len(src.Bool) > len(dst.Bool) {
				if cap(dst.Bool) >= len(src.Bool) {
					dst.Bool = (dst.Bool)[:len(src.Bool)]
				} else {
					dst.Bool = make([]*bool, len(src.Bool))
				}
			} else if len(src.Bool) < len(dst.Bool) {
				dst.Bool = (dst.Bool)[:len(src.Bool)]
			}
		} else {
			dst.Bool = make([]*bool, len(src.Bool))
		}
		deriveCopyTo(src.Bool, dst.Bool)
	}
	if src.Byte == nil {
		dst.Byte = nil
	} else {
		if dst.Byte != nil {
			if len(src.Byte) > len(dst.Byte) {
				if cap(dst.Byte) >= len(src.Byte) {
					dst.Byte = (dst.Byte)[:len(src.Byte)]
				} else {
					dst.Byte = make([]*byte, len(src.Byte))
				}
			} else if len(src.Byte) < len(dst.Byte) {
				dst.Byte = (dst.Byte)[:len(src.Byte)]
			}
		} else {
			dst.Byte = make([]*byte, len(src.Byte))
		}
		deriveCopyTo_(src.Byte, dst.Byte)
	}
	if src.Complex128 == nil {
		dst.Complex128 = nil
	} else {
		if dst.Complex128 != nil {
			if len(src.Complex128) > len(dst.Complex128) {
				if cap(dst.Complex128) >= len(src.Complex128) {
					dst.Complex128 = (dst.Complex128)[:len(src.Complex128)]
				} else {
					dst.Complex128 = make([]*complex128, len(src.Complex128))
				}
			} else if len(src.Complex128) < len(dst.Complex128) {
				dst.Complex128 = (dst.Complex128)[:len(src.Complex128)]
			}
		} else {
			dst.Complex128 = make([]*complex128, len(src.Complex128))
		}
		deriveCopyTo_1(src.Complex128, dst.Complex128)
	}
	if src.Complex64 == nil {
		dst.Complex64 = nil
	} else {
		if dst.Complex64 != nil {
			if len(src.Complex64) > len(dst.Complex64) {
				if cap(dst.Complex64) >= len(src.Complex64) {
					dst.Complex64 = (dst.Complex64)[:len(src.Complex64)]
				} else {
					dst.Complex64 = make([]*complex64, len(src.Complex64))
				}
			} else if len(src.Complex64) < len(dst.Complex64) {
				dst.Complex64 = (dst.Complex64)[:len(src.Complex64)]
			}
		} else {
			dst.Complex64 = make([]*complex64, len(src.Complex64))
		}
		deriveCopyTo_2(src.Complex64, dst.Complex64)
	}
	if src.Float64 == nil {
		dst.Float64 = nil
	} else {
		if dst.Float64 != nil {
			if len(src.Float64) > len(dst.Float64) {
				if cap(dst.Float64) >= len(src.Float64) {
					dst.Float64 = (dst.Float64)[:len(src.Float64)]
				} else {
					dst.Float64 = make([]*float64, len(src.Float64))
				}
			} else if len(src.Float64) < len(dst.Float64) {
				dst.Float64 = (dst.Float64)[:len(src.Float64)]
			}
		} else {
			dst.Float64 = make([]*float64, len(src.Float64))
		}
		deriveCopyTo_3(src.Float64, dst.Float64)
	}
	if src.Float32 == nil {
		dst.Float32 = nil
	} else {
		if dst.Float32 != nil {
			if len(src.Float32) > len(dst.Float32) {
				if cap(dst.Float32) >= len(src.Float32) {
					dst.Float32 = (dst.Float32)[:len(src.Float32)]
				} else {
					dst.Float32 = make([]*float32, len(src.Float32))
				}
			} else if len(src.Float32) < len(dst.Float32) {
				dst.Float32 = (dst.Float32)[:len(src.Float32)]
			}
		} else {
			dst.Float32 = make([]*float32, len(src.Float32))
		}
		deriveCopyTo_4(src.Float32, dst.Float32)
	}
	if src.Int == nil {
		dst.Int = nil
	} else {
		if dst.Int != nil {
			if len(src.Int) > len(dst.Int) {
				if cap(dst.Int) >= len(src.Int) {
					dst.Int = (dst.Int)[:len(src.Int)]
				} else {
					dst.Int = make([]*int, len(src.Int))
				}
			} else if len(src.Int) < len(dst.Int) {
				dst.Int = (dst.Int)[:len(src.Int)]
			}
		} else {
			dst.Int = make([]*int, len(src.Int))
		}
		deriveCopyTo_5(src.Int, dst.Int)
	}
	if src.Int16 == nil {
		dst.Int16 = nil
	} else {
		if dst.Int16 != nil {
			if len(src.Int16) > len(dst.Int16) {
				if cap(dst.Int16) >= len(src.Int16) {
					dst.Int16 = (dst.Int16)[:len(src.Int16)]
				} else {
					dst.Int16 = make([]*int16, len(src.Int16))
				}
			} else if len(src.Int16) < len(dst.Int16) {
				dst.Int16 = (dst.Int16)[:len(src.Int16)]
			}
		} else {
			dst.Int16 = make([]*int16, len(src.Int16))
		}
		deriveCopyTo_6(src.Int16, dst.Int16)
	}
	if src.Int32 == nil {
		dst.Int32 = nil
	} else {
		if dst.Int32 != nil {
			if len(src.Int32) > len(dst.Int32) {
				if cap(dst.Int32) >= len(src.Int32) {
					dst.Int32 = (dst.Int32)[:len(src.Int32)]
				} else {
					dst.Int32 = make([]*int32, len(src.Int32))
				}
			} else if len(src.Int32) < len(dst.Int32) {
				dst.Int32 = (dst.Int32)[:len(src.Int32)]
			}
		} else {
			dst.Int32 = make([]*int32, len(src.Int32))
		}
		deriveCopyTo_7(src.Int32, dst.Int32)
	}
	if src.Int64 == nil {
		dst.Int64 = nil
	} else {
		if dst.Int64 != nil {
			if len(src.Int64) > len(dst.Int64) {
				if cap(dst.Int64) >= len(src.Int64) {
					dst.Int64 = (dst.Int64)[:len(src.Int64)]
				} else {
					dst.Int64 = make([]*int64, len(src.Int64))
				}
			} else if len(src.Int64) < len(dst.Int64) {
				dst.Int64 = (dst.Int64)[:len(src.Int64)]
			}
		} else {
			dst.Int64 = make([]*int64, len(src.Int64))
		}
		deriveCopyTo_8(src.Int64, dst.Int64)
	}
	if src.Int8 == nil {
		dst.Int8 = nil
	} else {
		if dst.Int8 != nil {
			if len(src.Int8) > len(dst.Int8) {
				if cap(dst.Int8) >= len(src.Int8) {
					dst.Int8 = (dst.Int8)[:len(src.Int8)]
				} else {
					dst.Int8 = make([]*int8, len(src.Int8))
				}
			} else if len(src.Int8) < len(dst.Int8) {
				dst.Int8 = (dst.Int8)[:len(src.Int8)]
			}
		} else {
			dst.Int8 = make([]*int8, len(src.Int8))
		}
		deriveCopyTo_9(src.Int8, dst.Int8)
	}
	if src.Rune == nil {
		dst.Rune = nil
	} else {
		if dst.Rune != nil {
			if len(src.Rune) > len(dst.Rune) {
				if cap(dst.Rune) >= len(src.Rune) {
					dst.Rune = (dst.Rune)[:len(src.Rune)]
				} else {
					dst.Rune = make([]*rune, len(src.Rune))
				}
			} else if len(src.Rune) < len(dst.Rune) {
				dst.Rune = (dst.Rune)[:len(src.Rune)]
			}
		} else {
			dst.Rune = make([]*rune, len(src.Rune))
		}
		deriveCopyTo_7(src.Rune, dst.Rune)
	}
	if src.String == nil {
		dst.String = nil
	} else {
		if dst.String != nil {
			if len(src.String) > len(dst.String) {
				if cap(dst.String) >= len(src.String) {
					dst.String = (dst.String)[:len(src.String)]
				} else {
					dst.String = make([]*string, len(src.String))
				}
			} else if len(src.String) < len(dst.String) {
				dst.String = (dst.String)[:len(src.String)]
			}
		} else {
			dst.String = make([]*string, len(src.String))
		}
		deriveCopyTo_10(src.String, dst.String)
	}
	if src.Uint == nil {
		dst.Uint = nil
	} else {
		if dst.Uint != nil {
			if len(src.Uint) > len(dst.Uint) {
				if cap(dst.Uint) >= len(src.Uint) {
					dst.Uint = (dst.Uint)[:len(src.Uint)]
				} else {
					dst.Uint = make([]*uint, len(src.Uint))
				}
			} else if len(src.Uint) < len(dst.Uint) {
				dst.Uint = (dst.Uint)[:len(src.Uint)]
			}
		} else {
			dst.Uint = make([]*uint, len(src.Uint))
		}
		deriveCopyTo_11(src.Uint, dst.Uint)
	}
	if src.Uint16 == nil {
		dst.Uint16 = nil
	} else {
		if dst.Uint16 != nil {
			if len(src.Uint16) > len(dst.Uint16) {
				if cap(dst.Uint16) >= len(src.Uint16) {
					dst.Uint16 = (dst.Uint16)[:len(src.Uint16)]
				} else {
					dst.Uint16 = make([]*uint16, len(src.Uint16))
				}
			} else if len(src.Uint16) < len(dst.Uint16) {
				dst.Uint16 = (dst.Uint16)[:len(src.Uint16)]
			}
		} else {
			dst.Uint16 = make([]*uint16, len(src.Uint16))
		}
		deriveCopyTo_12(src.Uint16, dst.Uint16)
	}
	if src.Uint32 == nil {
		dst.Uint32 = nil
	} else {
		if dst.Uint32 != nil {
			if len(src.Uint32) > len(dst.Uint32) {
				if cap(dst.Uint32) >= len(src.Uint32) {
					dst.Uint32 = (dst.Uint32)[:len(src.Uint32)]
				} else {
					dst.Uint32 = make([]*uint32, len(src.Uint32))
				}
			} else if len(src.Uint32) < len(dst.Uint32) {
				dst.Uint32 = (dst.Uint32)[:len(src.Uint32)]
			}
		} else {
			dst.Uint32 = make([]*uint32, len(src.Uint32))
		}
		deriveCopyTo_13(src.Uint32, dst.Uint32)
	}
	if src.Uint64 == nil {
		dst.Uint64 = nil
	} else {
		if dst.Uint64 != nil {
			if len(src.Uint64) > len(dst.Uint64) {
				if cap(dst.Uint64) >= len(src.Uint64) {
					dst.Uint64 = (dst.Uint64)[:len(src.Uint64)]
				} else {
					dst.Uint64 = make([]*uint64, len(src.Uint64))
				}
			} else if len(src.Uint64) < len(dst.Uint64) {
				dst.Uint64 = (dst.Uint64)[:len(src.Uint64)]
			}
		} else {
			dst.Uint64 = make([]*uint64, len(src.Uint64))
		}
		deriveCopyTo_14(src.Uint64, dst.Uint64)
	}
	if src.Uint8 == nil {
		dst.Uint8 = nil
	} else {
		if dst.Uint8 != nil {
			if len(src.Uint8) > len(dst.Uint8) {
				if cap(dst.Uint8) >= len(src.Uint8) {
					dst.Uint8 = (dst.Uint8)[:len(src.Uint8)]
				} else {
					dst.Uint8 = make([]*uint8, len(src.Uint8))
				}
			} else if len(src.Uint8) < len(dst.Uint8) {
				dst.Uint8 = (dst.Uint8)[:len(src.Uint8)]
			}
		} else {
			dst.Uint8 = make([]*uint8, len(src.Uint8))
		}
		deriveCopyTo_(src.Uint8, dst.Uint8)
	}
	if src.UintPtr == nil {
		dst.UintPtr = nil
	} else {
		if dst.UintPtr != nil {
			if len(src.UintPtr) > len(dst.UintPtr) {
				if cap(dst.UintPtr) >= len(src.UintPtr) {
					dst.UintPtr = (dst.UintPtr)[:len(src.UintPtr)]
				} else {
					dst.UintPtr = make([]*uintptr, len(src.UintPtr))
				}
			} else if len(src.UintPtr) < len(dst.UintPtr) {
				dst.UintPtr = (dst.UintPtr)[:len(src.UintPtr)]
			}
		} else {
			dst.UintPtr = make([]*uintptr, len(src.UintPtr))
		}
		deriveCopyTo_15(src.UintPtr, dst.UintPtr)
	}
}

// deriveCopyToPtrToArrayOfBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToArrayOfBuiltInTypes(src, dst *ArrayOfBuiltInTypes) {
	dst.Bool = src.Bool
	dst.Byte = src.Byte
	dst.Complex128 = src.Complex128
	dst.Complex64 = src.Complex64
	dst.Float64 = src.Float64
	dst.Float32 = src.Float32
	dst.Int = src.Int
	dst.Int16 = src.Int16
	dst.Int32 = src.Int32
	dst.Int64 = src.Int64
	dst.Int8 = src.Int8
	dst.Rune = src.Rune
	dst.String = src.String
	dst.Uint = src.Uint
	dst.Uint16 = src.Uint16
	dst.Uint32 = src.Uint32
	dst.Uint64 = src.Uint64
	dst.Uint8 = src.Uint8
	dst.UintPtr = src.UintPtr
	dst.AnotherBoolOfDifferentSize = src.AnotherBoolOfDifferentSize
}

// deriveCopyToPtrToArrayOfPtrToBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToArrayOfPtrToBuiltInTypes(src, dst *ArrayOfPtrToBuiltInTypes) {
	for src_i, src_value := range src.Bool {
		if src_value == nil {
			dst.Bool[src_i] = nil
		} else {
			dst.Bool[src_i] = new(bool)
			*dst.Bool[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Byte {
		if src_value == nil {
			dst.Byte[src_i] = nil
		} else {
			dst.Byte[src_i] = new(byte)
			*dst.Byte[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Complex128 {
		if src_value == nil {
			dst.Complex128[src_i] = nil
		} else {
			dst.Complex128[src_i] = new(complex128)
			*dst.Complex128[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Complex64 {
		if src_value == nil {
			dst.Complex64[src_i] = nil
		} else {
			dst.Complex64[src_i] = new(complex64)
			*dst.Complex64[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Float64 {
		if src_value == nil {
			dst.Float64[src_i] = nil
		} else {
			dst.Float64[src_i] = new(float64)
			*dst.Float64[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Float32 {
		if src_value == nil {
			dst.Float32[src_i] = nil
		} else {
			dst.Float32[src_i] = new(float32)
			*dst.Float32[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Int {
		if src_value == nil {
			dst.Int[src_i] = nil
		} else {
			dst.Int[src_i] = new(int)
			*dst.Int[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Int16 {
		if src_value == nil {
			dst.Int16[src_i] = nil
		} else {
			dst.Int16[src_i] = new(int16)
			*dst.Int16[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Int32 {
		if src_value == nil {
			dst.Int32[src_i] = nil
		} else {
			dst.Int32[src_i] = new(int32)
			*dst.Int32[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Int64 {
		if src_value == nil {
			dst.Int64[src_i] = nil
		} else {
			dst.Int64[src_i] = new(int64)
			*dst.Int64[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Int8 {
		if src_value == nil {
			dst.Int8[src_i] = nil
		} else {
			dst.Int8[src_i] = new(int8)
			*dst.Int8[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Rune {
		if src_value == nil {
			dst.Rune[src_i] = nil
		} else {
			dst.Rune[src_i] = new(rune)
			*dst.Rune[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.String {
		if src_value == nil {
			dst.String[src_i] = nil
		} else {
			dst.String[src_i] = new(string)
			*dst.String[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Uint {
		if src_value == nil {
			dst.Uint[src_i] = nil
		} else {
			dst.Uint[src_i] = new(uint)
			*dst.Uint[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Uint16 {
		if src_value == nil {
			dst.Uint16[src_i] = nil
		} else {
			dst.Uint16[src_i] = new(uint16)
			*dst.Uint16[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Uint32 {
		if src_value == nil {
			dst.Uint32[src_i] = nil
		} else {
			dst.Uint32[src_i] = new(uint32)
			*dst.Uint32[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Uint64 {
		if src_value == nil {
			dst.Uint64[src_i] = nil
		} else {
			dst.Uint64[src_i] = new(uint64)
			*dst.Uint64[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.Uint8 {
		if src_value == nil {
			dst.Uint8[src_i] = nil
		} else {
			dst.Uint8[src_i] = new(uint8)
			*dst.Uint8[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.UintPtr {
		if src_value == nil {
			dst.UintPtr[src_i] = nil
		} else {
			dst.UintPtr[src_i] = new(uintptr)
			*dst.UintPtr[src_i] = *src_value
		}
	}
	for src_i, src_value := range src.AnotherBoolOfDifferentSize {
		if src_value == nil {
			dst.AnotherBoolOfDifferentSize[src_i] = nil
		} else {
			dst.AnotherBoolOfDifferentSize[src_i] = new(bool)
			*dst.AnotherBoolOfDifferentSize[src_i] = *src_value
		}
	}
}

// deriveCopyToPtrToMapsOfSimplerBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToMapsOfSimplerBuiltInTypes(src, dst *MapsOfSimplerBuiltInTypes) {
	if src.StringToUint32 != nil {
		dst.StringToUint32 = make(map[string]uint32, len(src.StringToUint32))
		deriveCopyTo_16(src.StringToUint32, dst.StringToUint32)
	} else {
		dst.StringToUint32 = nil
	}
	if src.Uint64ToInt64 != nil {
		dst.Uint64ToInt64 = make(map[uint8]int64, len(src.Uint64ToInt64))
		deriveCopyTo_17(src.Uint64ToInt64, dst.Uint64ToInt64)
	} else {
		dst.Uint64ToInt64 = nil
	}
}

// deriveCopyToPtrToMapsOfBuiltInTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToMapsOfBuiltInTypes(src, dst *MapsOfBuiltInTypes) {
	if src.BoolToString != nil {
		dst.BoolToString = make(map[bool]string, len(src.BoolToString))
		deriveCopyTo_18(src.BoolToString, dst.BoolToString)
	} else {
		dst.BoolToString = nil
	}
	if src.StringToBool != nil {
		dst.StringToBool = make(map[string]bool, len(src.StringToBool))
		deriveCopyTo_19(src.StringToBool, dst.StringToBool)
	} else {
		dst.StringToBool = nil
	}
	if src.Complex128ToComplex64 != nil {
		dst.Complex128ToComplex64 = make(map[complex128]complex64, len(src.Complex128ToComplex64))
		deriveCopyTo_20(src.Complex128ToComplex64, dst.Complex128ToComplex64)
	} else {
		dst.Complex128ToComplex64 = nil
	}
	if src.Float64ToUint32 != nil {
		dst.Float64ToUint32 = make(map[float64]uint32, len(src.Float64ToUint32))
		deriveCopyTo_21(src.Float64ToUint32, dst.Float64ToUint32)
	} else {
		dst.Float64ToUint32 = nil
	}
	if src.Uint16ToUint8 != nil {
		dst.Uint16ToUint8 = make(map[uint16]uint8, len(src.Uint16ToUint8))
		deriveCopyTo_22(src.Uint16ToUint8, dst.Uint16ToUint8)
	} else {
		dst.Uint16ToUint8 = nil
	}
}

// deriveCopyToPtrToSliceToSlice recursively copies the contents of src into dst.
func deriveCopyToPtrToSliceToSlice(src, dst *SliceToSlice) {
	if src.Ints == nil {
		dst.Ints = nil
	} else {
		if dst.Ints != nil {
			if len(src.Ints) > len(dst.Ints) {
				if cap(dst.Ints) >= len(src.Ints) {
					dst.Ints = (dst.Ints)[:len(src.Ints)]
				} else {
					dst.Ints = make([][]int, len(src.Ints))
				}
			} else if len(src.Ints) < len(dst.Ints) {
				dst.Ints = (dst.Ints)[:len(src.Ints)]
			}
		} else {
			dst.Ints = make([][]int, len(src.Ints))
		}
		deriveCopyTo_23(src.Ints, dst.Ints)
	}
	if src.Strings == nil {
		dst.Strings = nil
	} else {
		if dst.Strings != nil {
			if len(src.Strings) > len(dst.Strings) {
				if cap(dst.Strings) >= len(src.Strings) {
					dst.Strings = (dst.Strings)[:len(src.Strings)]
				} else {
					dst.Strings = make([][]string, len(src.Strings))
				}
			} else if len(src.Strings) < len(dst.Strings) {
				dst.Strings = (dst.Strings)[:len(src.Strings)]
			}
		} else {
			dst.Strings = make([][]string, len(src.Strings))
		}
		deriveCopyTo_24(src.Strings, dst.Strings)
	}
	if src.IntPtrs == nil {
		dst.IntPtrs = nil
	} else {
		if dst.IntPtrs != nil {
			if len(src.IntPtrs) > len(dst.IntPtrs) {
				if cap(dst.IntPtrs) >= len(src.IntPtrs) {
					dst.IntPtrs = (dst.IntPtrs)[:len(src.IntPtrs)]
				} else {
					dst.IntPtrs = make([][]*int, len(src.IntPtrs))
				}
			} else if len(src.IntPtrs) < len(dst.IntPtrs) {
				dst.IntPtrs = (dst.IntPtrs)[:len(src.IntPtrs)]
			}
		} else {
			dst.IntPtrs = make([][]*int, len(src.IntPtrs))
		}
		deriveCopyTo_25(src.IntPtrs, dst.IntPtrs)
	}
}

// deriveCopyToPtrToPtrTo recursively copies the contents of src into dst.
func deriveCopyToPtrToPtrTo(src, dst *PtrTo) {
	if src.Basic == nil {
		dst.Basic = nil
	} else {
		dst.Basic = new(int)
		*dst.Basic = *src.Basic
	}
	if src.Slice == nil {
		dst.Slice = nil
	} else {
		dst.Slice = new([]int)
		deriveCopyTo_26(src.Slice, dst.Slice)
	}
	if src.Array == nil {
		dst.Array = nil
	} else {
		dst.Array = new([4]int)
		*dst.Array = *src.Array
	}
	if src.Map == nil {
		dst.Map = nil
	} else {
		dst.Map = new(map[int]int)
		deriveCopyTo_27(src.Map, dst.Map)
	}
}

// deriveCopyToPtrToName recursively copies the contents of src into dst.
func deriveCopyToPtrToName(src, dst *Name) {
	dst.Name = src.Name
}

// deriveCopyToPtrToStructs recursively copies the contents of src into dst.
func deriveCopyToPtrToStructs(src, dst *Structs) {
	dst.Struct = src.Struct
	if src.PtrToStruct == nil {
		dst.PtrToStruct = nil
	} else {
		dst.PtrToStruct = new(Name)
		src.PtrToStruct.CopyTo(dst.PtrToStruct)
	}
	if src.SliceOfStructs == nil {
		dst.SliceOfStructs = nil
	} else {
		if dst.SliceOfStructs != nil {
			if len(src.SliceOfStructs) > len(dst.SliceOfStructs) {
				if cap(dst.SliceOfStructs) >= len(src.SliceOfStructs) {
					dst.SliceOfStructs = (dst.SliceOfStructs)[:len(src.SliceOfStructs)]
				} else {
					dst.SliceOfStructs = make([]Name, len(src.SliceOfStructs))
				}
			} else if len(src.SliceOfStructs) < len(dst.SliceOfStructs) {
				dst.SliceOfStructs = (dst.SliceOfStructs)[:len(src.SliceOfStructs)]
			}
		} else {
			dst.SliceOfStructs = make([]Name, len(src.SliceOfStructs))
		}
		copy(dst.SliceOfStructs, src.SliceOfStructs)
	}
	if src.SliceToPtrOfStruct == nil {
		dst.SliceToPtrOfStruct = nil
	} else {
		if dst.SliceToPtrOfStruct != nil {
			if len(src.SliceToPtrOfStruct) > len(dst.SliceToPtrOfStruct) {
				if cap(dst.SliceToPtrOfStruct) >= len(src.SliceToPtrOfStruct) {
					dst.SliceToPtrOfStruct = (dst.SliceToPtrOfStruct)[:len(src.SliceToPtrOfStruct)]
				} else {
					dst.SliceToPtrOfStruct = make([]*Name, len(src.SliceToPtrOfStruct))
				}
			} else if len(src.SliceToPtrOfStruct) < len(dst.SliceToPtrOfStruct) {
				dst.SliceToPtrOfStruct = (dst.SliceToPtrOfStruct)[:len(src.SliceToPtrOfStruct)]
			}
		} else {
			dst.SliceToPtrOfStruct = make([]*Name, len(src.SliceToPtrOfStruct))
		}
		deriveCopyTo_28(src.SliceToPtrOfStruct, dst.SliceToPtrOfStruct)
	}
}

// deriveCopyToPtrToMapWithStructs recursively copies the contents of src into dst.
func deriveCopyToPtrToMapWithStructs(src, dst *MapWithStructs) {
	if src.NameToString != nil {
		dst.NameToString = make(map[Name]string, len(src.NameToString))
		deriveCopyTo_29(src.NameToString, dst.NameToString)
	} else {
		dst.NameToString = nil
	}
	if src.StringToName != nil {
		dst.StringToName = make(map[string]Name, len(src.StringToName))
		deriveCopyTo_30(src.StringToName, dst.StringToName)
	} else {
		dst.StringToName = nil
	}
	if src.StringToPtrToName != nil {
		dst.StringToPtrToName = make(map[string]*Name, len(src.StringToPtrToName))
		deriveCopyTo_31(src.StringToPtrToName, dst.StringToPtrToName)
	} else {
		dst.StringToPtrToName = nil
	}
	if src.StringToSliceOfName != nil {
		dst.StringToSliceOfName = make(map[string][]Name, len(src.StringToSliceOfName))
		deriveCopyTo_32(src.StringToSliceOfName, dst.StringToSliceOfName)
	} else {
		dst.StringToSliceOfName = nil
	}
	if src.StringToSliceOfPtrToName != nil {
		dst.StringToSliceOfPtrToName = make(map[string][]*Name, len(src.StringToSliceOfPtrToName))
		deriveCopyTo_33(src.StringToSliceOfPtrToName, dst.StringToSliceOfPtrToName)
	} else {
		dst.StringToSliceOfPtrToName = nil
	}
}

// deriveCopyToPtrToRecursiveType recursively copies the contents of src into dst.
func deriveCopyToPtrToRecursiveType(src, dst *RecursiveType) {
	if src.Bytes == nil {
		dst.Bytes = nil
	} else {
		if dst.Bytes != nil {
			if len(src.Bytes) > len(dst.Bytes) {
				if cap(dst.Bytes) >= len(src.Bytes) {
					dst.Bytes = (dst.Bytes)[:len(src.Bytes)]
				} else {
					dst.Bytes = make([]byte, len(src.Bytes))
				}
			} else if len(src.Bytes) < len(dst.Bytes) {
				dst.Bytes = (dst.Bytes)[:len(src.Bytes)]
			}
		} else {
			dst.Bytes = make([]byte, len(src.Bytes))
		}
		copy(dst.Bytes, src.Bytes)
	}
	if src.N != nil {
		dst.N = make(map[int]RecursiveType, len(src.N))
		deriveCopyTo_34(src.N, dst.N)
	} else {
		dst.N = nil
	}
}

// deriveCopyToPtrToEmbeddedStruct1 recursively copies the contents of src into dst.
func deriveCopyToPtrToEmbeddedStruct1(src, dst *EmbeddedStruct1) {
	dst.Name = src.Name
	if src.Structs == nil {
		dst.Structs = nil
	} else {
		dst.Structs = new(Structs)
		src.Structs.CopyTo(dst.Structs)
	}
}

// deriveCopyToPtrToEmbeddedStruct2 recursively copies the contents of src into dst.
func deriveCopyToPtrToEmbeddedStruct2(src, dst *EmbeddedStruct2) {
	field := new(Structs)
	src.Structs.CopyTo(field)
	dst.Structs = *field
	if src.Name == nil {
		dst.Name = nil
	} else {
		dst.Name = new(Name)
		src.Name.CopyTo(dst.Name)
	}
}

// deriveCopyToPtrToUnnamedStruct recursively copies the contents of src into dst.
func deriveCopyToPtrToUnnamedStruct(src, dst *UnnamedStruct) {
	dst.Unnamed = src.Unnamed
}

// deriveCopyToPtrToStructWithStructFieldWithoutEqualMethod recursively copies the contents of src into dst.
func deriveCopyToPtrToStructWithStructFieldWithoutEqualMethod(src, dst *StructWithStructFieldWithoutEqualMethod) {
	if src.A == nil {
		dst.A = nil
	} else {
		dst.A = new(StructWithoutEqualMethod)
		*dst.A = *src.A
	}
	dst.B = src.B
}

// deriveCopyToPtrToStructWithStructWithFromAnotherPackage recursively copies the contents of src into dst.
func deriveCopyToPtrToStructWithStructWithFromAnotherPackage(src, dst *StructWithStructWithFromAnotherPackage) {
	if src.A == nil {
		dst.A = nil
	} else {
		dst.A = new(extra.StructWithoutEqualMethod)
		*dst.A = *src.A
	}
	dst.B = src.B
}

// deriveCopyToPtrToFieldWithStructWithPrivateFields recursively copies the contents of src into dst.
func deriveCopyToPtrToFieldWithStructWithPrivateFields(src, dst *FieldWithStructWithPrivateFields) {
	if src.A == nil {
		dst.A = nil
	} else {
		dst.A = new(extra.PrivateFieldAndNoEqualMethod)
		deriveCopyTo_35(src.A, dst.A)
	}
}

// deriveCopyToPtrToEnums recursively copies the contents of src into dst.
func deriveCopyToPtrToEnums(src, dst *Enums) {
	dst.Enum = src.Enum
	if src.PtrToEnum == nil {
		dst.PtrToEnum = nil
	} else {
		dst.PtrToEnum = new(MyEnum)
		*dst.PtrToEnum = *src.PtrToEnum
	}
	if src.SliceToEnum == nil {
		dst.SliceToEnum = nil
	} else {
		if dst.SliceToEnum != nil {
			if len(src.SliceToEnum) > len(dst.SliceToEnum) {
				if cap(dst.SliceToEnum) >= len(src.SliceToEnum) {
					dst.SliceToEnum = (dst.SliceToEnum)[:len(src.SliceToEnum)]
				} else {
					dst.SliceToEnum = make([]MyEnum, len(src.SliceToEnum))
				}
			} else if len(src.SliceToEnum) < len(dst.SliceToEnum) {
				dst.SliceToEnum = (dst.SliceToEnum)[:len(src.SliceToEnum)]
			}
		} else {
			dst.SliceToEnum = make([]MyEnum, len(src.SliceToEnum))
		}
		copy(dst.SliceToEnum, src.SliceToEnum)
	}
	if src.SliceToPtrToEnum == nil {
		dst.SliceToPtrToEnum = nil
	} else {
		if dst.SliceToPtrToEnum != nil {
			if len(src.SliceToPtrToEnum) > len(dst.SliceToPtrToEnum) {
				if cap(dst.SliceToPtrToEnum) >= len(src.SliceToPtrToEnum) {
					dst.SliceToPtrToEnum = (dst.SliceToPtrToEnum)[:len(src.SliceToPtrToEnum)]
				} else {
					dst.SliceToPtrToEnum = make([]*MyEnum, len(src.SliceToPtrToEnum))
				}
			} else if len(src.SliceToPtrToEnum) < len(dst.SliceToPtrToEnum) {
				dst.SliceToPtrToEnum = (dst.SliceToPtrToEnum)[:len(src.SliceToPtrToEnum)]
			}
		} else {
			dst.SliceToPtrToEnum = make([]*MyEnum, len(src.SliceToPtrToEnum))
		}
		deriveCopyTo_36(src.SliceToPtrToEnum, dst.SliceToPtrToEnum)
	}
	if src.MapToEnum != nil {
		dst.MapToEnum = make(map[int32]MyEnum, len(src.MapToEnum))
		deriveCopyTo_37(src.MapToEnum, dst.MapToEnum)
	} else {
		dst.MapToEnum = nil
	}
	if src.EnumToMap != nil {
		dst.EnumToMap = make(map[MyEnum]int32, len(src.EnumToMap))
		deriveCopyTo_38(src.EnumToMap, dst.EnumToMap)
	} else {
		dst.EnumToMap = nil
	}
	dst.ArrayEnum = src.ArrayEnum
}

// deriveCopyToPtrToNamedTypes recursively copies the contents of src into dst.
func deriveCopyToPtrToNamedTypes(src, dst *NamedTypes) {
	if src.Slice == nil {
		dst.Slice = nil
	} else {
		if dst.Slice != nil {
			if len(src.Slice) > len(dst.Slice) {
				if cap(dst.Slice) >= len(src.Slice) {
					dst.Slice = (dst.Slice)[:len(src.Slice)]
				} else {
					dst.Slice = make([]int64, len(src.Slice))
				}
			} else if len(src.Slice) < len(dst.Slice) {
				dst.Slice = (dst.Slice)[:len(src.Slice)]
			}
		} else {
			dst.Slice = make([]int64, len(src.Slice))
		}
		copy(dst.Slice, src.Slice)
	}
	if src.PtrToSlice == nil {
		dst.PtrToSlice = nil
	} else {
		dst.PtrToSlice = new(MySlice)
		deriveCopyTo_39(src.PtrToSlice, dst.PtrToSlice)
	}
	if src.SliceToSlice == nil {
		dst.SliceToSlice = nil
	} else {
		if dst.SliceToSlice != nil {
			if len(src.SliceToSlice) > len(dst.SliceToSlice) {
				if cap(dst.SliceToSlice) >= len(src.SliceToSlice) {
					dst.SliceToSlice = (dst.SliceToSlice)[:len(src.SliceToSlice)]
				} else {
					dst.SliceToSlice = make([]MySlice, len(src.SliceToSlice))
				}
			} else if len(src.SliceToSlice) < len(dst.SliceToSlice) {
				dst.SliceToSlice = (dst.SliceToSlice)[:len(src.SliceToSlice)]
			}
		} else {
			dst.SliceToSlice = make([]MySlice, len(src.SliceToSlice))
		}
		deriveCopyTo_40(src.SliceToSlice, dst.SliceToSlice)
	}
}

// deriveCopyToPtrToDuration recursively copies the contents of src into dst.
func deriveCopyToPtrToDuration(src, dst *Duration) {
	dst.D = src.D
	if src.P == nil {
		dst.P = nil
	} else {
		dst.P = new(time.Duration)
		*dst.P = *src.P
	}
	if src.Ds == nil {
		dst.Ds = nil
	} else {
		if dst.Ds != nil {
			if len(src.Ds) > len(dst.Ds) {
				if cap(dst.Ds) >= len(src.Ds) {
					dst.Ds = (dst.Ds)[:len(src.Ds)]
				} else {
					dst.Ds = make([]time.Duration, len(src.Ds))
				}
			} else if len(src.Ds) < len(dst.Ds) {
				dst.Ds = (dst.Ds)[:len(src.Ds)]
			}
		} else {
			dst.Ds = make([]time.Duration, len(src.Ds))
		}
		copy(dst.Ds, src.Ds)
	}
	if src.DPs == nil {
		dst.DPs = nil
	} else {
		if dst.DPs != nil {
			if len(src.DPs) > len(dst.DPs) {
				if cap(dst.DPs) >= len(src.DPs) {
					dst.DPs = (dst.DPs)[:len(src.DPs)]
				} else {
					dst.DPs = make([]*time.Duration, len(src.DPs))
				}
			} else if len(src.DPs) < len(dst.DPs) {
				dst.DPs = (dst.DPs)[:len(src.DPs)]
			}
		} else {
			dst.DPs = make([]*time.Duration, len(src.DPs))
		}
		deriveCopyTo_41(src.DPs, dst.DPs)
	}
	if src.MD != nil {
		dst.MD = make(map[int]time.Duration, len(src.MD))
		deriveCopyTo_42(src.MD, dst.MD)
	} else {
		dst.MD = nil
	}
}

func deriveUnionSetOfInt64s(union, that map[int64]struct{}) map[int64]struct{} {
	for k, _ := range that {
		union[k] = struct{}{}
	}
	return union
}

func deriveUnionOfInt64s(union, that []int64) []int64 {
	for i, v := range that {
		if !deriveContainsInt64s(union, v) {
			union = append(union, that[i])
		}
	}
	return union
}

func deriveTuple1(v0 int) func() int {
	return func() int {
		return v0
	}
}

func deriveTuple2(v0 int, v1 string) func() (int, string) {
	return func() (int, string) {
		return v0, v1
	}
}

func deriveTuple3(v0 int, v1 string, v2 *BuiltInTypes) func() (int, string, *BuiltInTypes) {
	return func() (int, string, *BuiltInTypes) {
		return v0, v1, v2
	}
}

func deriveTupleError(v0 []byte, v1 error) func() ([]byte, error) {
	return func() ([]byte, error) {
		return v0, v1
	}
}

func deriveEqualPtrToEmpty(this, that *Empty) bool {
	return (this == nil && that == nil) || (this != nil) && (that != nil)
}

func deriveEqualPtrToBuiltInTypes(this, that *BuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr
}

func deriveEqualPtrToPrivateBuiltInTypes(this, that *PrivateBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.privateBool == that.privateBool &&
			this.privateByte == that.privateByte &&
			this.privateComplex128 == that.privateComplex128 &&
			this.privateComplex64 == that.privateComplex64 &&
			this.privateFloat64 == that.privateFloat64 &&
			this.privateFloat32 == that.privateFloat32 &&
			this.privateInt == that.privateInt &&
			this.privateInt16 == that.privateInt16 &&
			this.privateInt32 == that.privateInt32 &&
			this.privateInt64 == that.privateInt64 &&
			this.privateInt8 == that.privateInt8 &&
			this.privateRune == that.privateRune &&
			this.privateString == that.privateString &&
			this.privateUint == that.privateUint &&
			this.privateUint16 == that.privateUint16 &&
			this.privateUint32 == that.privateUint32 &&
			this.privateUint64 == that.privateUint64 &&
			this.privateUint8 == that.privateUint8 &&
			this.privateUintPtr == that.privateUintPtr
}

func deriveEqualPtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Bool == nil && that.Bool == nil) || (this.Bool != nil && that.Bool != nil && *(this.Bool) == *(that.Bool))) &&
			((this.Byte == nil && that.Byte == nil) || (this.Byte != nil && that.Byte != nil && *(this.Byte) == *(that.Byte))) &&
			((this.Complex128 == nil && that.Complex128 == nil) || (this.Complex128 != nil && that.Complex128 != nil && *(this.Complex128) == *(that.Complex128))) &&
			((this.Complex64 == nil && that.Complex64 == nil) || (this.Complex64 != nil && that.Complex64 != nil && *(this.Complex64) == *(that.Complex64))) &&
			((this.Float64 == nil && that.Float64 == nil) || (this.Float64 != nil && that.Float64 != nil && *(this.Float64) == *(that.Float64))) &&
			((this.Float32 == nil && that.Float32 == nil) || (this.Float32 != nil && that.Float32 != nil && *(this.Float32) == *(that.Float32))) &&
			((this.Int == nil && that.Int == nil) || (this.Int != nil && that.Int != nil && *(this.Int) == *(that.Int))) &&
			((this.Int16 == nil && that.Int16 == nil) || (this.Int16 != nil && that.Int16 != nil && *(this.Int16) == *(that.Int16))) &&
			((this.Int32 == nil && that.Int32 == nil) || (this.Int32 != nil && that.Int32 != nil && *(this.Int32) == *(that.Int32))) &&
			((this.Int64 == nil && that.Int64 == nil) || (this.Int64 != nil && that.Int64 != nil && *(this.Int64) == *(that.Int64))) &&
			((this.Int8 == nil && that.Int8 == nil) || (this.Int8 != nil && that.Int8 != nil && *(this.Int8) == *(that.Int8))) &&
			((this.Rune == nil && that.Rune == nil) || (this.Rune != nil && that.Rune != nil && *(this.Rune) == *(that.Rune))) &&
			((this.String == nil && that.String == nil) || (this.String != nil && that.String != nil && *(this.String) == *(that.String))) &&
			((this.Uint == nil && that.Uint == nil) || (this.Uint != nil && that.Uint != nil && *(this.Uint) == *(that.Uint))) &&
			((this.Uint16 == nil && that.Uint16 == nil) || (this.Uint16 != nil && that.Uint16 != nil && *(this.Uint16) == *(that.Uint16))) &&
			((this.Uint32 == nil && that.Uint32 == nil) || (this.Uint32 != nil && that.Uint32 != nil && *(this.Uint32) == *(that.Uint32))) &&
			((this.Uint64 == nil && that.Uint64 == nil) || (this.Uint64 != nil && that.Uint64 != nil && *(this.Uint64) == *(that.Uint64))) &&
			((this.Uint8 == nil && that.Uint8 == nil) || (this.Uint8 != nil && that.Uint8 != nil && *(this.Uint8) == *(that.Uint8))) &&
			((this.UintPtr == nil && that.UintPtr == nil) || (this.UintPtr != nil && that.UintPtr != nil && *(this.UintPtr) == *(that.UintPtr)))
}

func deriveEqualPtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_(this.Bool, that.Bool) &&
			bytes.Equal(this.Byte, that.Byte) &&
			deriveEqual_1(this.Complex128, that.Complex128) &&
			deriveEqual_2(this.Complex64, that.Complex64) &&
			deriveEqual_3(this.Float64, that.Float64) &&
			deriveEqual_4(this.Float32, that.Float32) &&
			deriveEqualSliceOfint(this.Int, that.Int) &&
			deriveEqual_5(this.Int16, that.Int16) &&
			deriveEqual_6(this.Int32, that.Int32) &&
			deriveEqual_7(this.Int64, that.Int64) &&
			deriveEqual_8(this.Int8, that.Int8) &&
			deriveEqual_6(this.Rune, that.Rune) &&
			deriveEqual_9(this.String, that.String) &&
			deriveEqual_10(this.Uint, that.Uint) &&
			deriveEqual_11(this.Uint16, that.Uint16) &&
			deriveEqual_12(this.Uint32, that.Uint32) &&
			deriveEqual_13(this.Uint64, that.Uint64) &&
			bytes.Equal(this.Uint8, that.Uint8) &&
			deriveEqual_14(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_15(this.Bool, that.Bool) &&
			deriveEqual_16(this.Byte, that.Byte) &&
			deriveEqual_17(this.Complex128, that.Complex128) &&
			deriveEqual_18(this.Complex64, that.Complex64) &&
			deriveEqual_19(this.Float64, that.Float64) &&
			deriveEqual_20(this.Float32, that.Float32) &&
			deriveEqual_21(this.Int, that.Int) &&
			deriveEqual_22(this.Int16, that.Int16) &&
			deriveEqual_23(this.Int32, that.Int32) &&
			deriveEqual_24(this.Int64, that.Int64) &&
			deriveEqual_25(this.Int8, that.Int8) &&
			deriveEqual_23(this.Rune, that.Rune) &&
			deriveEqual_26(this.String, that.String) &&
			deriveEqual_27(this.Uint, that.Uint) &&
			deriveEqual_28(this.Uint16, that.Uint16) &&
			deriveEqual_29(this.Uint32, that.Uint32) &&
			deriveEqual_30(this.Uint64, that.Uint64) &&
			deriveEqual_16(this.Uint8, that.Uint8) &&
			deriveEqual_31(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr &&
			this.AnotherBoolOfDifferentSize == that.AnotherBoolOfDifferentSize
}

func deriveEqualPtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_32(this.Bool, that.Bool) &&
			deriveEqual_33(this.Byte, that.Byte) &&
			deriveEqual_34(this.Complex128, that.Complex128) &&
			deriveEqual_35(this.Complex64, that.Complex64) &&
			deriveEqual_36(this.Float64, that.Float64) &&
			deriveEqual_37(this.Float32, that.Float32) &&
			deriveEqual_38(this.Int, that.Int) &&
			deriveEqual_39(this.Int16, that.Int16) &&
			deriveEqual_40(this.Int32, that.Int32) &&
			deriveEqual_41(this.Int64, that.Int64) &&
			deriveEqual_42(this.Int8, that.Int8) &&
			deriveEqual_43(this.Rune, that.Rune) &&
			deriveEqual_44(this.String, that.String) &&
			deriveEqual_45(this.Uint, that.Uint) &&
			deriveEqual_46(this.Uint16, that.Uint16) &&
			deriveEqual_47(this.Uint32, that.Uint32) &&
			deriveEqual_48(this.Uint64, that.Uint64) &&
			deriveEqual_49(this.Uint8, that.Uint8) &&
			deriveEqual_50(this.UintPtr, that.UintPtr) &&
			deriveEqual_51(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize)
}

func deriveEqualPtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_52(this.StringToUint32, that.StringToUint32) &&
			deriveEqual_53(this.Uint64ToInt64, that.Uint64ToInt64)
}

func deriveEqualPtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_54(this.BoolToString, that.BoolToString) &&
			deriveEqual_55(this.StringToBool, that.StringToBool) &&
			deriveEqual_56(this.Complex128ToComplex64, that.Complex128ToComplex64) &&
			deriveEqual_57(this.Float64ToUint32, that.Float64ToUint32) &&
			deriveEqual_58(this.Uint16ToUint8, that.Uint16ToUint8)
}

func deriveEqualPtrToSliceToSlice(this, that *SliceToSlice) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_59(this.Ints, that.Ints) &&
			deriveEqual_60(this.Strings, that.Strings) &&
			deriveEqual_61(this.IntPtrs, that.IntPtrs)
}

func deriveEqualPtrToPtrTo(this, that *PtrTo) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Basic == nil && that.Basic == nil) || (this.Basic != nil && that.Basic != nil && *(this.Basic) == *(that.Basic))) &&
			((this.Slice == nil && that.Slice == nil) || (this.Slice != nil && that.Slice != nil && deriveEqualSliceOfint(*(this.Slice), *(that.Slice)))) &&
			((this.Array == nil && that.Array == nil) || (this.Array != nil && that.Array != nil && *(this.Array) == *(that.Array))) &&
			((this.Map == nil && that.Map == nil) || (this.Map != nil && that.Map != nil && deriveEqualMapOfintToint(*(this.Map), *(that.Map))))
}

func deriveEqualPtrToName(this, that *Name) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name
}

func deriveEqualPtrToStructs(this, that *Structs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Struct == that.Struct &&
			this.PtrToStruct.Equal(that.PtrToStruct) &&
			deriveEqual_62(this.SliceOfStructs, that.SliceOfStructs) &&
			deriveEqual_63(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct)
}

func deriveEqualPtrToMapWithStructs(this, that *MapWithStructs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_64(this.NameToString, that.NameToString) &&
			deriveEqual_65(this.StringToName, that.StringToName) &&
			deriveEqual_66(this.StringToPtrToName, that.StringToPtrToName) &&
			deriveEqual_67(this.StringToSliceOfName, that.StringToSliceOfName) &&
			deriveEqual_68(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName)
}

func deriveEqualPtrToRecursiveType(this, that *RecursiveType) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			bytes.Equal(this.Bytes, that.Bytes) &&
			deriveEqual_69(this.N, that.N)
}

func deriveEqualPtrToEmbeddedStruct1(this, that *EmbeddedStruct1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Structs.Equal(that.Structs)
}

func deriveEqualPtrToEmbeddedStruct2(this, that *EmbeddedStruct2) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Structs.Equal(&that.Structs) &&
			this.Name.Equal(that.Name)
}

func deriveEqualPtrToUnnamedStruct(this, that *UnnamedStruct) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Unnamed == that.Unnamed
}

func deriveEqualPtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_70(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_71(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_72(this.A, that.A)
}

func deriveEqualPtrToEnums(this, that *Enums) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Enum == that.Enum &&
			deriveEqual_73(this.PtrToEnum, that.PtrToEnum) &&
			deriveEqual_74(this.SliceToEnum, that.SliceToEnum) &&
			deriveEqual_75(this.SliceToPtrToEnum, that.SliceToPtrToEnum) &&
			deriveEqual_76(this.MapToEnum, that.MapToEnum) &&
			deriveEqual_77(this.EnumToMap, that.EnumToMap) &&
			this.ArrayEnum == that.ArrayEnum
}

func deriveEqualPtrToNamedTypes(this, that *NamedTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_7(this.Slice, that.Slice) &&
			deriveEqual_78(this.PtrToSlice, that.PtrToSlice) &&
			deriveEqual_79(this.SliceToSlice, that.SliceToSlice)
}

func deriveEqualPtrToTime(this, that *Time) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.T.Equal(that.T) &&
			((this.P == nil && that.P == nil) || (this.P != nil && that.P != nil && (*(this.P)).Equal(*(that.P))))
}

func deriveEqualPtrToDuration(this, that *Duration) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.D == that.D &&
			deriveEqual_80(this.P, that.P) &&
			deriveEqual_81(this.Ds, that.Ds) &&
			deriveEqual_82(this.DPs, that.DPs) &&
			deriveEqual_83(this.MD, that.MD)
}

func deriveEqualInefficientDeriveTheDerived(this, that int) bool {
	return this == that
}

func deriveEqualSliceOfint(this, that []int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfintToint(this, that map[int]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualPtrToint(this, that *int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqualPtrToSliceOfint(this, that *[]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToArray10Ofint(this, that *[10]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToMapOfintToint(this, that *map[int]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for k, v := range *this {
			thatv, ok := (*that)[k]
			if !ok {
				return false
			}
			if !(v == thatv) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqual1(this, that BuiltInTypes) bool {
	return this == that
}

func deriveEqual(this, that *UseVendor) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual_84(this.Vendors, that.Vendors)
}

func deriveCurryMarshal(f func(data []byte, v interface{}) error) func(data []byte) func(v interface{}) error {
	return func(data []byte) func(v interface{}) error {
		return func(v interface{}) error {
			return f(data, v)
		}
	}
}

func deriveCurry3(f func(a int, b string, c bool) string) func(a int) func(b string, c bool) string {
	return func(a int) func(b string, c bool) string {
		return func(b string, c bool) string {
			return f(a, b, c)
		}
	}
}

func deriveCurryCurried(f func(b string, c bool) string) func(b string) func(c bool) string {
	return func(b string) func(c bool) string {
		return func(c bool) string {
			return f(b, c)
		}
	}
}

func deriveSortedInts(list []int) []int {
	sort.Ints(list)
	return list
}

func deriveSortInt64s(list []int64) []int64 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSortStructs(list []*BuiltInTypes) []*BuiltInTypes {
	sort.Slice(list, func(i, j int) bool { return deriveComparePtrToBuiltInTypes(list[i], list[j]) < 0 })
	return list
}

func deriveSortedStrings(list []string) []string {
	sort.Strings(list)
	return list
}

func deriveKeysForInt64s(m map[int64]struct{}) []int64 {
	keys := make([]int64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForFmap(m map[int]string) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapStringToString(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapIntToInt64(m map[int]int64) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapInt64ToInt64(m map[int64]int64) []int64 {
	keys := make([]int64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveJoinSS(list [][]string) []string {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]string, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveJoinEE(f func() (int64, error), err error) (int64, error) {
	if err != nil {
		return 0, err
	}
	return f()
}

func deriveJoinChannels(in <-chan <-chan int) <-chan int {
	out := make(chan int)
	go func() {
		wait := sync.WaitGroup{}
		for c := range in {
			wait.Add(1)
			res := c
			go func() {
				for r := range res {
					out <- r
				}
				wait.Done()
			}()
		}
		wait.Wait()
		close(out)
	}()
	return out
}

func deriveJoin(list [][]int) []int {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]int, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveJoinString(list []string) string {
	return strings.Join(list, "")
}

func deriveJoinJustError(f func() error, err error) error {
	if err != nil {
		return err
	}
	return f()
}

func deriveJoinErrorAndString(f func() (string, error), err error) (string, error) {
	if err != nil {
		return "", err
	}
	return f()
}

func deriveJoinErrorAndValues(f func() (string, int, error), err error) (string, int, error) {
	if err != nil {
		return "", 0, err
	}
	return f()
}

func deriveFmapForKeys(f func(int) string, list []int) []string {
	out := make([]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmap(f func(int) int, list []int) []int {
	out := make([]int, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmapString(f func(rune) bool, ss string) []bool {
	out := make([]bool, len([]rune(ss)))
	for i, elem := range ss {
		out[i] = f(elem)
	}
	return out
}

func deriveFmapError(f func(int) int64, g func() (int, error)) (int64, error) {
	v, err := g()
	if err != nil {
		return 0, err
	}
	return f(v), nil
}

func deriveFmapEE(f func(string) (int, error), g func() (string, error)) (func() (int, error), error) {
	v, err := g()
	if err != nil {
		return nil, err
	}
	return deriveTuple(f(v)), nil
}

func deriveFmapPrint(f func(string), g func() (string, error)) error {
	v, err := g()
	if err != nil {
		return err
	}
	f(v)
	return nil
}

func deriveFmapMore(f func(string) (int, string, error), g func() (string, error)) (func() (int, string, error), error) {
	v, err := g()
	if err != nil {
		return nil, err
	}
	return deriveTuple_(f(v)), nil
}

func deriveFmapChan(f func(string) int, in <-chan string) <-chan int {
	out := make(chan int)
	go func() {
		for a := range in {
			b := f(a)
			out <- b
		}
		close(out)
	}()
	return out
}

func deriveFmapSS(f func(string) []string, list []string) [][]string {
	out := make([][]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmapEE64(f func(string) (int64, error), g func() (string, error)) (func() (int64, error), error) {
	v, err := g()
	if err != nil {
		return nil, err
	}
	return deriveTuple_i(f(v)), nil
}

func deriveFmapChanChan(f func(string) <-chan int, in <-chan string) <-chan (<-chan int) {
	out := make(chan (<-chan int))
	go func() {
		for a := range in {
			b := f(a)
			out <- b
		}
		close(out)
	}()
	return out
}

func deriveFlipMarshal(f func(data []byte, v interface{}) error) func(v interface{}, data []byte) error {
	return func(v interface{}, data []byte) error {
		return f(data, v)
	}
}

func deriveFlip3(f func(a int, b string, c bool) string) func(b string, a int, c bool) string {
	return func(b string, a int, c bool) string {
		return f(a, b, c)
	}
}

func deriveSetInt64s(list []int64) map[int64]struct{} {
	set := make(map[int64]struct{}, len(list))
	for _, v := range list {
		set[v] = struct{}{}
	}
	return set
}

func deriveMinInt64s(list []int64, def int64) int64 {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if v < m {
			m = list[i]
		}
	}
	return m
}

func deriveMinInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func deriveMinStructs(list []*BuiltInTypes, def *BuiltInTypes) *BuiltInTypes {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if deriveComparePtrToBuiltInTypes(v, m) < 0 {
			m = list[i]
		}
	}
	return m
}

func deriveMaxInt64s(list []int64, def int64) int64 {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if v > m {
			m = list[i]
		}
	}
	return m
}

func deriveMaxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func deriveMaxStructs(list []*BuiltInTypes, def *BuiltInTypes) *BuiltInTypes {
	if len(list) == 0 {
		return def
	}
	m := list[0]
	list = list[1:]
	for i, v := range list {
		if deriveComparePtrToBuiltInTypes(v, m) > 0 {
			m = list[i]
		}
	}
	return m
}

func deriveAny(pred func(int) bool, list []int) bool {
	for _, elem := range list {
		if pred(elem) {
			return true
		}
	}
	return false
}

// deriveAll reports whether the predicate returns true for all the given elements in the given slice.
func deriveAll(predicate func(int) bool, slice []int) bool {
	for _, elem := range slice {
		if !predicate(elem) {
			return false
		}
	}
	return true
}

func deriveDo(f0 func() (string, error), f1 func() (int, error)) (string, int, error) {
	errChan := make(chan error)
	var v0 string
	go func() {
		var v0err error
		v0, v0err = f0()
		errChan <- v0err
	}()
	var v1 int
	go func() {
		var v1err error
		v1, v1err = f1()
		errChan <- v1err
	}()
	var err error
	for i := 0; i < 2; i++ {
		errc := <-errChan
		if errc != nil {
			if err == nil {
				err = errc
			}
		}
	}
	return v0, v1, err
}

func deriveGoString(this []*bool) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*bool {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*bool, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_62(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_(this []*byte) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*byte {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*byte, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_63(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_1(this []*complex128) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*complex128 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*complex128, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_64(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_2(this []*complex64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*complex64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*complex64, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_65(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_3(this []*float64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*float64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*float64, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_66(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_4(this []*float32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*float32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*float32, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_67(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_5(this []*int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*int, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringIntPtr(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_6(this []*int16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*int16 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*int16, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_68(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_7(this []*int32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*int32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*int32, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_69(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_8(this []*int64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*int64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*int64, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_70(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_9(this []*int8) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*int8 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*int8, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_71(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_10(this []*string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*string {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*string, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_72(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_11(this []*uint) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*uint {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*uint, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_73(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_12(this []*uint16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*uint16 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*uint16, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_74(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_13(this []*uint32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*uint32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*uint32, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_75(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_14(this []*uint64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*uint64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*uint64, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_76(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_15(this []*uintptr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*uintptr {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*uintptr, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_77(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_16(this [1]*bool) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [1]*bool {\n")
	fmt.Fprintf(buf, "this := [1]*bool{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_62(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_17(this [2]*byte) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [2]*byte {\n")
	fmt.Fprintf(buf, "this := [2]*byte{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_63(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_18(this [3]*complex128) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [3]*complex128 {\n")
	fmt.Fprintf(buf, "this := [3]*complex128{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_64(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_19(this [4]*complex64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [4]*complex64 {\n")
	fmt.Fprintf(buf, "this := [4]*complex64{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_65(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_20(this [5]*float64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [5]*float64 {\n")
	fmt.Fprintf(buf, "this := [5]*float64{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_66(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_21(this [6]*float32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [6]*float32 {\n")
	fmt.Fprintf(buf, "this := [6]*float32{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_67(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_22(this [7]*int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [7]*int {\n")
	fmt.Fprintf(buf, "this := [7]*int{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringIntPtr(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_23(this [8]*int16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [8]*int16 {\n")
	fmt.Fprintf(buf, "this := [8]*int16{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_68(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_24(this [9]*int32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [9]*int32 {\n")
	fmt.Fprintf(buf, "this := [9]*int32{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_69(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_25(this [10]*int64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [10]*int64 {\n")
	fmt.Fprintf(buf, "this := [10]*int64{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_70(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_26(this [11]*int8) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [11]*int8 {\n")
	fmt.Fprintf(buf, "this := [11]*int8{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_71(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_27(this [12]*rune) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [12]*rune {\n")
	fmt.Fprintf(buf, "this := [12]*rune{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_69(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_28(this [13]*string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [13]*string {\n")
	fmt.Fprintf(buf, "this := [13]*string{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_72(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_29(this [14]*uint) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [14]*uint {\n")
	fmt.Fprintf(buf, "this := [14]*uint{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_73(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_30(this [15]*uint16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [15]*uint16 {\n")
	fmt.Fprintf(buf, "this := [15]*uint16{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_74(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_31(this [16]*uint32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [16]*uint32 {\n")
	fmt.Fprintf(buf, "this := [16]*uint32{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_75(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_32(this [17]*uint64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [17]*uint64 {\n")
	fmt.Fprintf(buf, "this := [17]*uint64{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_76(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_33(this [18]*uint8) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [18]*uint8 {\n")
	fmt.Fprintf(buf, "this := [18]*uint8{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_63(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_34(this [19]*uintptr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [19]*uintptr {\n")
	fmt.Fprintf(buf, "this := [19]*uintptr{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_77(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_35(this [10]*bool) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [10]*bool {\n")
	fmt.Fprintf(buf, "this := [10]*bool{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_62(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_36(this [][]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [][]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([][]int, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringIntSlices(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_37(this [][]string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [][]string {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([][]string, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_78(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_38(this [][]*int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [][]*int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([][]*int, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_5(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_39(this *[4]int) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *[4]int {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new([4]int)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_N(this Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.Name {\n")
	fmt.Fprintf(buf, "this := &test.Name{}\n")
	fmt.Fprintf(buf, "this.Name = %#v\n", this.Name)
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_40(this []Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]test.Name, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_N(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_41(this []*Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*test.Name, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringName(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_42(this map[Name]string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[test.Name]string {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[test.Name]string)\n")
		i := 0
		for k, v := range this {
			fmt.Fprintf(buf, "key%d := %s\n", i, deriveGoString_N(k))
			fmt.Fprintf(buf, "this[key%d] = %s\n", i, deriveGoString_s(v))
			i++
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_43(this map[string]Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[string]test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[string]test.Name)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_N(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_44(this map[string]*Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[string]*test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[string]*test.Name)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoStringName(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_45(this map[string][]Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[string][]test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[string][]test.Name)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_40(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_46(this map[string][]*Name) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[string][]*test.Name {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[string][]*test.Name)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_41(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_47(this map[int]RecursiveType) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[int]test.RecursiveType {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[int]test.RecursiveType)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_R(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_S(this Structs) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.Structs {\n")
	fmt.Fprintf(buf, "this := &test.Structs{}\n")
	fmt.Fprintf(buf, "this.Struct = %s\n", deriveGoString_N(this.Struct))
	if this.PtrToStruct != nil {
		fmt.Fprintf(buf, "this.PtrToStruct = %s\n", deriveGoStringName(this.PtrToStruct))
	}
	if this.SliceOfStructs != nil {
		fmt.Fprintf(buf, "this.SliceOfStructs = %s\n", deriveGoString_40(this.SliceOfStructs))
	}
	if this.SliceToPtrOfStruct != nil {
		fmt.Fprintf(buf, "this.SliceToPtrOfStruct = %s\n", deriveGoString_41(this.SliceToPtrOfStruct))
	}
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_48(this *StructWithoutEqualMethod) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.StructWithoutEqualMethod {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &test.StructWithoutEqualMethod{}\n")
		fmt.Fprintf(buf, "this.Num = %#v\n", this.Num)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_St(this StructWithoutEqualMethod) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.StructWithoutEqualMethod {\n")
	fmt.Fprintf(buf, "this := &test.StructWithoutEqualMethod{}\n")
	fmt.Fprintf(buf, "this.Num = %#v\n", this.Num)
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_49(this *extra.StructWithoutEqualMethod) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *extra.StructWithoutEqualMethod {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &extra.StructWithoutEqualMethod{}\n")
		fmt.Fprintf(buf, "this.Number = %#v\n", this.Number)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_Str(this extra.StructWithoutEqualMethod) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() extra.StructWithoutEqualMethod {\n")
	fmt.Fprintf(buf, "this := &extra.StructWithoutEqualMethod{}\n")
	fmt.Fprintf(buf, "this.Number = %#v\n", this.Number)
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_50(this *MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.MyEnum {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(test.MyEnum)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_51(this []MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []test.MyEnum {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]test.MyEnum, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_M(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_52(this []*MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*test.MyEnum {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*test.MyEnum, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_50(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_53(this map[int32]MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[int32]test.MyEnum {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[int32]test.MyEnum)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_M(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_54(this map[MyEnum]int32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[test.MyEnum]int32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[test.MyEnum]int32)\n")
		i := 0
		for k, v := range this {
			fmt.Fprintf(buf, "key%d := %s\n", i, deriveGoString_M(k))
			fmt.Fprintf(buf, "this[key%d] = %s\n", i, deriveGoString_i(v))
			i++
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_55(this [2]MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [2]test.MyEnum {\n")
	fmt.Fprintf(buf, "this := [2]test.MyEnum{}\n")
	for i := range this {
		fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_M(this[i]))
	}
	fmt.Fprintf(buf, "return this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_56(this *MySlice) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *test.MySlice {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(test.MySlice)\n")
		if *this != nil {
			fmt.Fprintf(buf, "*this = %#v\n", *this)
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_57(this []MySlice) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []test.MySlice {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]test.MySlice, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_My(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_58(this *time.Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *time.Duration {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(time.Duration)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_59(this []time.Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []time.Duration {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]time.Duration, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_D(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_60(this []*time.Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*time.Duration {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*time.Duration, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_58(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_61(this map[int]time.Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() map[int]time.Duration {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make(map[int]time.Duration)\n")
		for k, v := range this {
			fmt.Fprintf(buf, "this[%#v] = %s\n", k, deriveGoString_D(v))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveCompare(this, that bool) int {
	if this == that {
		return 0
	}
	if that {
		return -1
	}
	return 1
}

func deriveCompare_(this, that byte) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_f(this, that float64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_fl(this, that float32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_i(this, that int) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_in(this, that int16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int(this, that int32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int6(this, that int64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_int8(this, that int8) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_u(this, that uint) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_ui(this, that uint16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_uin(this, that uint32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_uint(this, that uint64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_1(this, that uintptr) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_2(this, that *bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare(*this, *that)
}

func deriveCompare_3(this, that *byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_(*this, *that)
}

func deriveCompare_4(this, that *complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex64(*this, *that)
}

func deriveCompare_5(this, that *complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex32(*this, *that)
}

func deriveCompare_6(this, that *float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_f(*this, *that)
}

func deriveCompare_7(this, that *float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_fl(*this, *that)
}

func deriveCompare_8(this, that *int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_i(*this, *that)
}

func deriveCompare_9(this, that *int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_in(*this, *that)
}

func deriveCompare_10(this, that *int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int(*this, *that)
}

func deriveCompare_11(this, that *int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int6(*this, *that)
}

func deriveCompare_12(this, that *int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_int8(*this, *that)
}

func deriveCompare_13(this, that *string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_s(*this, *that)
}

func deriveCompare_14(this, that *uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_u(*this, *that)
}

func deriveCompare_15(this, that *uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_ui(*this, *that)
}

func deriveCompare_16(this, that *uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_uin(*this, *that)
}

func deriveCompare_17(this, that *uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_uint(*this, *that)
}

func deriveCompare_18(this, that *uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_1(*this, *that)
}

func deriveCompare_19(this, that []bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_20(this, that []complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_21(this, that []complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_22(this, that []float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_f(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_23(this, that []float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_fl(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_24(this, that []int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_25(this, that []int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_in(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_26(this, that []int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_27(this, that []int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_28(this, that []int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_29(this, that []string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_30(this, that []uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_u(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_31(this, that []uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_ui(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_32(this, that []uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uin(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_33(this, that []uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_34(this, that []uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_1(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_35(this, that []*bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_36(this, that []*byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_37(this, that []*complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_4(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_38(this, that []*complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_5(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_39(this, that []*float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_40(this, that []*float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_7(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_41(this, that []*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_42(this, that []*int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_9(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_43(this, that []*int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_44(this, that []*int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_11(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_45(this, that []*int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_12(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_46(this, that []*string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_13(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_47(this, that []*uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_14(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_48(this, that []*uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_15(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_49(this, that []*uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_50(this, that []*uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_17(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_51(this, that []*uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_18(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_52(this, that [1]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_53(this, that [2]byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_54(this, that [3]complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_55(this, that [4]complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_56(this, that [5]float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_f(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_57(this, that [6]float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_fl(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_58(this, that [7]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_59(this, that [8]int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_in(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_60(this, that [9]int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_61(this, that [10]int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_62(this, that [11]int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_63(this, that [12]rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_int(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_64(this, that [13]string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_65(this, that [14]uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_u(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_66(this, that [15]uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_ui(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_67(this, that [16]uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uin(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_68(this, that [17]uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_uint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_69(this, that [18]uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_70(this, that [19]uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_1(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_71(this, that [10]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_72(this, that [1]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_73(this, that [2]*byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_74(this, that [3]*complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_4(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_75(this, that [4]*complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_5(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_76(this, that [5]*float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_6(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_77(this, that [6]*float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_7(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_78(this, that [7]*int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_79(this, that [8]*int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_9(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_80(this, that [9]*int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_81(this, that [10]*int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_11(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_82(this, that [11]*int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_12(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_83(this, that [12]*rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_10(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_84(this, that [13]*string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_13(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_85(this, that [14]*uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_14(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_86(this, that [15]*uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_15(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_87(this, that [16]*uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_88(this, that [17]*uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_17(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_89(this, that [18]*uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_3(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_90(this, that [19]*uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_18(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_91(this, that [10]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_2(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_92(this, that map[string]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys(this))
	thatkeys := deriveSortedStrings(deriveKeys(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_uin(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_93(this, that map[uint8]int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort(deriveKeys_(this))
	thatkeys := deriveSort(deriveKeys_(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_int6(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_94(this, that map[bool]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_(deriveKeys_1(this))
	thatkeys := deriveSort_(deriveKeys_1(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_95(this, that map[string]bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_2(this))
	thatkeys := deriveSortedStrings(deriveKeys_2(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_96(this, that map[complex128]complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_1(deriveKeys_3(this))
	thatkeys := deriveSort_1(deriveKeys_3(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareComplex32(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareComplex64(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_97(this, that map[float64]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_2(deriveKeys_4(this))
	thatkeys := deriveSort_2(deriveKeys_4(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_uin(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_f(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_98(this, that map[uint16]uint8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_3(deriveKeys_5(this))
	thatkeys := deriveSort_3(deriveKeys_5(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_ui(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_99(this, that [][]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_24(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_100(this, that [][]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_29(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_101(this, that [][]*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_41(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_102(this, that *[]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_24(*this, *that)
}

func deriveCompare_103(this, that *[4]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_128(*this, *that)
}

func deriveCompare_104(this, that *map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_129(*this, *that)
}

func deriveCompare_105(this, that []Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(&that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_106(this, that []*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_107(this, that map[Name]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_4(deriveKeys_6(this))
	thatkeys := deriveSort_4(deriveKeys_6(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := thiskey.Compare(&thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_108(this, that map[string]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_7(this))
	thatkeys := deriveSortedStrings(deriveKeys_7(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_109(this, that map[string]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_8(this))
	thatkeys := deriveSortedStrings(deriveKeys_8(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_110(this, that map[string][]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_9(this))
	thatkeys := deriveSortedStrings(deriveKeys_9(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_105(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_111(this, that map[string][]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedStrings(deriveKeys_10(this))
	thatkeys := deriveSortedStrings(deriveKeys_10(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_106(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_112(this, that map[int]RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_11(this))
	thatkeys := deriveSortedInts(deriveKeys_11(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_113(this, that *StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_int6(this.Num, that.Num); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_114(this, that *extra.StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompare_int6(this.Number, that.Number); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_115(this, that *extra.PrivateFieldAndNoEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	if c := deriveCompare_int6(*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())), *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_27(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_11(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())), *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_44(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompare_114(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr()))); c != 0 {
		return c
	}
	return 0
}

func deriveCompare_M(this, that MyEnum) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_116(this, that *MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_M(*this, *that)
}

func deriveCompare_117(this, that []MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_M(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_118(this, that []*MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_116(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_119(this, that map[int32]MyEnum) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_5(deriveKeys_12(this))
	thatkeys := deriveSort_5(deriveKeys_12(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_M(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_int(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_120(this, that map[MyEnum]int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSort_6(deriveKeys_13(this))
	thatkeys := deriveSort_6(deriveKeys_13(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_int(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_M(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_121(this, that [2]MyEnum) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_M(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_122(this, that *MySlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_27(*this, *that)
}

func deriveCompare_123(this, that []MySlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_27(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_D(this, that time.Duration) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompare_124(this, that *time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompare_D(*this, *that)
}

func deriveCompare_125(this, that []time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_D(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_126(this, that []*time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_124(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_127(this, that map[int]time.Duration) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_14(this))
	thatkeys := deriveSortedInts(deriveKeys_14(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_D(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

// deriveCopyTo recursively copies the contents of src into dst.
func deriveCopyTo(src, dst []*bool) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(bool)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_ recursively copies the contents of src into dst.
func deriveCopyTo_(src, dst []*byte) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(byte)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_1 recursively copies the contents of src into dst.
func deriveCopyTo_1(src, dst []*complex128) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(complex128)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_2 recursively copies the contents of src into dst.
func deriveCopyTo_2(src, dst []*complex64) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(complex64)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_3 recursively copies the contents of src into dst.
func deriveCopyTo_3(src, dst []*float64) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(float64)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_4 recursively copies the contents of src into dst.
func deriveCopyTo_4(src, dst []*float32) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(float32)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_5 recursively copies the contents of src into dst.
func deriveCopyTo_5(src, dst []*int) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(int)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_6 recursively copies the contents of src into dst.
func deriveCopyTo_6(src, dst []*int16) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(int16)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_7 recursively copies the contents of src into dst.
func deriveCopyTo_7(src, dst []*int32) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(int32)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_8 recursively copies the contents of src into dst.
func deriveCopyTo_8(src, dst []*int64) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(int64)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_9 recursively copies the contents of src into dst.
func deriveCopyTo_9(src, dst []*int8) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(int8)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_10 recursively copies the contents of src into dst.
func deriveCopyTo_10(src, dst []*string) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(string)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_11 recursively copies the contents of src into dst.
func deriveCopyTo_11(src, dst []*uint) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(uint)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_12 recursively copies the contents of src into dst.
func deriveCopyTo_12(src, dst []*uint16) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(uint16)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_13 recursively copies the contents of src into dst.
func deriveCopyTo_13(src, dst []*uint32) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(uint32)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_14 recursively copies the contents of src into dst.
func deriveCopyTo_14(src, dst []*uint64) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(uint64)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_15 recursively copies the contents of src into dst.
func deriveCopyTo_15(src, dst []*uintptr) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(uintptr)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_16 recursively copies the contents of src into dst.
func deriveCopyTo_16(src, dst map[string]uint32) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_17 recursively copies the contents of src into dst.
func deriveCopyTo_17(src, dst map[uint8]int64) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_18 recursively copies the contents of src into dst.
func deriveCopyTo_18(src, dst map[bool]string) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_19 recursively copies the contents of src into dst.
func deriveCopyTo_19(src, dst map[string]bool) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_20 recursively copies the contents of src into dst.
func deriveCopyTo_20(src, dst map[complex128]complex64) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_21 recursively copies the contents of src into dst.
func deriveCopyTo_21(src, dst map[float64]uint32) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_22 recursively copies the contents of src into dst.
func deriveCopyTo_22(src, dst map[uint16]uint8) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_23 recursively copies the contents of src into dst.
func deriveCopyTo_23(src, dst [][]int) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			if dst[src_i] != nil {
				if len(src_value) > len(dst[src_i]) {
					if cap(dst[src_i]) >= len(src_value) {
						dst[src_i] = (dst[src_i])[:len(src_value)]
					} else {
						dst[src_i] = make([]int, len(src_value))
					}
				} else if len(src_value) < len(dst[src_i]) {
					dst[src_i] = (dst[src_i])[:len(src_value)]
				}
			} else {
				dst[src_i] = make([]int, len(src_value))
			}
			copy(dst[src_i], src_value)
		}
	}
}

// deriveCopyTo_24 recursively copies the contents of src into dst.
func deriveCopyTo_24(src, dst [][]string) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			if dst[src_i] != nil {
				if len(src_value) > len(dst[src_i]) {
					if cap(dst[src_i]) >= len(src_value) {
						dst[src_i] = (dst[src_i])[:len(src_value)]
					} else {
						dst[src_i] = make([]string, len(src_value))
					}
				} else if len(src_value) < len(dst[src_i]) {
					dst[src_i] = (dst[src_i])[:len(src_value)]
				}
			} else {
				dst[src_i] = make([]string, len(src_value))
			}
			copy(dst[src_i], src_value)
		}
	}
}

// deriveCopyTo_25 recursively copies the contents of src into dst.
func deriveCopyTo_25(src, dst [][]*int) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			if dst[src_i] != nil {
				if len(src_value) > len(dst[src_i]) {
					if cap(dst[src_i]) >= len(src_value) {
						dst[src_i] = (dst[src_i])[:len(src_value)]
					} else {
						dst[src_i] = make([]*int, len(src_value))
					}
				} else if len(src_value) < len(dst[src_i]) {
					dst[src_i] = (dst[src_i])[:len(src_value)]
				}
			} else {
				dst[src_i] = make([]*int, len(src_value))
			}
			deriveCopyTo_5(src_value, dst[src_i])
		}
	}
}

// deriveCopyTo_26 recursively copies the contents of src into dst.
func deriveCopyTo_26(src, dst *[]int) {
	if *src == nil {
		*dst = nil
	} else {
		if *dst != nil {
			if len(*src) > len(*dst) {
				if cap(*dst) >= len(*src) {
					*dst = (*dst)[:len(*src)]
				} else {
					*dst = make([]int, len(*src))
				}
			} else if len(*src) < len(*dst) {
				*dst = (*dst)[:len(*src)]
			}
		} else {
			*dst = make([]int, len(*src))
		}
		copy(*dst, *src)
	}
}

// deriveCopyTo_27 recursively copies the contents of src into dst.
func deriveCopyTo_27(src, dst *map[int]int) {
	if *src != nil {
		*dst = make(map[int]int, len(*src))
		deriveCopyTo_43(*src, *dst)
	} else {
		*dst = nil
	}
}

// deriveCopyTo_28 recursively copies the contents of src into dst.
func deriveCopyTo_28(src, dst []*Name) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(Name)
			src_value.CopyTo(dst[src_i])
		}
	}
}

// deriveCopyTo_29 recursively copies the contents of src into dst.
func deriveCopyTo_29(src, dst map[Name]string) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_30 recursively copies the contents of src into dst.
func deriveCopyTo_30(src, dst map[string]Name) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_31 recursively copies the contents of src into dst.
func deriveCopyTo_31(src, dst map[string]*Name) {
	for src_key, src_value := range src {
		if src_value == nil {
			dst[src_key] = nil
		}
		if src_value == nil {
			dst[src_key] = nil
		} else {
			dst[src_key] = new(Name)
			src_value.CopyTo(dst[src_key])
		}
	}
}

// deriveCopyTo_32 recursively copies the contents of src into dst.
func deriveCopyTo_32(src, dst map[string][]Name) {
	for src_key, src_value := range src {
		if src_value == nil {
			dst[src_key] = nil
		}
		if src_value == nil {
			dst[src_key] = nil
		} else {
			if dst[src_key] != nil {
				if len(src_value) > len(dst[src_key]) {
					if cap(dst[src_key]) >= len(src_value) {
						dst[src_key] = (dst[src_key])[:len(src_value)]
					} else {
						dst[src_key] = make([]Name, len(src_value))
					}
				} else if len(src_value) < len(dst[src_key]) {
					dst[src_key] = (dst[src_key])[:len(src_value)]
				}
			} else {
				dst[src_key] = make([]Name, len(src_value))
			}
			copy(dst[src_key], src_value)
		}
	}
}

// deriveCopyTo_33 recursively copies the contents of src into dst.
func deriveCopyTo_33(src, dst map[string][]*Name) {
	for src_key, src_value := range src {
		if src_value == nil {
			dst[src_key] = nil
		}
		if src_value == nil {
			dst[src_key] = nil
		} else {
			if dst[src_key] != nil {
				if len(src_value) > len(dst[src_key]) {
					if cap(dst[src_key]) >= len(src_value) {
						dst[src_key] = (dst[src_key])[:len(src_value)]
					} else {
						dst[src_key] = make([]*Name, len(src_value))
					}
				} else if len(src_value) < len(dst[src_key]) {
					dst[src_key] = (dst[src_key])[:len(src_value)]
				}
			} else {
				dst[src_key] = make([]*Name, len(src_value))
			}
			deriveCopyTo_28(src_value, dst[src_key])
		}
	}
}

// deriveCopyTo_34 recursively copies the contents of src into dst.
func deriveCopyTo_34(src, dst map[int]RecursiveType) {
	for src_key, src_value := range src {
		field := new(RecursiveType)
		src_value.CopyTo(field)
		dst[src_key] = *field
	}
}

// deriveCopyTo_35 recursively copies the contents of src into dst.
func deriveCopyTo_35(src, dst *extra.PrivateFieldAndNoEqualMethod) {
	src_v := reflect.Indirect(reflect.ValueOf(src))
	dst_v := reflect.Indirect(reflect.ValueOf(dst))
	*(*int64)(unsafe.Pointer(dst_v.FieldByName("number").UnsafeAddr())) = *(*int64)(unsafe.Pointer(src_v.FieldByName("number").UnsafeAddr()))
	if *(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr())) == nil {
		*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) = nil
	} else {
		if *(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) != nil {
			if len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr()))) > len(*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr()))) {
				if cap(*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr()))) >= len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr()))) {
					*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) = (*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())))[:len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr())))]
				} else {
					*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) = make([]int64, len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr()))))
				}
			} else if len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr()))) < len(*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr()))) {
				*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) = (*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())))[:len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr())))]
			}
		} else {
			*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())) = make([]int64, len(*(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr()))))
		}
		copy(*(*[]int64)(unsafe.Pointer(dst_v.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(src_v.FieldByName("numbers").UnsafeAddr())))
	}
	if *(**int64)(unsafe.Pointer(src_v.FieldByName("ptr").UnsafeAddr())) == nil {
		*(**int64)(unsafe.Pointer(dst_v.FieldByName("ptr").UnsafeAddr())) = nil
	} else {
		*(**int64)(unsafe.Pointer(dst_v.FieldByName("ptr").UnsafeAddr())) = new(int64)
		**(**int64)(unsafe.Pointer(dst_v.FieldByName("ptr").UnsafeAddr())) = **(**int64)(unsafe.Pointer(src_v.FieldByName("ptr").UnsafeAddr()))
	}
	if *(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr())) == nil {
		*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) = nil
	} else {
		if *(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) != nil {
			if len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr()))) > len(*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr()))) {
				if cap(*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr()))) >= len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr()))) {
					*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) = (*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())))[:len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr())))]
				} else {
					*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) = make([]*int64, len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr()))))
				}
			} else if len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr()))) < len(*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr()))) {
				*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) = (*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())))[:len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr())))]
			}
		} else {
			*(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())) = make([]*int64, len(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr()))))
		}
		deriveCopyTo_8(*(*[]*int64)(unsafe.Pointer(src_v.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(dst_v.FieldByName("numberpts").UnsafeAddr())))
	}
	if *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(src_v.FieldByName("strct").UnsafeAddr())) == nil {
		*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(dst_v.FieldByName("strct").UnsafeAddr())) = nil
	} else {
		*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(dst_v.FieldByName("strct").UnsafeAddr())) = new(extra.StructWithoutEqualMethod)
		**(**extra.StructWithoutEqualMethod)(unsafe.Pointer(dst_v.FieldByName("strct").UnsafeAddr())) = **(**extra.StructWithoutEqualMethod)(unsafe.Pointer(src_v.FieldByName("strct").UnsafeAddr()))
	}
}

// deriveCopyTo_36 recursively copies the contents of src into dst.
func deriveCopyTo_36(src, dst []*MyEnum) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(MyEnum)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_37 recursively copies the contents of src into dst.
func deriveCopyTo_37(src, dst map[int32]MyEnum) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_38 recursively copies the contents of src into dst.
func deriveCopyTo_38(src, dst map[MyEnum]int32) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

// deriveCopyTo_39 recursively copies the contents of src into dst.
func deriveCopyTo_39(src, dst *MySlice) {
	if *src == nil {
		*dst = nil
	} else {
		if *dst != nil {
			if len(*src) > len(*dst) {
				if cap(*dst) >= len(*src) {
					*dst = (*dst)[:len(*src)]
				} else {
					*dst = make([]int64, len(*src))
				}
			} else if len(*src) < len(*dst) {
				*dst = (*dst)[:len(*src)]
			}
		} else {
			*dst = make([]int64, len(*src))
		}
		copy(*dst, *src)
	}
}

// deriveCopyTo_40 recursively copies the contents of src into dst.
func deriveCopyTo_40(src, dst []MySlice) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			if dst[src_i] != nil {
				if len(src_value) > len(dst[src_i]) {
					if cap(dst[src_i]) >= len(src_value) {
						dst[src_i] = (dst[src_i])[:len(src_value)]
					} else {
						dst[src_i] = make([]int64, len(src_value))
					}
				} else if len(src_value) < len(dst[src_i]) {
					dst[src_i] = (dst[src_i])[:len(src_value)]
				}
			} else {
				dst[src_i] = make([]int64, len(src_value))
			}
			copy(dst[src_i], src_value)
		}
	}
}

// deriveCopyTo_41 recursively copies the contents of src into dst.
func deriveCopyTo_41(src, dst []*time.Duration) {
	for src_i, src_value := range src {
		if src_value == nil {
			dst[src_i] = nil
		} else {
			dst[src_i] = new(time.Duration)
			*dst[src_i] = *src_value
		}
	}
}

// deriveCopyTo_42 recursively copies the contents of src into dst.
func deriveCopyTo_42(src, dst map[int]time.Duration) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

func deriveTuple(v0 int, v1 error) func() (int, error) {
	return func() (int, error) {
		return v0, v1
	}
}

func deriveTuple_(v0 int, v1 string, v2 error) func() (int, string, error) {
	return func() (int, string, error) {
		return v0, v1, v2
	}
}

func deriveTuple_i(v0 int64, v1 error) func() (int64, error) {
	return func() (int64, error) {
		return v0, v1
	}
}

func deriveEqual_(this, that []bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_1(this, that []complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_2(this, that []complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_3(this, that []float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_4(this, that []float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_5(this, that []int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_6(this, that []int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_7(this, that []int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_8(this, that []int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_9(this, that []string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_10(this, that []uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_11(this, that []uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_12(this, that []uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_13(this, that []uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_14(this, that []uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_15(this, that []*bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_16(this, that []*byte) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_17(this, that []*complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_18(this, that []*complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_19(this, that []*float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_20(this, that []*float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_21(this, that []*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_22(this, that []*int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_23(this, that []*int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_24(this, that []*int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_25(this, that []*int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_26(this, that []*string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_27(this, that []*uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_28(this, that []*uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_29(this, that []*uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_30(this, that []*uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_31(this, that []*uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_32(this, that [1]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_33(this, that [2]*byte) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_34(this, that [3]*complex128) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_35(this, that [4]*complex64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_36(this, that [5]*float64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_37(this, that [6]*float32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_38(this, that [7]*int) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_39(this, that [8]*int16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_40(this, that [9]*int32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_41(this, that [10]*int64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_42(this, that [11]*int8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_43(this, that [12]*rune) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_44(this, that [13]*string) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_45(this, that [14]*uint) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_46(this, that [15]*uint16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_47(this, that [16]*uint32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_48(this, that [17]*uint64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_49(this, that [18]*uint8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_50(this, that [19]*uintptr) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_51(this, that [10]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqual_52(this, that map[string]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_53(this, that map[uint8]int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_54(this, that map[bool]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_55(this, that map[string]bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_56(this, that map[complex128]complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_57(this, that map[float64]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_58(this, that map[uint16]uint8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_59(this, that [][]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqualSliceOfint(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_60(this, that [][]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_9(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_61(this, that [][]*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_21(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_62(this, that []Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_63(this, that []*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i].Equal(that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_64(this, that map[Name]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_65(this, that map[string]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_66(this, that map[string]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_67(this, that map[string][]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqual_62(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_68(this, that map[string][]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqual_63(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_69(this, that map[int]RecursiveType) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(&thatv)) {
			return false
		}
	}
	return true
}

func deriveEqual_70(this, that *StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Num == that.Num
}

func deriveEqual_71(this, that *extra.StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Number == that.Number
}

func deriveEqual_72(this, that *extra.PrivateFieldAndNoEqualMethod) bool {
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())) == *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr())) &&
			deriveEqual_7(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))) &&
			((*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) == nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) == nil) || (*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) != nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) != nil && *(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr()))) == *(*(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))))) &&
			deriveEqual_24(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))) &&
			deriveEqual_71(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr())))
}

func deriveEqual_73(this, that *MyEnum) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqual_74(this, that []MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_75(this, that []*MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_73(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_76(this, that map[int32]MyEnum) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_77(this, that map[MyEnum]int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_78(this, that *MySlice) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqual_79(this, that []MySlice) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_7(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_80(this, that *time.Duration) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqual_81(this, that []time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqual_82(this, that []*time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_80(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqual_83(this, that map[int]time.Duration) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqual_84(this, that []*vendortest.AVendoredObject) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqual_85(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveSort(list []uint8) []uint8 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_(list []bool) []bool {
	sort.Slice(list, func(i, j int) bool { return deriveCompare(list[i], list[j]) < 0 })
	return list
}

func deriveSort_1(list []complex128) []complex128 {
	sort.Slice(list, func(i, j int) bool { return deriveCompareComplex64(list[i], list[j]) < 0 })
	return list
}

func deriveSort_2(list []float64) []float64 {
	sort.Float64s(list)
	return list
}

func deriveSort_3(list []uint16) []uint16 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_4(list []Name) []Name {
	sort.Slice(list, func(i, j int) bool { return deriveCompare_N(list[i], list[j]) < 0 })
	return list
}

func deriveSort_5(list []int32) []int32 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSort_6(list []MyEnum) []MyEnum {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveKeys(m map[string]uint32) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_(m map[uint8]int64) []uint8 {
	keys := make([]uint8, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_1(m map[bool]string) []bool {
	keys := make([]bool, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_2(m map[string]bool) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_3(m map[complex128]complex64) []complex128 {
	keys := make([]complex128, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_4(m map[float64]uint32) []float64 {
	keys := make([]float64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_5(m map[uint16]uint8) []uint16 {
	keys := make([]uint16, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_6(m map[Name]string) []Name {
	keys := make([]Name, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_7(m map[string]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_8(m map[string]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_9(m map[string][]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_10(m map[string][]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_11(m map[int]RecursiveType) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_12(m map[int32]MyEnum) []int32 {
	keys := make([]int32, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_13(m map[MyEnum]int32) []MyEnum {
	keys := make([]MyEnum, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeys_14(m map[int]time.Duration) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveGoString_62(this *bool) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *bool {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(bool)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_63(this *byte) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *byte {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(byte)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_64(this *complex128) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *complex128 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(complex128)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_65(this *complex64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *complex64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(complex64)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_66(this *float64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *float64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(float64)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_67(this *float32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *float32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(float32)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_68(this *int16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *int16 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(int16)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_69(this *int32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *int32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(int32)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_70(this *int64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *int64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(int64)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_71(this *int8) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *int8 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(int8)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_72(this *string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *string {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(string)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_73(this *uint) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *uint {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(uint)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_74(this *uint16) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *uint16 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(uint16)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_75(this *uint32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *uint32 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(uint32)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_76(this *uint64) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *uint64 {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(uint64)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_77(this *uintptr) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *uintptr {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(uintptr)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_78(this []string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []string {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return %#v\n", this)
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_s(this string) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() string {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_R(this RecursiveType) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.RecursiveType {\n")
	fmt.Fprintf(buf, "this := &test.RecursiveType{}\n")
	if this.Bytes != nil {
		fmt.Fprintf(buf, "this.Bytes = %#v\n", this.Bytes)
	}
	if this.N != nil {
		fmt.Fprintf(buf, "this.N = %s\n", deriveGoString_47(this.N))
	}
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_M(this MyEnum) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.MyEnum {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_i(this int32) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() int32 {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_My(this MySlice) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() test.MySlice {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return %#v\n", this)
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveGoString_D(this time.Duration) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() time.Duration {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

func deriveCompare_s(this, that string) int {
	return strings.Compare(this, that)
}

func deriveCompare_128(this, that [4]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompare_i(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompare_129(this, that map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortedInts(deriveKeys_15(this))
	thatkeys := deriveSortedInts(deriveKeys_15(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompare_i(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompare_i(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompare_N(this, that Name) int {
	return (&this).Compare(&that)
}

// deriveCopyTo_43 recursively copies the contents of src into dst.
func deriveCopyTo_43(src, dst map[int]int) {
	for src_key, src_value := range src {
		dst[src_key] = src_value
	}
}

func deriveEqual_85(this, that *vendortest.AVendoredObject) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name
}

func deriveKeys_15(m map[int]int) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}
