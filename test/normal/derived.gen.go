// Code generated by goderive DO NOT EDIT.

package test

import (
	"bytes"
	extra "github.com/awalterschulze/goderive/test/extra"
	"reflect"
	"sort"
	"strings"
	"unsafe"
)

func deriveComparePtrToBuiltInTypes(this, that *BuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparebool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveComparebyte(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareComplex64(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareComplex32(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveComparefloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveComparefloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompareint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompareint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompareint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompareint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompareint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveComparerune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := strings.Compare(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompareuint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompareuint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompareuint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompareuint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompareuint8(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompareuintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparePtrTobool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveComparePtrTobyte(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveComparePtrTocomplex128(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveComparePtrTocomplex64(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveComparePtrTofloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveComparePtrTofloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveComparePtrToint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveComparePtrToint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveComparePtrToint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveComparePtrToint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveComparePtrToint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveComparePtrTorune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveComparePtrTostring(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveComparePtrTouint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveComparePtrTouint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveComparePtrTouint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveComparePtrTouint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveComparePtrTouint8(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveComparePtrTouintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareSliceOfbool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfcomplex128(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfcomplex64(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOffloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOffloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfrune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfstring(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfuint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfuint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfuint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfuint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfuintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareSliceOfPtrTobool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTobyte(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTocomplex128(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTocomplex64(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTofloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTofloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTorune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTostring(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouint8(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrTouintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareArray1Ofbool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompareArray2Ofbyte(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareArray3Ofcomplex128(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareArray4Ofcomplex64(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompareArray5Offloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompareArray6Offloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompareArray7Ofint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompareArray8Ofint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompareArray9Ofint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompareArray10Ofint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompareArray11Ofint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompareArray12Ofrune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompareArray13Ofstring(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompareArray14Ofuint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompareArray15Ofuint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompareArray16Ofuint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompareArray17Ofuint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompareArray18Ofuint8(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompareArray19Ofuintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompareArray10Ofbool(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareArray1OfPtrTobool(this.Bool, that.Bool); c != 0 {
		return c
	}
	if c := deriveCompareArray2OfPtrTobyte(this.Byte, that.Byte); c != 0 {
		return c
	}
	if c := deriveCompareArray3OfPtrTocomplex128(this.Complex128, that.Complex128); c != 0 {
		return c
	}
	if c := deriveCompareArray4OfPtrTocomplex64(this.Complex64, that.Complex64); c != 0 {
		return c
	}
	if c := deriveCompareArray5OfPtrTofloat64(this.Float64, that.Float64); c != 0 {
		return c
	}
	if c := deriveCompareArray6OfPtrTofloat32(this.Float32, that.Float32); c != 0 {
		return c
	}
	if c := deriveCompareArray7OfPtrToint(this.Int, that.Int); c != 0 {
		return c
	}
	if c := deriveCompareArray8OfPtrToint16(this.Int16, that.Int16); c != 0 {
		return c
	}
	if c := deriveCompareArray9OfPtrToint32(this.Int32, that.Int32); c != 0 {
		return c
	}
	if c := deriveCompareArray10OfPtrToint64(this.Int64, that.Int64); c != 0 {
		return c
	}
	if c := deriveCompareArray11OfPtrToint8(this.Int8, that.Int8); c != 0 {
		return c
	}
	if c := deriveCompareArray12OfPtrTorune(this.Rune, that.Rune); c != 0 {
		return c
	}
	if c := deriveCompareArray13OfPtrTostring(this.String, that.String); c != 0 {
		return c
	}
	if c := deriveCompareArray14OfPtrTouint(this.Uint, that.Uint); c != 0 {
		return c
	}
	if c := deriveCompareArray15OfPtrTouint16(this.Uint16, that.Uint16); c != 0 {
		return c
	}
	if c := deriveCompareArray16OfPtrTouint32(this.Uint32, that.Uint32); c != 0 {
		return c
	}
	if c := deriveCompareArray17OfPtrTouint64(this.Uint64, that.Uint64); c != 0 {
		return c
	}
	if c := deriveCompareArray18OfPtrTouint8(this.Uint8, that.Uint8); c != 0 {
		return c
	}
	if c := deriveCompareArray19OfPtrTouintptr(this.UintPtr, that.UintPtr); c != 0 {
		return c
	}
	if c := deriveCompareArray10OfPtrTobool(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareMapOfstringTouint32(this.StringToUint32, that.StringToUint32); c != 0 {
		return c
	}
	if c := deriveCompareMapOfuint8Toint64(this.Uint64ToInt64, that.Uint64ToInt64); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareMapOfboolTostring(this.BoolToString, that.BoolToString); c != 0 {
		return c
	}
	if c := deriveCompareMapOfstringTobool(this.StringToBool, that.StringToBool); c != 0 {
		return c
	}
	if c := deriveCompareMapOfcomplex128Tocomplex64(this.Complex128ToComplex64, that.Complex128ToComplex64); c != 0 {
		return c
	}
	if c := deriveCompareMapOffloat64Touint32(this.Float64ToUint32, that.Float64ToUint32); c != 0 {
		return c
	}
	if c := deriveCompareMapOfuint16Touint8(this.Uint16ToUint8, that.Uint16ToUint8); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToSliceToSlice(this, that *SliceToSlice) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareSliceOfSliceOfint(this.Ints, that.Ints); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfSliceOfstring(this.Strings, that.Strings); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfSliceOfPtrToint(this.IntPtrs, that.IntPtrs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToPtrTo(this, that *PtrTo) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparePtrToint(this.Basic, that.Basic); c != 0 {
		return c
	}
	if c := deriveComparePtrToSliceOfint(this.Slice, that.Slice); c != 0 {
		return c
	}
	if c := deriveComparePtrToArray4Ofint(this.Array, that.Array); c != 0 {
		return c
	}
	if c := deriveComparePtrToMapOfintToint(this.Map, that.Map); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToName(this, that *Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := strings.Compare(this.Name, that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructs(this, that *Structs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Struct.Compare(&that.Struct); c != 0 {
		return c
	}
	if c := this.PtrToStruct.Compare(that.PtrToStruct); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfName(this.SliceOfStructs, that.SliceOfStructs); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToName(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToMapWithStructs(this, that *MapWithStructs) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareMapOfNameTostring(this.NameToString, that.NameToString); c != 0 {
		return c
	}
	if c := deriveCompareMapOfstringToName(this.StringToName, that.StringToName); c != 0 {
		return c
	}
	if c := deriveCompareMapOfstringToPtrToName(this.StringToPtrToName, that.StringToPtrToName); c != 0 {
		return c
	}
	if c := deriveCompareMapOfstringToSliceOfName(this.StringToSliceOfName, that.StringToSliceOfName); c != 0 {
		return c
	}
	if c := deriveCompareMapOfstringToSliceOfPtrToName(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToRecursiveType(this, that *RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := bytes.Compare(this.Bytes, that.Bytes); c != 0 {
		return c
	}
	if c := deriveCompareMapOfintToRecursiveType(this.N, that.N); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct1(this, that *EmbeddedStruct1) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Name.Compare(&that.Name); c != 0 {
		return c
	}
	if c := this.Structs.Compare(that.Structs); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToEmbeddedStruct2(this, that *EmbeddedStruct2) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := this.Structs.Compare(&that.Structs); c != 0 {
		return c
	}
	if c := this.Name.Compare(that.Name); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparePtrToStructWithoutEqualMethod(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveComparePtrToStructWithoutEqualMethod(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparePtrToextra_StructWithoutEqualMethod(this.A, that.A); c != 0 {
		return c
	}
	if c := deriveComparePtrToextra_StructWithoutEqualMethod(&this.B, &that.B); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveComparePtrToextra_PrivateFieldAndNoEqualMethod(this.A, that.A); c != 0 {
		return c
	}
	return 0
}

func deriveCompareComplex32(this, that complex64) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareComplex64(this, that complex128) int {
	if thisr, thatr := real(this), real(that); thisr == thatr {
		if thisi, thati := imag(this), imag(that); thisi == thati {
			return 0
		} else if thisi < thati {
			return -1
		} else {
			return 1
		}
	} else if thisr < thatr {
		return -1
	} else {
		return 1
	}
}

func deriveCompareDeriveTheDerived(this, that *DeriveTheDerived) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareint(this.Field, that.Field); c != 0 {
		return c
	}
	return 0
}

func deriveSortedInts(src []int) []int {
	dst := make([]int, len(src))
	copy(dst, src)
	sort.Ints(dst)
	return dst
}

func deriveSortedStrings(src []string) []string {
	dst := make([]string, len(src))
	copy(dst, src)
	sort.Strings(dst)
	return dst
}

func deriveSortedInt64s(src []int64) []int64 {
	dst := make([]int64, len(src))
	copy(dst, src)
	sort.Slice(dst, func(i, j int) bool { return dst[i] < dst[j] })
	return dst
}

func deriveEqualPtrToBuiltInTypes(this, that *BuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr
}

func deriveEqualPtrToPtrToBuiltInTypes(this, that *PtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Bool == nil && that.Bool == nil) || (this.Bool != nil && that.Bool != nil && *(this.Bool) == *(that.Bool))) &&
			((this.Byte == nil && that.Byte == nil) || (this.Byte != nil && that.Byte != nil && *(this.Byte) == *(that.Byte))) &&
			((this.Complex128 == nil && that.Complex128 == nil) || (this.Complex128 != nil && that.Complex128 != nil && *(this.Complex128) == *(that.Complex128))) &&
			((this.Complex64 == nil && that.Complex64 == nil) || (this.Complex64 != nil && that.Complex64 != nil && *(this.Complex64) == *(that.Complex64))) &&
			((this.Float64 == nil && that.Float64 == nil) || (this.Float64 != nil && that.Float64 != nil && *(this.Float64) == *(that.Float64))) &&
			((this.Float32 == nil && that.Float32 == nil) || (this.Float32 != nil && that.Float32 != nil && *(this.Float32) == *(that.Float32))) &&
			((this.Int == nil && that.Int == nil) || (this.Int != nil && that.Int != nil && *(this.Int) == *(that.Int))) &&
			((this.Int16 == nil && that.Int16 == nil) || (this.Int16 != nil && that.Int16 != nil && *(this.Int16) == *(that.Int16))) &&
			((this.Int32 == nil && that.Int32 == nil) || (this.Int32 != nil && that.Int32 != nil && *(this.Int32) == *(that.Int32))) &&
			((this.Int64 == nil && that.Int64 == nil) || (this.Int64 != nil && that.Int64 != nil && *(this.Int64) == *(that.Int64))) &&
			((this.Int8 == nil && that.Int8 == nil) || (this.Int8 != nil && that.Int8 != nil && *(this.Int8) == *(that.Int8))) &&
			((this.Rune == nil && that.Rune == nil) || (this.Rune != nil && that.Rune != nil && *(this.Rune) == *(that.Rune))) &&
			((this.String == nil && that.String == nil) || (this.String != nil && that.String != nil && *(this.String) == *(that.String))) &&
			((this.Uint == nil && that.Uint == nil) || (this.Uint != nil && that.Uint != nil && *(this.Uint) == *(that.Uint))) &&
			((this.Uint16 == nil && that.Uint16 == nil) || (this.Uint16 != nil && that.Uint16 != nil && *(this.Uint16) == *(that.Uint16))) &&
			((this.Uint32 == nil && that.Uint32 == nil) || (this.Uint32 != nil && that.Uint32 != nil && *(this.Uint32) == *(that.Uint32))) &&
			((this.Uint64 == nil && that.Uint64 == nil) || (this.Uint64 != nil && that.Uint64 != nil && *(this.Uint64) == *(that.Uint64))) &&
			((this.Uint8 == nil && that.Uint8 == nil) || (this.Uint8 != nil && that.Uint8 != nil && *(this.Uint8) == *(that.Uint8))) &&
			((this.UintPtr == nil && that.UintPtr == nil) || (this.UintPtr != nil && that.UintPtr != nil && *(this.UintPtr) == *(that.UintPtr)))
}

func deriveEqualPtrToSliceOfBuiltInTypes(this, that *SliceOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualSliceOfbool(this.Bool, that.Bool) &&
			bytes.Equal(this.Byte, that.Byte) &&
			deriveEqualSliceOfcomplex128(this.Complex128, that.Complex128) &&
			deriveEqualSliceOfcomplex64(this.Complex64, that.Complex64) &&
			deriveEqualSliceOffloat64(this.Float64, that.Float64) &&
			deriveEqualSliceOffloat32(this.Float32, that.Float32) &&
			deriveEqualSliceOfint(this.Int, that.Int) &&
			deriveEqualSliceOfint16(this.Int16, that.Int16) &&
			deriveEqualSliceOfint32(this.Int32, that.Int32) &&
			deriveEqualSliceOfint64(this.Int64, that.Int64) &&
			deriveEqualSliceOfint8(this.Int8, that.Int8) &&
			deriveEqualSliceOfrune(this.Rune, that.Rune) &&
			deriveEqualSliceOfstring(this.String, that.String) &&
			deriveEqualSliceOfuint(this.Uint, that.Uint) &&
			deriveEqualSliceOfuint16(this.Uint16, that.Uint16) &&
			deriveEqualSliceOfuint32(this.Uint32, that.Uint32) &&
			deriveEqualSliceOfuint64(this.Uint64, that.Uint64) &&
			bytes.Equal(this.Uint8, that.Uint8) &&
			deriveEqualSliceOfuintptr(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToSliceOfPtrToBuiltInTypes(this, that *SliceOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualSliceOfPtrTobool(this.Bool, that.Bool) &&
			deriveEqualSliceOfPtrTobyte(this.Byte, that.Byte) &&
			deriveEqualSliceOfPtrTocomplex128(this.Complex128, that.Complex128) &&
			deriveEqualSliceOfPtrTocomplex64(this.Complex64, that.Complex64) &&
			deriveEqualSliceOfPtrTofloat64(this.Float64, that.Float64) &&
			deriveEqualSliceOfPtrTofloat32(this.Float32, that.Float32) &&
			deriveEqualSliceOfPtrToint(this.Int, that.Int) &&
			deriveEqualSliceOfPtrToint16(this.Int16, that.Int16) &&
			deriveEqualSliceOfPtrToint32(this.Int32, that.Int32) &&
			deriveEqualSliceOfPtrToint64(this.Int64, that.Int64) &&
			deriveEqualSliceOfPtrToint8(this.Int8, that.Int8) &&
			deriveEqualSliceOfPtrTorune(this.Rune, that.Rune) &&
			deriveEqualSliceOfPtrTostring(this.String, that.String) &&
			deriveEqualSliceOfPtrTouint(this.Uint, that.Uint) &&
			deriveEqualSliceOfPtrTouint16(this.Uint16, that.Uint16) &&
			deriveEqualSliceOfPtrTouint32(this.Uint32, that.Uint32) &&
			deriveEqualSliceOfPtrTouint64(this.Uint64, that.Uint64) &&
			deriveEqualSliceOfPtrTouint8(this.Uint8, that.Uint8) &&
			deriveEqualSliceOfPtrTouintptr(this.UintPtr, that.UintPtr)
}

func deriveEqualPtrToArrayOfBuiltInTypes(this, that *ArrayOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Bool == that.Bool &&
			this.Byte == that.Byte &&
			this.Complex128 == that.Complex128 &&
			this.Complex64 == that.Complex64 &&
			this.Float64 == that.Float64 &&
			this.Float32 == that.Float32 &&
			this.Int == that.Int &&
			this.Int16 == that.Int16 &&
			this.Int32 == that.Int32 &&
			this.Int64 == that.Int64 &&
			this.Int8 == that.Int8 &&
			this.Rune == that.Rune &&
			this.String == that.String &&
			this.Uint == that.Uint &&
			this.Uint16 == that.Uint16 &&
			this.Uint32 == that.Uint32 &&
			this.Uint64 == that.Uint64 &&
			this.Uint8 == that.Uint8 &&
			this.UintPtr == that.UintPtr &&
			this.AnotherBoolOfDifferentSize == that.AnotherBoolOfDifferentSize
}

func deriveEqualPtrToArrayOfPtrToBuiltInTypes(this, that *ArrayOfPtrToBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualArray1OfPtrTobool(this.Bool, that.Bool) &&
			deriveEqualArray2OfPtrTobyte(this.Byte, that.Byte) &&
			deriveEqualArray3OfPtrTocomplex128(this.Complex128, that.Complex128) &&
			deriveEqualArray4OfPtrTocomplex64(this.Complex64, that.Complex64) &&
			deriveEqualArray5OfPtrTofloat64(this.Float64, that.Float64) &&
			deriveEqualArray6OfPtrTofloat32(this.Float32, that.Float32) &&
			deriveEqualArray7OfPtrToint(this.Int, that.Int) &&
			deriveEqualArray8OfPtrToint16(this.Int16, that.Int16) &&
			deriveEqualArray9OfPtrToint32(this.Int32, that.Int32) &&
			deriveEqualArray10OfPtrToint64(this.Int64, that.Int64) &&
			deriveEqualArray11OfPtrToint8(this.Int8, that.Int8) &&
			deriveEqualArray12OfPtrTorune(this.Rune, that.Rune) &&
			deriveEqualArray13OfPtrTostring(this.String, that.String) &&
			deriveEqualArray14OfPtrTouint(this.Uint, that.Uint) &&
			deriveEqualArray15OfPtrTouint16(this.Uint16, that.Uint16) &&
			deriveEqualArray16OfPtrTouint32(this.Uint32, that.Uint32) &&
			deriveEqualArray17OfPtrTouint64(this.Uint64, that.Uint64) &&
			deriveEqualArray18OfPtrTouint8(this.Uint8, that.Uint8) &&
			deriveEqualArray19OfPtrTouintptr(this.UintPtr, that.UintPtr) &&
			deriveEqualArray10OfPtrTobool(this.AnotherBoolOfDifferentSize, that.AnotherBoolOfDifferentSize)
}

func deriveEqualPtrToMapsOfSimplerBuiltInTypes(this, that *MapsOfSimplerBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualMapOfstringTouint32(this.StringToUint32, that.StringToUint32) &&
			deriveEqualMapOfuint8Toint64(this.Uint64ToInt64, that.Uint64ToInt64)
}

func deriveEqualPtrToMapsOfBuiltInTypes(this, that *MapsOfBuiltInTypes) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualMapOfboolTostring(this.BoolToString, that.BoolToString) &&
			deriveEqualMapOfstringTobool(this.StringToBool, that.StringToBool) &&
			deriveEqualMapOfcomplex128Tocomplex64(this.Complex128ToComplex64, that.Complex128ToComplex64) &&
			deriveEqualMapOffloat64Touint32(this.Float64ToUint32, that.Float64ToUint32) &&
			deriveEqualMapOfuint16Touint8(this.Uint16ToUint8, that.Uint16ToUint8)
}

func deriveEqualPtrToSliceToSlice(this, that *SliceToSlice) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualSliceOfSliceOfint(this.Ints, that.Ints) &&
			deriveEqualSliceOfSliceOfstring(this.Strings, that.Strings) &&
			deriveEqualSliceOfSliceOfPtrToint(this.IntPtrs, that.IntPtrs)
}

func deriveEqualPtrToPtrTo(this, that *PtrTo) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Basic == nil && that.Basic == nil) || (this.Basic != nil && that.Basic != nil && *(this.Basic) == *(that.Basic))) &&
			((this.Slice == nil && that.Slice == nil) || (this.Slice != nil && that.Slice != nil && deriveEqualSliceOfint(*(this.Slice), *(that.Slice)))) &&
			((this.Array == nil && that.Array == nil) || (this.Array != nil && that.Array != nil && *(this.Array) == *(that.Array))) &&
			((this.Map == nil && that.Map == nil) || (this.Map != nil && that.Map != nil && deriveEqualMapOfintToint(*(this.Map), *(that.Map))))
}

func deriveEqualPtrToName(this, that *Name) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name
}

func deriveEqualPtrToStructs(this, that *Structs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Struct == that.Struct &&
			this.PtrToStruct.Equal(that.PtrToStruct) &&
			deriveEqualSliceOfName(this.SliceOfStructs, that.SliceOfStructs) &&
			deriveEqualSliceOfPtrToName(this.SliceToPtrOfStruct, that.SliceToPtrOfStruct)
}

func deriveEqualPtrToMapWithStructs(this, that *MapWithStructs) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualMapOfNameTostring(this.NameToString, that.NameToString) &&
			deriveEqualMapOfstringToName(this.StringToName, that.StringToName) &&
			deriveEqualMapOfstringToPtrToName(this.StringToPtrToName, that.StringToPtrToName) &&
			deriveEqualMapOfstringToSliceOfName(this.StringToSliceOfName, that.StringToSliceOfName) &&
			deriveEqualMapOfstringToSliceOfPtrToName(this.StringToSliceOfPtrToName, that.StringToSliceOfPtrToName)
}

func deriveEqualPtrToRecursiveType(this, that *RecursiveType) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			bytes.Equal(this.Bytes, that.Bytes) &&
			deriveEqualMapOfintToRecursiveType(this.N, that.N)
}

func deriveEqualPtrToEmbeddedStruct1(this, that *EmbeddedStruct1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Structs.Equal(that.Structs)
}

func deriveEqualPtrToEmbeddedStruct2(this, that *EmbeddedStruct2) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Structs.Equal(&that.Structs) &&
			this.Name.Equal(that.Name)
}

func deriveEqualPtrToUnnamedStruct(this, that *UnnamedStruct) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Unnamed == that.Unnamed
}

func deriveEqualPtrToStructWithStructFieldWithoutEqualMethod(this, that *StructWithStructFieldWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualPtrToStructWithoutEqualMethod(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToStructWithStructWithFromAnotherPackage(this, that *StructWithStructWithFromAnotherPackage) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualPtrToextra_StructWithoutEqualMethod(this.A, that.A) &&
			this.B == that.B
}

func deriveEqualPtrToFieldWithStructWithPrivateFields(this, that *FieldWithStructWithPrivateFields) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqualPtrToextra_PrivateFieldAndNoEqualMethod(this.A, that.A)
}

func deriveEqualInefficientDeriveTheDerived(this, that int) bool {
	return this == that
}

func deriveEqualSliceOfint(this, that []int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfintToint(this, that map[int]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualPtrToint(this, that *int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		return *this == *that
	}
	return false
}

func deriveEqualPtrToSliceOfint(this, that *[]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToArray10Ofint(this, that *[10]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		for i := 0; i < len(*this); i++ {
			if !((*this)[i] == (*that)[i]) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqualPtrToMapOfintToint(this, that *map[int]int) bool {
	if this == nil && that == nil {
		return true
	}
	if this != nil && that != nil {
		if *this == nil || *that == nil {
			return *this == nil && *that == nil
		}
		if len(*this) != len(*that) {
			return false
		}
		for k, v := range *this {
			thatv, ok := (*that)[k]
			if !ok {
				return false
			}
			if !(v == thatv) {
				return false
			}
		}
		return true
	}
	return false
}

func deriveEqual1(this, that BuiltInTypes) bool {
	return (&this).Equal(&that)
}

func deriveClonePtrToMapsOfBuiltInTypes(this *MapsOfBuiltInTypes) *MapsOfBuiltInTypes {
	var that *MapsOfBuiltInTypes
	if this != nil {
		that = new(MapsOfBuiltInTypes)
		if this.BoolToString != nil {
			that.BoolToString = make(map[bool]string, len(this.BoolToString))
			for thiskey, thisvalue := range this.BoolToString {
				that.BoolToString[thiskey] = thisvalue
			}
		}
		if this.StringToBool != nil {
			that.StringToBool = make(map[string]bool, len(this.StringToBool))
			for thiskey, thisvalue := range this.StringToBool {
				that.StringToBool[thiskey] = thisvalue
			}
		}
		if this.Complex128ToComplex64 != nil {
			that.Complex128ToComplex64 = make(map[complex128]complex64, len(this.Complex128ToComplex64))
			for thiskey, thisvalue := range this.Complex128ToComplex64 {
				that.Complex128ToComplex64[thiskey] = thisvalue
			}
		}
		if this.Float64ToUint32 != nil {
			that.Float64ToUint32 = make(map[float64]uint32, len(this.Float64ToUint32))
			for thiskey, thisvalue := range this.Float64ToUint32 {
				that.Float64ToUint32[thiskey] = thisvalue
			}
		}
		if this.Uint16ToUint8 != nil {
			that.Uint16ToUint8 = make(map[uint16]uint8, len(this.Uint16ToUint8))
			for thiskey, thisvalue := range this.Uint16ToUint8 {
				that.Uint16ToUint8[thiskey] = thisvalue
			}
		}
	}
	return that
}

func deriveClonePtrToBuiltInTypes(this *BuiltInTypes) *BuiltInTypes {
	var that *BuiltInTypes
	if this != nil {
		that = new(BuiltInTypes)
		that.Bool = this.Bool
		that.Byte = this.Byte
		that.Complex128 = this.Complex128
		that.Complex64 = this.Complex64
		that.Float64 = this.Float64
		that.Float32 = this.Float32
		that.Int = this.Int
		that.Int16 = this.Int16
		that.Int32 = this.Int32
		that.Int64 = this.Int64
		that.Int8 = this.Int8
		that.Rune = this.Rune
		that.String = this.String
		that.Uint = this.Uint
		that.Uint16 = this.Uint16
		that.Uint32 = this.Uint32
		that.Uint64 = this.Uint64
		that.Uint8 = this.Uint8
		that.UintPtr = this.UintPtr
	}
	return that
}

func deriveClonePtrToPtrToBuiltInTypes(this *PtrToBuiltInTypes) *PtrToBuiltInTypes {
	var that *PtrToBuiltInTypes
	if this != nil {
		that = new(PtrToBuiltInTypes)
		if this.Bool != nil {
			that.Bool = new(bool)
			*that.Bool = *this.Bool
		}
		if this.Byte != nil {
			that.Byte = new(byte)
			*that.Byte = *this.Byte
		}
		if this.Complex128 != nil {
			that.Complex128 = new(complex128)
			*that.Complex128 = *this.Complex128
		}
		if this.Complex64 != nil {
			that.Complex64 = new(complex64)
			*that.Complex64 = *this.Complex64
		}
		if this.Float64 != nil {
			that.Float64 = new(float64)
			*that.Float64 = *this.Float64
		}
		if this.Float32 != nil {
			that.Float32 = new(float32)
			*that.Float32 = *this.Float32
		}
		if this.Int != nil {
			that.Int = new(int)
			*that.Int = *this.Int
		}
		if this.Int16 != nil {
			that.Int16 = new(int16)
			*that.Int16 = *this.Int16
		}
		if this.Int32 != nil {
			that.Int32 = new(int32)
			*that.Int32 = *this.Int32
		}
		if this.Int64 != nil {
			that.Int64 = new(int64)
			*that.Int64 = *this.Int64
		}
		if this.Int8 != nil {
			that.Int8 = new(int8)
			*that.Int8 = *this.Int8
		}
		if this.Rune != nil {
			that.Rune = new(rune)
			*that.Rune = *this.Rune
		}
		if this.String != nil {
			that.String = new(string)
			*that.String = *this.String
		}
		if this.Uint != nil {
			that.Uint = new(uint)
			*that.Uint = *this.Uint
		}
		if this.Uint16 != nil {
			that.Uint16 = new(uint16)
			*that.Uint16 = *this.Uint16
		}
		if this.Uint32 != nil {
			that.Uint32 = new(uint32)
			*that.Uint32 = *this.Uint32
		}
		if this.Uint64 != nil {
			that.Uint64 = new(uint64)
			*that.Uint64 = *this.Uint64
		}
		if this.Uint8 != nil {
			that.Uint8 = new(uint8)
			*that.Uint8 = *this.Uint8
		}
		if this.UintPtr != nil {
			that.UintPtr = new(uintptr)
			*that.UintPtr = *this.UintPtr
		}
	}
	return that
}

func deriveClonePtrToSliceOfBuiltInTypes(this *SliceOfBuiltInTypes) *SliceOfBuiltInTypes {
	var that *SliceOfBuiltInTypes
	if this != nil {
		that = new(SliceOfBuiltInTypes)
		if this.Bool != nil {
			that.Bool = make([]bool, len(this.Bool))
			copy(that.Bool, this.Bool)
		}
		if this.Byte != nil {
			that.Byte = make([]byte, len(this.Byte))
			copy(that.Byte, this.Byte)
		}
		if this.Complex128 != nil {
			that.Complex128 = make([]complex128, len(this.Complex128))
			copy(that.Complex128, this.Complex128)
		}
		if this.Complex64 != nil {
			that.Complex64 = make([]complex64, len(this.Complex64))
			copy(that.Complex64, this.Complex64)
		}
		if this.Float64 != nil {
			that.Float64 = make([]float64, len(this.Float64))
			copy(that.Float64, this.Float64)
		}
		if this.Float32 != nil {
			that.Float32 = make([]float32, len(this.Float32))
			copy(that.Float32, this.Float32)
		}
		if this.Int != nil {
			that.Int = make([]int, len(this.Int))
			copy(that.Int, this.Int)
		}
		if this.Int16 != nil {
			that.Int16 = make([]int16, len(this.Int16))
			copy(that.Int16, this.Int16)
		}
		if this.Int32 != nil {
			that.Int32 = make([]int32, len(this.Int32))
			copy(that.Int32, this.Int32)
		}
		if this.Int64 != nil {
			that.Int64 = make([]int64, len(this.Int64))
			copy(that.Int64, this.Int64)
		}
		if this.Int8 != nil {
			that.Int8 = make([]int8, len(this.Int8))
			copy(that.Int8, this.Int8)
		}
		if this.Rune != nil {
			that.Rune = make([]rune, len(this.Rune))
			copy(that.Rune, this.Rune)
		}
		if this.String != nil {
			that.String = make([]string, len(this.String))
			copy(that.String, this.String)
		}
		if this.Uint != nil {
			that.Uint = make([]uint, len(this.Uint))
			copy(that.Uint, this.Uint)
		}
		if this.Uint16 != nil {
			that.Uint16 = make([]uint16, len(this.Uint16))
			copy(that.Uint16, this.Uint16)
		}
		if this.Uint32 != nil {
			that.Uint32 = make([]uint32, len(this.Uint32))
			copy(that.Uint32, this.Uint32)
		}
		if this.Uint64 != nil {
			that.Uint64 = make([]uint64, len(this.Uint64))
			copy(that.Uint64, this.Uint64)
		}
		if this.Uint8 != nil {
			that.Uint8 = make([]uint8, len(this.Uint8))
			copy(that.Uint8, this.Uint8)
		}
		if this.UintPtr != nil {
			that.UintPtr = make([]uintptr, len(this.UintPtr))
			copy(that.UintPtr, this.UintPtr)
		}
	}
	return that
}

func deriveClonePtrToSliceOfPtrToBuiltInTypes(this *SliceOfPtrToBuiltInTypes) *SliceOfPtrToBuiltInTypes {
	var that *SliceOfPtrToBuiltInTypes
	if this != nil {
		that = new(SliceOfPtrToBuiltInTypes)
		if this.Bool != nil {
			that.Bool = make([]*bool, len(this.Bool))
			for i, thisvalue := range this.Bool {
				if thisvalue != nil {
					that.Bool[i] = new(bool)
					*that.Bool[i] = *thisvalue
				}
			}
		}
		if this.Byte != nil {
			that.Byte = make([]*byte, len(this.Byte))
			for i, thisvalue := range this.Byte {
				if thisvalue != nil {
					that.Byte[i] = new(byte)
					*that.Byte[i] = *thisvalue
				}
			}
		}
		if this.Complex128 != nil {
			that.Complex128 = make([]*complex128, len(this.Complex128))
			for i, thisvalue := range this.Complex128 {
				if thisvalue != nil {
					that.Complex128[i] = new(complex128)
					*that.Complex128[i] = *thisvalue
				}
			}
		}
		if this.Complex64 != nil {
			that.Complex64 = make([]*complex64, len(this.Complex64))
			for i, thisvalue := range this.Complex64 {
				if thisvalue != nil {
					that.Complex64[i] = new(complex64)
					*that.Complex64[i] = *thisvalue
				}
			}
		}
		if this.Float64 != nil {
			that.Float64 = make([]*float64, len(this.Float64))
			for i, thisvalue := range this.Float64 {
				if thisvalue != nil {
					that.Float64[i] = new(float64)
					*that.Float64[i] = *thisvalue
				}
			}
		}
		if this.Float32 != nil {
			that.Float32 = make([]*float32, len(this.Float32))
			for i, thisvalue := range this.Float32 {
				if thisvalue != nil {
					that.Float32[i] = new(float32)
					*that.Float32[i] = *thisvalue
				}
			}
		}
		if this.Int != nil {
			that.Int = make([]*int, len(this.Int))
			for i, thisvalue := range this.Int {
				if thisvalue != nil {
					that.Int[i] = new(int)
					*that.Int[i] = *thisvalue
				}
			}
		}
		if this.Int16 != nil {
			that.Int16 = make([]*int16, len(this.Int16))
			for i, thisvalue := range this.Int16 {
				if thisvalue != nil {
					that.Int16[i] = new(int16)
					*that.Int16[i] = *thisvalue
				}
			}
		}
		if this.Int32 != nil {
			that.Int32 = make([]*int32, len(this.Int32))
			for i, thisvalue := range this.Int32 {
				if thisvalue != nil {
					that.Int32[i] = new(int32)
					*that.Int32[i] = *thisvalue
				}
			}
		}
		if this.Int64 != nil {
			that.Int64 = make([]*int64, len(this.Int64))
			for i, thisvalue := range this.Int64 {
				if thisvalue != nil {
					that.Int64[i] = new(int64)
					*that.Int64[i] = *thisvalue
				}
			}
		}
		if this.Int8 != nil {
			that.Int8 = make([]*int8, len(this.Int8))
			for i, thisvalue := range this.Int8 {
				if thisvalue != nil {
					that.Int8[i] = new(int8)
					*that.Int8[i] = *thisvalue
				}
			}
		}
		if this.Rune != nil {
			that.Rune = make([]*rune, len(this.Rune))
			for i, thisvalue := range this.Rune {
				if thisvalue != nil {
					that.Rune[i] = new(rune)
					*that.Rune[i] = *thisvalue
				}
			}
		}
		if this.String != nil {
			that.String = make([]*string, len(this.String))
			for i, thisvalue := range this.String {
				if thisvalue != nil {
					that.String[i] = new(string)
					*that.String[i] = *thisvalue
				}
			}
		}
		if this.Uint != nil {
			that.Uint = make([]*uint, len(this.Uint))
			for i, thisvalue := range this.Uint {
				if thisvalue != nil {
					that.Uint[i] = new(uint)
					*that.Uint[i] = *thisvalue
				}
			}
		}
		if this.Uint16 != nil {
			that.Uint16 = make([]*uint16, len(this.Uint16))
			for i, thisvalue := range this.Uint16 {
				if thisvalue != nil {
					that.Uint16[i] = new(uint16)
					*that.Uint16[i] = *thisvalue
				}
			}
		}
		if this.Uint32 != nil {
			that.Uint32 = make([]*uint32, len(this.Uint32))
			for i, thisvalue := range this.Uint32 {
				if thisvalue != nil {
					that.Uint32[i] = new(uint32)
					*that.Uint32[i] = *thisvalue
				}
			}
		}
		if this.Uint64 != nil {
			that.Uint64 = make([]*uint64, len(this.Uint64))
			for i, thisvalue := range this.Uint64 {
				if thisvalue != nil {
					that.Uint64[i] = new(uint64)
					*that.Uint64[i] = *thisvalue
				}
			}
		}
		if this.Uint8 != nil {
			that.Uint8 = make([]*uint8, len(this.Uint8))
			for i, thisvalue := range this.Uint8 {
				if thisvalue != nil {
					that.Uint8[i] = new(uint8)
					*that.Uint8[i] = *thisvalue
				}
			}
		}
		if this.UintPtr != nil {
			that.UintPtr = make([]*uintptr, len(this.UintPtr))
			for i, thisvalue := range this.UintPtr {
				if thisvalue != nil {
					that.UintPtr[i] = new(uintptr)
					*that.UintPtr[i] = *thisvalue
				}
			}
		}
	}
	return that
}

func deriveClonePtrToArrayOfBuiltInTypes(this *ArrayOfBuiltInTypes) *ArrayOfBuiltInTypes {
	var that *ArrayOfBuiltInTypes
	if this != nil {
		that = new(ArrayOfBuiltInTypes)
		that.Bool = this.Bool
		that.Byte = this.Byte
		that.Complex128 = this.Complex128
		that.Complex64 = this.Complex64
		that.Float64 = this.Float64
		that.Float32 = this.Float32
		that.Int = this.Int
		that.Int16 = this.Int16
		that.Int32 = this.Int32
		that.Int64 = this.Int64
		that.Int8 = this.Int8
		that.Rune = this.Rune
		that.String = this.String
		that.Uint = this.Uint
		that.Uint16 = this.Uint16
		that.Uint32 = this.Uint32
		that.Uint64 = this.Uint64
		that.Uint8 = this.Uint8
		that.UintPtr = this.UintPtr
		that.AnotherBoolOfDifferentSize = this.AnotherBoolOfDifferentSize
	}
	return that
}

func deriveClonePtrToArrayOfPtrToBuiltInTypes(this *ArrayOfPtrToBuiltInTypes) *ArrayOfPtrToBuiltInTypes {
	var that *ArrayOfPtrToBuiltInTypes
	if this != nil {
		that = new(ArrayOfPtrToBuiltInTypes)
		for i, thisvalue := range this.Bool {
			if thisvalue != nil {
				that.Bool[i] = new(bool)
				*that.Bool[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Byte {
			if thisvalue != nil {
				that.Byte[i] = new(byte)
				*that.Byte[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Complex128 {
			if thisvalue != nil {
				that.Complex128[i] = new(complex128)
				*that.Complex128[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Complex64 {
			if thisvalue != nil {
				that.Complex64[i] = new(complex64)
				*that.Complex64[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Float64 {
			if thisvalue != nil {
				that.Float64[i] = new(float64)
				*that.Float64[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Float32 {
			if thisvalue != nil {
				that.Float32[i] = new(float32)
				*that.Float32[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Int {
			if thisvalue != nil {
				that.Int[i] = new(int)
				*that.Int[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Int16 {
			if thisvalue != nil {
				that.Int16[i] = new(int16)
				*that.Int16[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Int32 {
			if thisvalue != nil {
				that.Int32[i] = new(int32)
				*that.Int32[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Int64 {
			if thisvalue != nil {
				that.Int64[i] = new(int64)
				*that.Int64[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Int8 {
			if thisvalue != nil {
				that.Int8[i] = new(int8)
				*that.Int8[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Rune {
			if thisvalue != nil {
				that.Rune[i] = new(rune)
				*that.Rune[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.String {
			if thisvalue != nil {
				that.String[i] = new(string)
				*that.String[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Uint {
			if thisvalue != nil {
				that.Uint[i] = new(uint)
				*that.Uint[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Uint16 {
			if thisvalue != nil {
				that.Uint16[i] = new(uint16)
				*that.Uint16[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Uint32 {
			if thisvalue != nil {
				that.Uint32[i] = new(uint32)
				*that.Uint32[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Uint64 {
			if thisvalue != nil {
				that.Uint64[i] = new(uint64)
				*that.Uint64[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.Uint8 {
			if thisvalue != nil {
				that.Uint8[i] = new(uint8)
				*that.Uint8[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.UintPtr {
			if thisvalue != nil {
				that.UintPtr[i] = new(uintptr)
				*that.UintPtr[i] = *thisvalue
			}
		}
		for i, thisvalue := range this.AnotherBoolOfDifferentSize {
			if thisvalue != nil {
				that.AnotherBoolOfDifferentSize[i] = new(bool)
				*that.AnotherBoolOfDifferentSize[i] = *thisvalue
			}
		}
	}
	return that
}

func deriveClonePtrToMapsOfSimplerBuiltInTypes(this *MapsOfSimplerBuiltInTypes) *MapsOfSimplerBuiltInTypes {
	var that *MapsOfSimplerBuiltInTypes
	if this != nil {
		that = new(MapsOfSimplerBuiltInTypes)
		if this.StringToUint32 != nil {
			that.StringToUint32 = make(map[string]uint32, len(this.StringToUint32))
			for thiskey, thisvalue := range this.StringToUint32 {
				that.StringToUint32[thiskey] = thisvalue
			}
		}
		if this.Uint64ToInt64 != nil {
			that.Uint64ToInt64 = make(map[uint8]int64, len(this.Uint64ToInt64))
			for thiskey, thisvalue := range this.Uint64ToInt64 {
				that.Uint64ToInt64[thiskey] = thisvalue
			}
		}
	}
	return that
}

func deriveKeysForFmap(m map[int]string) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapStringToString(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapIntToInt64(m map[int]int64) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysForMapInt64ToInt64(m map[int64]int64) []int64 {
	keys := make([]int64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveJoin(list [][]int) []int {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]int, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveJoinSS(list [][]string) []string {
	if list == nil {
		return nil
	}
	l := 0
	for _, elem := range list {
		l += len(elem)
	}
	res := make([]string, 0, l)
	for _, elem := range list {
		res = append(res, elem...)
	}
	return res
}

func deriveFmapForKeys(f func(int) string, list []int) []string {
	out := make([]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmap(f func(int) int, list []int) []int {
	out := make([]int, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveFmapSS(f func(string) []string, list []string) [][]string {
	out := make([][]string, len(list))
	for i, elem := range list {
		out[i] = f(elem)
	}
	return out
}

func deriveComparebool(this, that bool) int {
	if this == that {
		return 0
	}
	if that {
		return -1
	}
	return 1
}

func deriveComparebyte(this, that byte) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveComparefloat64(this, that float64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveComparefloat32(this, that float32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareint(this, that int) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareint16(this, that int16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareint32(this, that int32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareint64(this, that int64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareint8(this, that int8) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveComparerune(this, that rune) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuint(this, that uint) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuint16(this, that uint16) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuint32(this, that uint32) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuint64(this, that uint64) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuint8(this, that uint8) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveCompareuintptr(this, that uintptr) int {
	if this != that {
		if this < that {
			return -1
		} else {
			return 1
		}
	}
	return 0
}

func deriveComparePtrTobool(this, that *bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparebool(*this, *that)
}

func deriveComparePtrTobyte(this, that *byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparebyte(*this, *that)
}

func deriveComparePtrTocomplex128(this, that *complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex64(*this, *that)
}

func deriveComparePtrTocomplex64(this, that *complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareComplex32(*this, *that)
}

func deriveComparePtrTofloat64(this, that *float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparefloat64(*this, *that)
}

func deriveComparePtrTofloat32(this, that *float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparefloat32(*this, *that)
}

func deriveComparePtrToint(this, that *int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareint(*this, *that)
}

func deriveComparePtrToint16(this, that *int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareint16(*this, *that)
}

func deriveComparePtrToint32(this, that *int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareint32(*this, *that)
}

func deriveComparePtrToint64(this, that *int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareint64(*this, *that)
}

func deriveComparePtrToint8(this, that *int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareint8(*this, *that)
}

func deriveComparePtrTorune(this, that *rune) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparerune(*this, *that)
}

func deriveComparePtrTostring(this, that *string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveComparestring(*this, *that)
}

func deriveComparePtrTouint(this, that *uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuint(*this, *that)
}

func deriveComparePtrTouint16(this, that *uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuint16(*this, *that)
}

func deriveComparePtrTouint32(this, that *uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuint32(*this, *that)
}

func deriveComparePtrTouint64(this, that *uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuint64(*this, *that)
}

func deriveComparePtrTouint8(this, that *uint8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuint8(*this, *that)
}

func deriveComparePtrTouintptr(this, that *uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareuintptr(*this, *that)
}

func deriveCompareSliceOfbool(this, that []bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparebool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfcomplex128(this, that []complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfcomplex64(this, that []complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOffloat64(this, that []float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparefloat64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOffloat32(this, that []float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparefloat32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfint(this, that []int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfint16(this, that []int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfint32(this, that []int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfint64(this, that []int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfint8(this, that []int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfrune(this, that []rune) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparerune(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfstring(this, that []string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfuint(this, that []uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfuint16(this, that []uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfuint32(this, that []uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfuint64(this, that []uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfuintptr(this, that []uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuintptr(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTobool(this, that []*bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTobool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTobyte(this, that []*byte) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTobyte(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTocomplex128(this, that []*complex128) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTocomplex128(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTocomplex64(this, that []*complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTocomplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTofloat64(this, that []*float64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTofloat64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTofloat32(this, that []*float32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTofloat32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToint(this, that []*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToint16(this, that []*int16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToint32(this, that []*int32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToint64(this, that []*int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToint8(this, that []*int8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTorune(this, that []*rune) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTorune(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTostring(this, that []*string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTostring(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouint(this, that []*uint) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouint16(this, that []*uint16) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouint32(this, that []*uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouint64(this, that []*uint64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouint8(this, that []*uint8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrTouintptr(this, that []*uintptr) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouintptr(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray1Ofbool(this, that [1]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparebool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray2Ofbyte(this, that [2]byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparebyte(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray3Ofcomplex128(this, that [3]complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray4Ofcomplex64(this, that [4]complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareComplex32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray5Offloat64(this, that [5]float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparefloat64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray6Offloat32(this, that [6]float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparefloat32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray7Ofint(this, that [7]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray8Ofint16(this, that [8]int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray9Ofint32(this, that [9]int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray10Ofint64(this, that [10]int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray11Ofint8(this, that [11]int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray12Ofrune(this, that [12]rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparerune(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray13Ofstring(this, that [13]string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := strings.Compare(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray14Ofuint(this, that [14]uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray15Ofuint16(this, that [15]uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray16Ofuint32(this, that [16]uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray17Ofuint64(this, that [17]uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray18Ofuint8(this, that [18]uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray19Ofuintptr(this, that [19]uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareuintptr(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray10Ofbool(this, that [10]bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparebool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray1OfPtrTobool(this, that [1]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTobool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray2OfPtrTobyte(this, that [2]*byte) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTobyte(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray3OfPtrTocomplex128(this, that [3]*complex128) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTocomplex128(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray4OfPtrTocomplex64(this, that [4]*complex64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTocomplex64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray5OfPtrTofloat64(this, that [5]*float64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTofloat64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray6OfPtrTofloat32(this, that [6]*float32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTofloat32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray7OfPtrToint(this, that [7]*int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray8OfPtrToint16(this, that [8]*int16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray9OfPtrToint32(this, that [9]*int32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray10OfPtrToint64(this, that [10]*int64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray11OfPtrToint8(this, that [11]*int8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrToint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray12OfPtrTorune(this, that [12]*rune) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTorune(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray13OfPtrTostring(this, that [13]*string) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTostring(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray14OfPtrTouint(this, that [14]*uint) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray15OfPtrTouint16(this, that [15]*uint16) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint16(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray16OfPtrTouint32(this, that [16]*uint32) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint32(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray17OfPtrTouint64(this, that [17]*uint64) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint64(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray18OfPtrTouint8(this, that [18]*uint8) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouint8(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray19OfPtrTouintptr(this, that [19]*uintptr) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTouintptr(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareArray10OfPtrTobool(this, that [10]*bool) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveComparePtrTobool(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareMapOfstringTouint32(this, that map[string]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringTouint32(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringTouint32(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareuint32(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfuint8Toint64(this, that map[uint8]int64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfuint8(deriveKeysMapOfuint8Toint64(this))
	thatkeys := deriveSortSliceOfuint8(deriveKeysMapOfuint8Toint64(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareint64(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareuint8(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfboolTostring(this, that map[bool]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfbool(deriveKeysMapOfboolTostring(this))
	thatkeys := deriveSortSliceOfbool(deriveKeysMapOfboolTostring(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveComparebool(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfstringTobool(this, that map[string]bool) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringTobool(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringTobool(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveComparebool(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfcomplex128Tocomplex64(this, that map[complex128]complex64) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfcomplex128(deriveKeysMapOfcomplex128Tocomplex64(this))
	thatkeys := deriveSortSliceOfcomplex128(deriveKeysMapOfcomplex128Tocomplex64(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareComplex32(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareComplex64(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOffloat64Touint32(this, that map[float64]uint32) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOffloat64(deriveKeysMapOffloat64Touint32(this))
	thatkeys := deriveSortSliceOffloat64(deriveKeysMapOffloat64Touint32(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareuint32(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveComparefloat64(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfuint16Touint8(this, that map[uint16]uint8) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfuint16(deriveKeysMapOfuint16Touint8(this))
	thatkeys := deriveSortSliceOfuint16(deriveKeysMapOfuint16Touint8(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareuint8(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareuint16(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareSliceOfSliceOfint(this, that [][]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareSliceOfint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfSliceOfstring(this, that [][]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareSliceOfstring(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfSliceOfPtrToint(this, that [][]*int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareSliceOfPtrToint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveComparePtrToSliceOfint(this, that *[]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareSliceOfint(*this, *that)
}

func deriveComparePtrToArray4Ofint(this, that *[4]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareArray4Ofint(*this, *that)
}

func deriveComparePtrToMapOfintToint(this, that *map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	return deriveCompareMapOfintToint(*this, *that)
}

func deriveCompareSliceOfName(this, that []Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(&that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareSliceOfPtrToName(this, that []*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := this[i].Compare(that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareMapOfNameTostring(this, that map[Name]string) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfName(deriveKeysMapOfNameTostring(this))
	thatkeys := deriveSortSliceOfName(deriveKeysMapOfNameTostring(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := strings.Compare(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := thiskey.Compare(&thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfstringToName(this, that map[string]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringToName(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringToName(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfstringToPtrToName(this, that map[string]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringToPtrToName(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringToPtrToName(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfstringToSliceOfName(this, that map[string][]Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringToSliceOfName(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringToSliceOfName(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareSliceOfName(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfstringToSliceOfPtrToName(this, that map[string][]*Name) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfstring(deriveKeysMapOfstringToSliceOfPtrToName(this))
	thatkeys := deriveSortSliceOfstring(deriveKeysMapOfstringToSliceOfPtrToName(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareSliceOfPtrToName(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := strings.Compare(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareMapOfintToRecursiveType(this, that map[int]RecursiveType) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfint(deriveKeysMapOfintToRecursiveType(this))
	thatkeys := deriveSortSliceOfint(deriveKeysMapOfintToRecursiveType(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := thisvalue.Compare(&thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareint(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveComparePtrToStructWithoutEqualMethod(this, that *StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareint64(this.Num, that.Num); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToextra_StructWithoutEqualMethod(this, that *extra.StructWithoutEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if c := deriveCompareint64(this.Number, that.Number); c != 0 {
		return c
	}
	return 0
}

func deriveComparePtrToextra_PrivateFieldAndNoEqualMethod(this, that *extra.PrivateFieldAndNoEqualMethod) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	if c := deriveCompareint64(*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())), *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfint64(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveComparePtrToint64(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())), *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveCompareSliceOfPtrToint64(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))); c != 0 {
		return c
	}
	if c := deriveComparePtrToextra_StructWithoutEqualMethod(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr()))); c != 0 {
		return c
	}
	return 0
}

func deriveEqualSliceOfbool(this, that []bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfcomplex128(this, that []complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfcomplex64(this, that []complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOffloat64(this, that []float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOffloat32(this, that []float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfint16(this, that []int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfint32(this, that []int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfint64(this, that []int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfint8(this, that []int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfrune(this, that []rune) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfstring(this, that []string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfuint(this, that []uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfuint16(this, that []uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfuint32(this, that []uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfuint64(this, that []uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfuintptr(this, that []uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTobool(this, that []*bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTobyte(this, that []*byte) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTocomplex128(this, that []*complex128) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTocomplex64(this, that []*complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTofloat64(this, that []*float64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTofloat32(this, that []*float32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToint(this, that []*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToint16(this, that []*int16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToint32(this, that []*int32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToint64(this, that []*int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToint8(this, that []*int8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTorune(this, that []*rune) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTostring(this, that []*string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouint(this, that []*uint) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouint16(this, that []*uint16) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouint32(this, that []*uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouint64(this, that []*uint64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouint8(this, that []*uint8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrTouintptr(this, that []*uintptr) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray1OfPtrTobool(this, that [1]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray2OfPtrTobyte(this, that [2]*byte) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray3OfPtrTocomplex128(this, that [3]*complex128) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray4OfPtrTocomplex64(this, that [4]*complex64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray5OfPtrTofloat64(this, that [5]*float64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray6OfPtrTofloat32(this, that [6]*float32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray7OfPtrToint(this, that [7]*int) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray8OfPtrToint16(this, that [8]*int16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray9OfPtrToint32(this, that [9]*int32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray10OfPtrToint64(this, that [10]*int64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray11OfPtrToint8(this, that [11]*int8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray12OfPtrTorune(this, that [12]*rune) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray13OfPtrTostring(this, that [13]*string) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray14OfPtrTouint(this, that [14]*uint) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray15OfPtrTouint16(this, that [15]*uint16) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray16OfPtrTouint32(this, that [16]*uint32) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray17OfPtrTouint64(this, that [17]*uint64) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray18OfPtrTouint8(this, that [18]*uint8) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray19OfPtrTouintptr(this, that [19]*uintptr) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualArray10OfPtrTobool(this, that [10]*bool) bool {
	for i := 0; i < len(this); i++ {
		if !((this[i] == nil && that[i] == nil) || (this[i] != nil && that[i] != nil && *(this[i]) == *(that[i]))) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringTouint32(this, that map[string]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfuint8Toint64(this, that map[uint8]int64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfboolTostring(this, that map[bool]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringTobool(this, that map[string]bool) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfcomplex128Tocomplex64(this, that map[complex128]complex64) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOffloat64Touint32(this, that map[float64]uint32) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfuint16Touint8(this, that map[uint16]uint8) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfSliceOfint(this, that [][]int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqualSliceOfint(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfSliceOfstring(this, that [][]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqualSliceOfstring(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfSliceOfPtrToint(this, that [][]*int) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveEqualSliceOfPtrToint(this[i], that[i])) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfName(this, that []Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i] == that[i]) {
			return false
		}
	}
	return true
}

func deriveEqualSliceOfPtrToName(this, that []*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(this[i].Equal(that[i])) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfNameTostring(this, that map[Name]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringToName(this, that map[string]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringToPtrToName(this, that map[string]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(thatv)) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringToSliceOfName(this, that map[string][]Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqualSliceOfName(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfstringToSliceOfPtrToName(this, that map[string][]*Name) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqualSliceOfPtrToName(v, thatv)) {
			return false
		}
	}
	return true
}

func deriveEqualMapOfintToRecursiveType(this, that map[int]RecursiveType) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v.Equal(&thatv)) {
			return false
		}
	}
	return true
}

func deriveEqualPtrToStructWithoutEqualMethod(this, that *StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Num == that.Num
}

func deriveEqualPtrToextra_StructWithoutEqualMethod(this, that *extra.StructWithoutEqualMethod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Number == that.Number
}

func deriveEqualPtrToextra_PrivateFieldAndNoEqualMethod(this, that *extra.PrivateFieldAndNoEqualMethod) bool {
	thisv := reflect.Indirect(reflect.ValueOf(this))
	thatv := reflect.Indirect(reflect.ValueOf(that))
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			*(*int64)(unsafe.Pointer(thisv.FieldByName("number").UnsafeAddr())) == *(*int64)(unsafe.Pointer(thatv.FieldByName("number").UnsafeAddr())) &&
			deriveEqualSliceOfint64(*(*[]int64)(unsafe.Pointer(thisv.FieldByName("numbers").UnsafeAddr())), *(*[]int64)(unsafe.Pointer(thatv.FieldByName("numbers").UnsafeAddr()))) &&
			((*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) == nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) == nil) || (*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr())) != nil && *(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr())) != nil && *(*(**int64)(unsafe.Pointer(thisv.FieldByName("ptr").UnsafeAddr()))) == *(*(**int64)(unsafe.Pointer(thatv.FieldByName("ptr").UnsafeAddr()))))) &&
			deriveEqualSliceOfPtrToint64(*(*[]*int64)(unsafe.Pointer(thisv.FieldByName("numberpts").UnsafeAddr())), *(*[]*int64)(unsafe.Pointer(thatv.FieldByName("numberpts").UnsafeAddr()))) &&
			deriveEqualPtrToextra_StructWithoutEqualMethod(*(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thisv.FieldByName("strct").UnsafeAddr())), *(**extra.StructWithoutEqualMethod)(unsafe.Pointer(thatv.FieldByName("strct").UnsafeAddr())))
}

func deriveSortSliceOfstring(list []string) []string {
	sort.Strings(list)
	return list
}

func deriveSortSliceOfuint8(list []uint8) []uint8 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSortSliceOfbool(list []bool) []bool {
	sort.Slice(list, func(i, j int) bool { return deriveComparebool(list[i], list[j]) < 0 })
	return list
}

func deriveSortSliceOfcomplex128(list []complex128) []complex128 {
	sort.Slice(list, func(i, j int) bool { return deriveCompareComplex64(list[i], list[j]) < 0 })
	return list
}

func deriveSortSliceOffloat64(list []float64) []float64 {
	sort.Float64s(list)
	return list
}

func deriveSortSliceOfuint16(list []uint16) []uint16 {
	sort.Slice(list, func(i, j int) bool { return list[i] < list[j] })
	return list
}

func deriveSortSliceOfName(list []Name) []Name {
	sort.Slice(list, func(i, j int) bool { return deriveCompareName(list[i], list[j]) < 0 })
	return list
}

func deriveSortSliceOfint(list []int) []int {
	sort.Ints(list)
	return list
}

func deriveKeysMapOfstringTouint32(m map[string]uint32) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfuint8Toint64(m map[uint8]int64) []uint8 {
	keys := make([]uint8, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfboolTostring(m map[bool]string) []bool {
	keys := make([]bool, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfstringTobool(m map[string]bool) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfcomplex128Tocomplex64(m map[complex128]complex64) []complex128 {
	keys := make([]complex128, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOffloat64Touint32(m map[float64]uint32) []float64 {
	keys := make([]float64, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfuint16Touint8(m map[uint16]uint8) []uint16 {
	keys := make([]uint16, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfNameTostring(m map[Name]string) []Name {
	keys := make([]Name, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfstringToName(m map[string]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfstringToPtrToName(m map[string]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfstringToSliceOfName(m map[string][]Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfstringToSliceOfPtrToName(m map[string][]*Name) []string {
	keys := make([]string, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveKeysMapOfintToRecursiveType(m map[int]RecursiveType) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}

func deriveComparestring(this, that string) int {
	return strings.Compare(this, that)
}

func deriveCompareArray4Ofint(this, that [4]int) int {
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	for i := 0; i < len(this); i++ {
		if c := deriveCompareint(this[i], that[i]); c != 0 {
			return c
		}
	}
	return 0
}

func deriveCompareMapOfintToint(this, that map[int]int) int {
	if this == nil {
		if that == nil {
			return 0
		}
		return -1
	}
	if that == nil {
		return 1
	}
	if len(this) != len(that) {
		if len(this) < len(that) {
			return -1
		}
		return 1
	}
	thiskeys := deriveSortSliceOfint(deriveKeysMapOfintToint(this))
	thatkeys := deriveSortSliceOfint(deriveKeysMapOfintToint(that))
	for i, thiskey := range thiskeys {
		thatkey := thatkeys[i]
		if thiskey == thatkey {
			thisvalue := this[thiskey]
			thatvalue := that[thatkey]
			if c := deriveCompareint(thisvalue, thatvalue); c != 0 {
				return c
			}
		} else {
			if c := deriveCompareint(thiskey, thatkey); c != 0 {
				return c
			}
		}
	}
	return 0
}

func deriveCompareName(this, that Name) int {
	return (&this).Compare(&that)
}

func deriveKeysMapOfintToint(m map[int]int) []int {
	keys := make([]int, 0, len(m))
	for key, _ := range m {
		keys = append(keys, key)
	}
	return keys
}
